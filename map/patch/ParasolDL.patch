#new:Data $ParasolIcon
{
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000003 33333333 30000000 55500000
00000333 33333333 33330005 55550000
00003334 9AAAAAAA 94333355 FB550000
00003349 AAAAAAAA AAA9435F B6550000
00003333 4AAAA999 99999456 65500000
00000033 39994888 88888885 55000000
00000003 34888EEE EEEEEE87 11000000
00000003 338EEEEE EEEEEE8D 71000000
00000000 2288EEEE EEEEEE8D D1100000
00000000 222288EE EEEEEE8D C1100000
00000000 0222228E EEEEEE8D C7110000
00000000 00002228 EEEEEE8D CD110000
00000000 00005522 8EEEEE8D CC110000
00000555 50055FB2 28EEEE8D CC110000
00005555 5555FB65 228EEE8D CC110000
000555FB 555FB655 228EE87C CC110000
00055FF6 55FB6550 0228E8DC CC110000
00056F65 5FB65500 022887DC CC110000
00056F66 BB655000 022227DC CC110000
00056BFB B6550000 00221117 CD110000
00055666 65500000 00000111 D7110000
00005555 55000000 00000011 71100000
00000555 50000000 00000001 11100000
00000000 00000000 00000001 11000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000
}

#new:Data $ParasolPalette
{
294A5A43 19DB7107 C2154215 8421B445
6C2FE353 FD5DC5EF F70BD587 8E3FD673
7BDE8421 7BDF8421 9CE78421 A529A529
A529AD6B C631C631 C631B5AD BDEFC631
}

#new:Data $ParasolVertexList
{
FFF0FFF0 00000000 00000000 000000FF 
000FFFF0 00000000 04000000 000000FF 
000F000F 00000000 04000400 000000FF 
FFF0000F 00000000 00000400 000000FF
}

#new:Data $DisplayList_Parasol
{
E7000000 00000000 D7000002 FFFFFFFF FCFFFFFF FFFCF279 E3000C00 00080000 
E3000D01 00000000 E3000F00 00000000 E3001001 00000000 E3001201 00003000 
E3001402 00000C00 E3001001 00008000 FD100000 $ParasolPalette E8000000 00000000 
F5000100 07000000 E6000000 00000000 F0000000 0703C000 E7000000 00000000 
FD48000F $ParasolIcon F5480400 07000000 E6000000 00000000 F4000000 0703E07C 
E7000000 00000000 F5400400 00000000 F2000000 0007C07C D9FDFFFF 00000000 
D9DFFFFF 00000000 01004008 $ParasolVertexList 05000204 00000000 05000406 00000000 
E7000000 00000000 DF000000 00000000 
}

#new:Data $DLScript
{
00000004 0000000D 00000001 0000003C $DisplayList_Parasol 00000002 00000000
}

#new:Function $ButtonCheck
{
 PUSH a0, a2, v1, ra
 LW             V0, 000C (A0)
 LUI            A2, 8007
 LW             A2, 4034 (A2)
 LW             V1, 0000 (V0)
 LW             A1, 0004 (V0)
 AND            A2, A2, V1
 JAL            802C8098
 SLTU           A2, R0, A2
 POP a0, a2, v1, ra
 JR             RA
 ADDIU          V0, R0, 0002
}

 #new:Function $CloseMenu
{
 SAW r0, $AFlag
 JR RA
 NOP
}

#new:Function $LoadMenuBool
{
PUSH a0, a1, a2, a3, v0, ra
LIO		a1, FE363C85 %Var F
LAW  	a2, $AFlag %value to set VarF to
JAL		~Func:set_variable
NOP
POP a0, a1, a2, a3, v0, ra
JR RA
NOP
}

#new:Function $GetCameraYaw %returns on *Var[X]
{
  PUSH ra %0, 4, 8
  LAW V0, 80077410 %load current camera ID - C, 10
  LA V1, 800B1D80 %load camera struct array pointer - 14, 18
  LI A2, 558 %camera struct size - 1C
  MULT V0, A2 %20
  LW A1, 000C (a0) %load pointer to args - 24				%instructions are interleaved to try to account for extra
  LW a1, 0000 (A1) %load Var[X] to store to %30
  MFLO A2 %put the offset of the current camera struct into A2  %time taken by MULT / MFLO. %28
  ADDU A2, V1, A2 %and add it to the array start
  JAL ~Func:set_float_variable %I think I was using the wrong var set before
  LW  A2, 90 (A2) %camera CurrentBlendedYawNegated (stored)
  POP ra
  JR RA
  LI V0, 2 %return done status
}

#new:Script:Map $ParasolActive
{
	Call     $ButtonCheck 	( 00000020 *Var[F] ) %L button
	If *Var[F] == 00000001
  		SetConst *Var[A]  000000D6 
  		Call     PlaySound    ( 000003FA )
  		Wait     00000003 
  		Call     CreateVirtualEntity ( *Var[A] $DLScript ) %CreateImageObj
  		Call	 GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
  		Add 	 *Var[0] FFFFFFFE
  		Add 	 *Var[1] 0000002E
  		Add      *Var[2] FFFFFFFB
  		Call     SetVirtualEntityPosition ( *Var[A] *Var[0] *Var[1] *Var[2] ) %SetObjPosition
  		Set      *Var[0]  00000085 
  		%rain's fix - rotate Parasol so it's facing the camera
  			Call      $GetCameraYaw ( *Var[1] )
       		Call     SetVirtualEntityRotation ( *Var[A] 00000000 *Var[1] *Var[0] ) %SetObjRotation
  		%Call     SetVirtualEntityRotation ( *Var[A] 00000000 00000000 *Var[0] ) %SetObjRotation
  		Set 	 *Var[0] 00000000
  		Call 	 $CloseMenu ()
  		Call 	 SetPlayerAnimation ( 0008000D )
  		Loop     00000040
  	  	Call   DisablePlayerPhysics ( .True )
  	  	Call   DisablePlayerInput ( .True )
  			Call 	 GetPlayerPos ( *Var[0] *Var[1] *Var[2] )
  		%
  			Set 	 *Var[3] *Var[0]
  			Set 	 *Var[4] *Var[1]
  			Set 	 *Var[5] *Var[2]
  		%
  			Add 	 *Var[3] FFFFFFFE
  			Add 	 *Var[4] 0000002E
  			Add    *Var[5] FFFFFFFD
  		%
  			Call   SetVirtualEntityPosition ( *Var[A] *Var[3] *Var[4] *Var[5] ) %SetObjPosition
  			Add 	 *Var[1] 00000002
  			Call 	 SetPlayerPos ( *Var[0] *Var[1] *Var[2] )
  			Wait 	 0000001
  		EndLoop
  		%Call     802D60E8 ( 000000FA ) %remove ambient sound please
  		Set  *GameByte[003] 00000000 %set Pit of 100 floor to 0 when warping out
  		Call $WarpFunction ()
	EndIf
Return
End
End %I'm not sure I wanna know
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
End
}

#new:Function $GlobalInRoom
{
PUSH t2, v1, a0, a1, a2, a3, ra %covers 00-1C
%check if menu is visible - no menu = no warp
LAW      a0, $AFlag				%20-28
BEQL      a0, r0, .end			%2C
	NOP							%30
%check if we are on the animation frame between two destinations - implies no warp
LAW		 A0, $CursorAnimation	%30-3?
BNEL     a0, r0, .end			%3C
	NOP							%40
%check if we are locked from warping
LAB		A0, 800DBD7B %WarpLock	%44-3C
BEQL    A0, R0, .lockClear  %0 = no lock
	NOP
BLTZL	A0, .end	 %negative lock = no warp at ALL, sorry	%50
	NOP				 %54
%check if we are special locked from warping
JAL 	$CalcCursorIntPos %returns on T2  %58
NOP					 %5C
LIO 	A0, $DynamicallyGeneratedWarpValues	%60-64
SLL 	T2, T2, 2  %*4 for table word
ADD		A0, A0, T2
LW		A0, 0 (A0) %get table word
BEQL	A0, R0, .end %if 0 (special lock), no warp
	NOP
.lockClear
%now actually look into if we are in a position to warp
LIO 	   a0, $ParasolActive
ADDIU    a1, R0, 000A
DADDU    a2, R0, R0
JAL 	802C33E0 %Start Script
NOP
.end
POP t2, v1, a0, a1, a2, a3, ra
JR RA
NOP
}

#export $GlobalInRoom
#export $ParasolActive
#export $LoadMenuBool
