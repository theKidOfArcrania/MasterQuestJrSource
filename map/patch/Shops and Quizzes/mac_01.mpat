
% ====================================================
% Changed the way Rowf selects badges from his table.
% Now you can supply up to 64` badges. As a bonus,
% Flag_MAC_03 through Flag_MAC_12 are no longer used.
% ====================================================

% When the number of badges in the table is changed,
% be sure to update this number! Maximum is 40 (64`).
#define .NumRowfBadges 17`

% Revised format includes both required story progress and 'bought' flag.
@ $RowfBadgeInventory
{
 %FFFFFF80  .Item:SpeedySpin       25`    0024008B % Increases the distance Mario can Spin Dash.
 %FFFFFF80  .Item:FirstAttack      75`    00240087 % Lets Mario destroy a weaker  enemy with a First St ...
 FFFFFF80  .Item:SpinSmash        40`    00240068 % If Mario hits an enemy, it smashes into the ones b ...
 FFFFFF80  .Item:DodgeMaster      50`    00240080 % Makes the action command work more frequently.
 FFFFFF80  .Item:SuperJump       70`    0023010D % 
 FFFFFFCB  .Item:Multibounce      50`    0024005E % Jumps on all enemies in a row if action command is ...
 FFFFFFCB  .Item:SleepStomp      70`    0024005C % If it works, the enemy Mario jumps on falls asleep ...
 FFFFFFCB  .Item:AutoSmash        25`    002F0007 % 
 FFFFFFF3  .Item:JumpCharge       40`    0024005A % When charged, Mario's Jump power goes up by 2.
 FFFFFFF3  .Item:DDownPound      100`    00240069 % Disables an enemy's defense power and injures it. 
 %FFFFFFF3  .Item:FeelingFine    150`    0024008C % Protects Mario from poisoning and dizziness during ...
 FFFFFFF3  .Item:SpikeShield     100`    0024007F % 
 FFFFFFF3  .Item:MedicineMan  150`    002F0011
 00000007  .Item:AllorNothing    175`    00240093 % If the action command works, attack power +1. If n ...
 00000007  .Item:HPPlusC         105`    00240071 % Increases maximum HP by 5.
 00000007  .Item:FPPlusC         105`    00240072 % Increases maximum FP by 5.
 00000029  .Item:SJumpChg        60`    0024005B % When supercharged, Mario's Jump power goes up b ...
 00000029  .Item:SSmashChg       60   00240065 % When supercharged, Mario's  Hammer power goes up b ...
 00000029  .Item:DamageDodgeA    200`    00240075 % If you do the action command, decreases Mario's da ...
 00000029  .Item:MegaQuake       150`    0024006C % Severely damages all enemies on the ground or ceil ...
}

% Do not change anything below this point!
% =================================================

#new:Function $Function_HasBadge % args: A0 = badgeID
{
	LIO		A2, 8010F344
	ADDIU	A3, A2, 100
	.Loop
	LH		A1, 0 (A2)
	BEQL	A0, A1, .End
	ADDIU	V0, R0, 1 % return true
	BNE		A2, A3, .Loop
	ADDIU	A2, A2, 2
	ADDIU	V0, R0, 0 % return false
	.End
	JR		RA
	NOP
}

% How does the game know to refresh the badges?
% A bunch of maps set Flag_Rowf_Badges_Chosen to false in their Main script.
% Some examples: mim_10, flo_00, hos_00, kmr_10, etc.
	
% Modified to support more badges and work with the more detailed table.
@ $Function_802400C8
{
	ADDIU	SP, SP, -80
	SW		RA, 3C (SP)
	SW		S8, 38 (SP)
	SW		S7, 34 (SP)
	SW		S6, 30 (SP)
	SW		S5, 2C (SP)
	SW		S4, 28 (SP)
	SW		S3, 24 (SP)
	SW		S2, 20 (SP)
	SW		S1, 1C (SP)
	SW		S0, 18 (SP)
	% save story progress to S5
	LIO		A1, *StoryProgress
	JAL		~Func:get_variable
	DADDU	S8, A0, R0
	DADDU	S5, V0, R0
	% allocate memory
	JAL		8002ACE4	% allocate 0x30 bytes for shop inventory
	ADDIU	A0, R0, 30
	DADDU	S7, V0, R0
	SW		R0, 0 (V0)
	SW		R0, 4 (V0)
	SW		R0, 8 (V0)
	SW		R0, 0 (S7)
	SW		R0, C (S7)
	SW		R0, 18 (S7)
	SW		R0, 24 (S7)
	% check whether we should refresh shop inventory
	LIO		A1, *Flag_Rowf_Badges_Chosen
	JAL		~Func:get_variable
	DADDU	A0, S8, R0
	BNE		V0, R0, .LoadBadges
	DADDU	A0, S8, R0
	% loop0: for each badge in Rowf's stock, copy the index
	% of available badges to a temporary array on the stack
	DADDU	S1, R0, R0 % badge table counter (0 to NumRowfBadges-1)
	ADDIU	S2, SP, 50 % index array position
	DADDU	S3, R0, R0 % saved badge count
	DADDU	A0, R0, R0
	.Loop0
	LIA		S6, $RowfBadgeInventory
	SLL		S0, S1, 4
	DADDU	S0, S0, S6 % get ith entry in badge data table
	% check required story progress
	LW		V0, 0 (S0)
	SLT		S4, S5, V0
	BNEL	S4, R0, .EndLoop0
	ADDIU	S1, S1, 1
	% check if player has the badge
	JAL		$Function_HasBadge
	LW		A0, 4 (S0)
	BNEL	V0, R0, .EndLoop0
	ADDIU	S1, S1, 1
	% save index to array
	SB		S1, 0 (S2)
	ADDIU	S2, S2, 1
	ADDIU	S3, S3, 1
	ADDIU	S1, S1, 1
	.EndLoop0
	SLTIU	V0, S1, .NumRowfBadges
	BNE		V0, R0, .Loop0
	% did we find any?
	DADDU	A0, R0, R0
	BEQ		S3, R0, .Done1
	DADDU	S5, R0, R0
	% randomly choose 3 badges for the shop
	ADDIU	S4, SP, 50
	ADDIU	S2, S3, FFFF
	DADDU	S0, S7, R0
	.Loop1
	% get random badge index (0 to num-1)
	JAL		~Func:rand_int
	DADDU	A0, S2, R0
	DADDU	S1, V0, R0
	ADDU	V0, S4, V0
	LBU		A2, 0 (V0)
	% get badge from table (entry size increased: C -> 10 bytes)
	LIA		A3, $RowfBadgeInventory
	SLL		V1, A2, 4
	ADDU	V1, V1, A3
	% copy selected badge to inventory
	LW		V0, 4 (V1)
	SW		V0, 0 (S0)
	LW		V0, 8 (V1)
	SW		V0, 4 (S0)
	LW		V0, C (V1)
	SW		V0, 8 (S0)
	% save index to (Byte_Rowf_Badge0 + i)
	LIO		A1, *Byte_Rowf_Badge0
	ADDU	A1, S5, A1
	JAL		~Func:set_variable
	DADDU	A0, S8, R0
  	ADDIU	S5, S5, 1
	SLTI	V0, S5, 3
	BEQ		V0, R0, .Done1
	ADDIU	S0, S0, C
	% if chosen index < max, remove it from the table
	SLT		V0, S1, S2
	BEQ		V0, R0, .EndLoop1
	DADDU	V1, S1, R0
	.ShiftTable
	ADDIU	V0, S1, 1
	DADDU	S1, V0, R0
	ADDU	V0, S4, V0
	LBU		V0, 0 (V0)
	ADDU	V1, S4, V1
	SB		V0, 0 (V1)
	SLT		V0, S1, S2
	BNE		V0, R0, .ShiftTable
	DADDU	V1, S1, R0
	.EndLoop1
	ADDIU	S3, S3, FFFF
	BNE		S3, R0, .Loop1
	ADDIU	S2, S2, FFFF
	.Done1
	DADDU	A0, S8, R0
	LIO		A1, *Byte_Rowf_Num_Badges
	JAL		~Func:set_variable
	DADDU	A2, S5, R0
	DADDU	A0, S8, R0
	LIO		A1, *Flag_Rowf_Badges_Chosen
	JAL		~Func:set_variable
	ADDIU	A2, R0, 1
	% Return with Var[3] == 0
	BEQ		R0, R0, .Return
	SW		R0, 90 (S8)
	%
	.LoadBadges
	LIO		A1, *Byte_Rowf_Num_Badges
	JAL		~Func:get_variable
	RESERVED
	DADDU	S5, V0, R0
	BLEZ	S5, .Return1
	DADDU	S1, R0, R0
	LIO		S3, *Byte_Rowf_Badge0
	LIA		S6, $RowfBadgeInventory
	DADDU	S0, S7, R0
	.Loop3
	% Load the previously chosen badges to the inventory.
	% Very similar to the code in Loop1
	DADDU	A0, S8, R0
	JAL		~Func:get_variable
	ADDU	A1, S1, S3
	DADDU	A2, V0, R0
	% get badge from table (entry size increased: C -> 10 bytes)
	SLL		V1, A2, 4
	ADDU	V1, V1, S6
	% copy selected badge to inventory
	LW		V0, 4 (V1)
	SW		V0, 0 (S0)
	LW		V0, 8 (V1)
	SW		V0, 4 (S0)
	LW		V0, C (V1)
	SW		V0, 8 (S0)
	ADDIU	S1, S1, 1
	SLT		V0, S1, S5
	BNE		V0, R0, .Loop3
	ADDIU	S0, S0, C
	.Return1
	ADDIU	V0, R0, 1
	SW		V0, 90 (S8) % var[3] = 1
	.Return
	SW		S5, 84 (S8) % var[0] = num badges
	SW		S7, 8C (S8) % var[2] = inventory ptr
	LW		RA, 3C (SP)
	LW		S8, 38 (SP)
	LW		S7, 34 (SP)
	LW		S6, 30 (SP)
	LW		S5, 2C (SP)
	LW		S4, 28 (SP)
	LW		S3, 24 (SP)
	LW		S2, 20 (SP)
	LW		S1, 1C (SP)
	LW		S0, 18 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 80
}
	
% this function returns the number of badges remaining on *Var[0]
% all references to the 'bought' flags are removed
@ $Function_80244984
{
	PUSH	RA, S0, S1, S2, S3
	DADDU	S3, A0, R0
	LIA		S0, $RowfBadgeInventory
	DADDU	S1, R0, R0
	DADDU	S2, R0, R0
	.CheckBadgesLoop
	JAL		$Function_HasBadge
	LW		A0, 4 (S0)
	XORI	V0, V0, 1
	DADDU	S1, S1, V0
	ADDIU	S2, S2, 1
	SLTIU	V0, S2, .NumRowfBadges
	BNE		V0, R0, .CheckBadgesLoop
	ADDIU	S0, S0, 10
	SW		S1, 84 (S3)
	POP		RA, S0, S1, S2, S3
	JR		RA
	ADDIU	V0, R0, 2
}

% Story progress checks are now part of Function_802400C8, do not set flags here.
@ $Script_80248070
{
		% -- Removed --
  1C0:  Call     $Function_802400C8 ( )
%  1CC:  Set      *MapVar[2] *Var[1] 
  1DC:  If       *Var[3] ==  00000000 
  1EC:     Set      *Flag_Rowf_Has_Badge0 00000000 
  1FC:     Set      *Flag_Rowf_Has_Badge1 00000000 
  20C:     Set      *Flag_Rowf_Has_Badge2 00000000 
  21C:     If       *Var[0]  <  00000003 
  22C:        Set      *Flag_Rowf_Has_Badge2 00000001 
  23C:     EndIf
  244:     If       *Var[0]  <  00000002 
  254:        Set      *Flag_Rowf_Has_Badge1 00000001 
  264:     EndIf
  26C:     If       *Var[0]  <  00000001 
  27C:        Set      *Flag_Rowf_Has_Badge0 00000001 
  28C:     EndIf
  294:  EndIf
  29C:  Call     MakeShop    	( $RowfItemPositions *Var[2] $RowfDummyPriceList 00000000 )
  2B8:  Call     MakeShopOwner 	( $ShopOwnerRowf )
  2C8:  If       *Var[3] ==  00000001 
  2D8:     If       *Var[0] >=  00000003 
  2E8:        If       *Flag_Rowf_Has_Badge2 ==  00000001 
  2F8:           Call     $Function_80240044 ( 00000002 )
  308:        EndIf
  310:     EndIf
  318:     If       *Var[0] >=  00000002 
  328:        If       *Flag_Rowf_Has_Badge1 ==  00000001 
  338:           Call     $Function_80240044 ( 00000001 )
  348:        EndIf
  350:     EndIf
  358:     If       *Var[0] >=  00000001 
  368:        If       *Flag_Rowf_Has_Badge0 ==  00000001 
  378:           Call     $Function_80240044 ( 00000000 )
  388:        EndIf
  390:     EndIf
  398:  EndIf
  3A0:  Return
  3A8:  End
}
  
% this is where the 'bought' flag is usually set,
% so the function has been modified to skip that.
@ $Function_80240044
{
	PUSH	RA
	LW		V0, C (A0)
	JAL		~Func:get_variable
	LW		A1, 0 (V0)
	LAW		V1, 8007419C
	ADDIU	A1, R0, 40
	LW		A0, 140 (V1)
	SLL		V1, V0, 4
	ADDU	V1, V1, A0
	JAL		80134148
	LW		A0, 0 (V1)
	POP		RA
	JR		RA
	ADDIU	V0, R0, 2
}

% ====================================================
% Chuck Quizmo will continue asking questions so long
% as another is available.
%
% The existing script is modified by adding two labels
% for flow control and new code to check for the next
% question after the player recieves a star piece.
% ====================================================

@ $Script_8024A370
{
    0:  If  *CompletedQuizzes  >  0000003F 
   10:  	Set  *Var[0]  00000000 
   20:  	Return
   28:  EndIf
   30:  Call     GetPlayerPos 	( *Array[1] *Array[2] *Array[3] )
   48:  Call     NpcFacePlayer 	( .Npc:Self 00000010 )
   5C:  If  *CompletedQuizzes  ==  0000003F 
   6C:  	Call     SpeakToPlayer 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000A ) % Kaaaa-wiiiizzz! It's everyone's favorite quizmaste ...
   8C:  Else
   94:  	If  *Flag_Met_ChuckQuizmo  ==  00000001 
   A4:  		Call     SpeakToPlayer 	( .Npc:Self 00AF0004 00AF0001 00000000 00080009 ) % Kaaaa-wiiiizzz! It's everyone's favorite quizmaste ...
   C4:  	Else
   CC:  		Call     SpeakToPlayer 	( .Npc:Self 00AF0004 00AF0001 00000000 00080008 ) % Kaaaa-wiiiizzz! Chuck Quizmo's the name, and quizz ...
   EC:  		Set  *Flag_Met_ChuckQuizmo  00000001 
   FC:  	EndIf
  104:  EndIf
  10C:  Call     ShowChoice  	( 001E000D ) % Yes No 
  11C:  If  *Var[0]  ==  00000001 
  12C:  	Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000C ) % Uh, oh. Not up to it, huh? Maybe another time! Wel ...
  14C:  	ExecWait $Script_80248D24 
  158:  	Set  *Var[0]  00000000 
  168:  	Return
  170:  EndIf
  178:  Set  *Flag_Taking_Quiz  00000001 
  188:  Call     $Function_80242028 ( )
  194:  Call     $Function_8024233C ( )
  1A0:  Exec     $Script_80248DD4 
  1AC:  Call     DisablePartnerAI 	( 00000000 )
  1BC:  Call     SetNpcFlagBits ( .Npc:Partner 00000200 .False )
  1D4:  Call     SetNpcFlagBits ( 00000005 00000200 .False )
  1EC:  Call     SetNpcFlagBits ( .Npc:Partner 00000148 .True )
  204:  Call     SetNpcFlagBits ( 00000005 00000100 .True )
  21C:  Call     SetNpcAnimation 	( .Npc:Partner 00000106 )
  230:  Exec     $Script_802494FC *Var[1] 
  240:  Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000B ) % Then let's go to the question!
  260:  Call     PlaySound   	( 00000089 )
  270:  Loop     
  27C:  	DoesScriptExist *Var[1] *Var[0] 
  28C:  	If  *Var[0]  ==  00000000 
  29C:  		BreakLoop
  2A4:  	EndIf
  2AC:  	Wait     00000001 
  2B8:  EndLoop
  2C0:  Call     $Function_80242680 ( )
  2CC:  Loop     00000005 
  2D8:  	Call     GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
  2F0:  	Add  *Var[1]  00000001 
  300:  	Call     SetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
  318:  	Wait     00000002 
  324:  EndLoop
    	Label	0	% new label for multiple questions
  32C:  Set  *Var[0]  002C0000 
  33C:  Add  *Var[0]  *CompletedQuizzes 
  34C:  Call     SpeakToPlayer 	( .Npc:Self 00AF0005 00AF0006 00000000 *Var[0] ) % variable string ID
  36C:  Call     SetPlayerAnimation 	( 00010028 )
  37C:  Set  *Var[0]  002D0000 
  38C:  Add  *Var[0]  *CompletedQuizzes 
  39C:  Call     PlaySound   	( 0000008E )
  3AC:  Call     ShowChoice  	( *Var[0] ) % variable string ID
  3BC:  Kill     *Var[1] 
  3C8:  Call     StopSound ( 0000008E )
  3D8:  Exec     $Script_80249570 
  3E4:  Wait     0000000F 
  3F0:  Call     PlaySound   	( 0000008D )
  400:  Call     $Function_80242980 ( *Var[0] )
  410:  Set  *Array[4]  00000000 
%  420:  Call     $Function_80242F74 ( ) %-- draw O/X ...but leaks memory if we loop, will crash after too many questions
  42C:  Wait     00000028 
  438:  Call     $Function_802425FC ( )
  444:  Thread
  44C:  	Wait     0000006E 
  458:  	Call     CloseChoice ( )
  464:  	Set  *Array[4]  00000000 
  474:  EndThread
  47C:  If  *Var[0]  ==  00000001 
  48C:  	Call     SetNpcAnimation 	( 00000005 00AF0007 )
  4A0:  	Set  *Array[4]  00000001 
  4B0:  	Thread
  4B8:  		Call     $Function_8024294C ( 00000001 )
  4C8:  		Wait     00000006 
  4D4:  		Wait     00000006 
  4E0:  		Wait     00000006 
  4EC:  		Call     $Function_8024294C ( 00000002 )
  4FC:  	EndThread
  504:  	Thread
  50C:  		Call     PlaySound   	( 0000021C )
  51C:  		Wait     00000006 
  528:  		Call     PlaySound   	( 0000021C )
  538:  		Wait     00000006 
  544:  		Call     PlaySound   	( 0000021C )
  554:  		Wait     00000006 
  560:  		Call     PlaySound   	( 0000021C )
  570:  	EndThread
  578:  	Call     PlaySound   	( 0000008A )
  588:  	Call     $Function_80242A18 ( )
  594:  	Thread
  59C:  		Wait     0000000F 
  5A8:  		Call     GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
  5C0:  		Add  *Var[1]  00000032 
  5D0:  		Call     $Function_80242B90 ( 00000000 00000000 00000053 *Var[0] *Var[2] )
  5F0:  		Call     PlayEffect  	( ~FX:Steam:Ring *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  634:  		Call     PlayEffect  	( 00000044 00000004 *Var[0] *Var[1] *Var[2] 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  678:  		Wait     0000000F 
  684:  		Add  *Var[1]  FFFFFFFD 
  694:  		Call     $Function_80242B90 ( 00000000 00000000 0000003A *Var[0] *Var[2] )
  6B4:  		Call     PlayEffect  	( ~FX:Steam:Ring *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  6F8:  		Call     PlayEffect  	( 00000044 00000004 *Var[0] *Var[1] *Var[2] 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  73C:  		Wait     0000000F 
  748:  		Add  *Var[1]  0000001E 
  758:  		Call     $Function_80242B90 ( 00000000 00000000 0000005D *Var[0] *Var[2] )
  778:  		Call     PlayEffect  	( ~FX:Steam:Ring *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  7BC:  		Call     PlayEffect  	( 00000044 00000004 *Var[0] *Var[1] *Var[2] 00000001 0000003C 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  800:  		Wait     0000000F 
  80C:  	EndThread
  814:  	Wait     00000014 
  820:  	Exec     $Script_8024A210 *Var[1] 
  830:  	Add  *CompletedQuizzes  00000001 
  840:  	If  *CompletedQuizzes  >  0000003F 
  850:  		Call     ContinueSpeech 	( .Npc:Self FFFFFFFF FFFFFFFF 00000000 00080010 ) % Correct!! Congratulations! This is my last prize!  ...
  870:  		Call     SetNpcAnimation 	( 00000005 00AF0006 )
  884:  		Loop     
  890:  			DoesScriptExist *Var[1] *Var[0] 
  8A0:  			If  *Var[0]  ==  00000000 
  8B0:  				BreakLoop
  8B8:  			EndIf
  8C0:  			Wait     00000001 
  8CC:  		EndLoop
  8D4:  		Call     SetNpcAnimation 	( 00000005 00AF0005 )
  8E8:  		Set  *Var[0]  0000015C 
  8F8:  		Set  *Var[1]  00000003 
  908:  		ExecWait $Script_80248C34 
  914:  		Call     AddStarPieces 	( 00000001 )
  924:  		Call     $Function_8024294C ( 0000000F )
  934:  		Call     $Function_80242A00 ( )
  940:  		Call     SetMessageValue 	( *CompletedQuizzes 00000000 )
  954:  		Call     SpeakToPlayer 	( .Npc:Self 00AF0004 00AF0001 00000000 00080011 ) % You've managed to correctly answer all  questions. ...
  974:  	Else
  97C:  		Call     ContinueSpeech 	( .Npc:Self FFFFFFFF FFFFFFFF 00000000 0008000E ) % Correct! Congratulations! Here's your Star Piece!
  99C:  		Call     SetNpcAnimation 	( 00000005 00AF0006 )
  9B0:  		Loop     
  9BC:  			DoesScriptExist *Var[1] *Var[0] 
  9CC:  			If  *Var[0]  ==  00000000 
  9DC:  				BreakLoop
  9E4:  			EndIf
  9EC:  			Wait     00000001 
  9F8:  		EndLoop
  A00:  		Call     SetNpcAnimation 	( 00000005 00AF0005 )
  A14:  		Set  *Var[0]  0000015C 
  A24:  		Set  *Var[1]  00000001 
  A34:  		ExecWait $Script_80248C34 
  A40:  		Call     AddStarPieces 	( 00000001 )
  A50:  		Call     $Function_8024294C ( 0000000F )
  A60:  		Call     $Function_80242A00 ( )
  A6C:  		Call     SetMessageValue 	( *CompletedQuizzes 00000000 )
  A80:  		If  *CompletedQuizzes  ==  00000001 
  A90:  			Call     SetMessageString 	( 8014C294 00000001 )
  AA4:  		Else
  AAC:  			Call     SetMessageString 	( 8014C290 00000001 )
  AC0:  		EndIf
  AC8:  		Call     SpeakToPlayer 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000F ) % You've correctly answered  question so far. Good l ...
			% ====================================================
			% new: multiple quizzes can be completed at a time
				Wait	10`
				Call	$Function_IsNextQuestionAvailable ( )
				If  *Var[0]  ==  00000000 
					Call     SpeakToPlayer	( .Npc:Self 00AF0004 00AF0001 00000000 0008004A ) % Looks like that's it for now ...
					Set      *Var[0] 00000001 
					Goto	1
				EndIf
				Call     SpeakToPlayer		( .Npc:Self 00AF0004 00AF0001 00000000 00080049 ) % But we're not done yet ...
				Call     ShowChoice			( 001E000D ) % Yes No 
				If	*Var[0] ==  00000001 
					Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000C ) % Uh, oh. Not up to it, huh? Maybe another time! Wel ...
					Set      *Var[0] 00000001 
					Goto	1
				EndIf
				Call     ContinueSpeech 	( .Npc:Self 00AF0004 00AF0001 00000000 0008000B ) % Then let's go to the question!
				Thread
					Call     $Function_80242B90 ( *Array[1] *Array[3] 0000006C *Var[0] *Var[1] )
					SetF     *Var[2] *Array[1] 
					AddF     *Var[2] *Var[0] 
					SetF     *Var[3] *Array[3] 
					AddF     *Var[3] *Var[1] 
					Call     SetNpcAnimation 	( .Npc:Partner 00000102 )
					Call     NpcMoveTo   		( .Npc:Partner *Var[2] *Var[3] 00000028 )
					Call     SetNpcAnimation 	( .Npc:Partner 00000106 )
					Call     NpcFacePlayer 		( .Npc:Partner 00000000 )
				EndThread
				Call     $Function_80242B90 ( *Array[1] *Array[3] 00000053 *Var[0] *Var[1] )
				SetF     *Var[3] *Var[0] 
				SetF     *Var[4] *Var[1] 
				AddF     *Var[3] *Array[1]
				AddF     *Var[4] *Array[3]
				Call     PlayerMoveTo 	( *Var[3] *Var[4] 40` )
				Loop     00000005 
					Call     GetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
					Add      *Var[1] 00000001 
					Call     SetPlayerPos 	( *Var[0] *Var[1] *Var[2] )
					Wait     00000002 
				EndLoop
				Goto	0
		%/new
		% ====================================================
  AE8:  	EndIf
  AF0:  	Set  *Var[0]  00000001 
  B00:  Else
  B08:  	Call     SetNpcAnimation 	( 00000005 00AF0009 )
  B1C:  	Set  *Array[4]  00000002 
  B2C:  	Call     PlaySound   	( 0000021D )
  B3C:  	Call     PlaySound   	( 0000008B )
  B4C:  	Exec     $Script_8024A2C0 *Var[1] 
  B5C:  	Call     GetPlayerPos 	( *Var[2] *Var[3] *Var[4] )
  B74:  	Call     PlayEffect  	( 0000002B 00000000 *Var[2] *Var[3] *Var[4] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  BB8:  	Call     ContinueSpeech 	( .Npc:Self FFFFFFFF FFFFFFFF 00000000 0008000D ) % Oops! Tough luck, pal! Wrong answer! Better luck n ...
  BD8:  	Call     SetNpcAnimation 	( 00000005 00AF000A )
  BEC:  	Loop     
  BF8:  		DoesScriptExist *Var[1] *Var[0] 
  C08:  		If  *Var[0]  ==  00000000 
  C18:  			BreakLoop
  C20:  		EndIf
  C28:  		Wait     00000001 
  C34:  	EndLoop
  C3C:  	Set  *Var[0]  00000000 
  C4C:  EndIf
      	Label	1	% new label for multiple questions
  C54:  Call     $Function_80242980 ( FFFFFFFF )
  C64:  Call     EnablePartnerAI 	( )
  C70:  Thread
  C78:  	Wait     0000001E 
  C84:  	Call     PlaySound   	( 0000008F )
  C94:  EndThread
  C9C:  Thread
  CA4:  	Wait     0000002D 
  CB0:  	Call     StopSound ( 00000089 )
  CC0:  EndThread
  CC8:  Call     $Function_80242A34 ( )
  CD4:  Call     $Function_80242898 ( )
  CE0:  ExecWait $Script_80248D24 
  CEC:  Exec     $Script_8024906C 
  CF8:  Call     $Function_80242488 ( )
  D04:  Call     $Function_8024203C ( )
  D10:  Set  *Flag_Taking_Quiz  00000000 
  D20:  Return
  D28:  End
}

% Since we never loaded the O/X icon, don't try to free it.
@ $Function_80242898 { [9C]
	NOP
}
  
#new:Function $Function_IsNextQuestionAvailable
{
	PUSH	RA, S0, S1
	DADDU	S1, A0, R0
	DADDU	A0, R0, R0
	LIO		A1, *CompletedQuizzes
	JAL		~Func:get_variable
	RESERVED
	DADDU	A0, R0, R0
	DADDU	S0, V0, R0
	LIO		A1, *StoryProgress
	JAL		~Func:get_variable
	RESERVED
	DADDU	A1, V0, R0
	LIA		A0, $QuizRequirements
    .FindStoryProgress
	LW		V0, 0 (A0)
	SLT		V0, A1, V0
	BNE		V0, R0, .CompareQuizIndex
	NOP
	BEQ		R0, R0, .FindStoryProgress
	ADDIU	A0, A0, 8
	.CompareQuizIndex
	LW		V0, 4 (A0)
	SLT		V0, S0, V0
	SW		V0, 84 (S1)
	.Done
	POP		RA, S0, S1
	JR		RA
	ADDIU	V0, R0, 2
}

@ $QuizRequirements
{
% if (story progress) < (col 1), the player can complete up to (col 2) quizzes
FFFFFF94 00000000 % < chapter 1 start
FFFFFFB4 00000006 % < chapter 2 start
FFFFFFCA 0000000C % < chapter 3 start
FFFFFFF2 00000012 % < chapter 4 start
00000006 0000001A % < chapter 5 start
00000027 00000022 % < chapter 6 start
0000003A 0000002A % < chapter 7 start
00000058 00000034 % < chapter 8 start
0000005F 0000003E % end game
00000060 00000040 % all
}

@ $QuizAnswers
{
01010200 01000200 01020001 01020200 
02010202 01000201 00010201 00020100 
02000102 00000001 00020002 02010001
02020102 02010102 00020102 01000201
}
