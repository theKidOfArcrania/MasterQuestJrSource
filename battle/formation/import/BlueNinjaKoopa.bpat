
#new:Actor $WNinjaKoopa
{
% stats
[Index]        EEb 
[Level]         7`b 
[MaxHP]         4`b 
[Coins]         1`b 
[Flags]       00000000 
[StatusTable] $StatusTable_Green
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_Green 
[Script]      $Script_Init_Green
% move effectiveness
[Escape]        40`b 
[Item]          60`b 
[AirLift]       90`b 
[Hurricane]     90`b % Bow's "Spook" as well
[UpAndAway]     90`b 
[PowerBounce]  80`b 
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         38`b  42`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]   10`b  20`b % dx dy
}

#new:PartsTable $PartsTable_Green
{
00800000 01000000 FB2400FF $IdleAnimations_Green $DefenseTable_Normal 00001000 00000000 00000000 00000000 
}

#new:IdleAnimations $IdleAnimations_Green
{
.Status:Normal    00660C04
.Status:Stone     00660C00
.Status:Sleep     00660C15
.Status:Poison    00660C00
.Status:Stop      00660C00
.Status:Static    00660C00
.Status:Paralyze  00660C00
.Status:Paralyze  00660C00
.Status:Dizzy     00660C18
.Status:Dizzy     00660C18
.Status:End
}

#new:IdleAnimations $IdleAnimations_Green_Flipped
{
.Status:Normal    00660C0C
.Status:Stone     00660C17
.Status:Sleep     00660C17
.Status:Poison    00660C17
.Status:Stop      00660C17
.Status:Static    00660C17
.Status:Paralyze  00660C17
.Status:Paralyze  00660C17
.Status:Dizzy     00660C22
.Status:Dizzy     00660C22
.Status:End
}

#new:Script $Script_Init_Green
{
	Call	BindTakeTurn	( .Actor:Self $Script_TakeTurn_Green )
	Call	BindHandleEvent	( .Actor:Self $Script_HandleEvent_Green )
	Call	SetActorVar		( .Actor:Self 00000001 00000000 )
	Call	SetActorVar		( .Actor:Self 00000002 00000000 )
	Return
	End
}

#new:Script $Script_HandleEvent_Green
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self .False )
	Call     SetActorYaw 	( .Actor:Self 00000000 )
	Call     GetLastEvent 	( .Actor:Self *Var[0] )
	Switch   *Var[0] 
		CaseOR   ==  .Event:HitCombo
		CaseOR   ==  .Event:Hit
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait DoNormalHit 
		EndCaseGroup
		Case     ==  .Event:BurnHit
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0E 
			SetConst *Var[2] 00660C0F 
			ExecWait DoBurnHit 
		Case     ==  .Event:BurnDeath
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0E 
			SetConst *Var[2] 00660C0F 
			ExecWait DoBurnHit 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0F 
			ExecWait DoDeath 
			Return
		Case     ==  .Event:SpinSmashHit
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait 8029B998 
		Case     ==  .Event:SpinSmashDeath
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait 8029B998 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait DoDeath 
			Return
		Case     ==  .Event:FlipTrigger
			Call     SetActorVar 	( .Actor:Self 00000001 00000001 )
			Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Green_Flipped )
			Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_Flipped )
			Call     SetTargetOffset 	( .Actor:Self 00000001 00000000 00000012 )
			Call     SetAnimation 	( .Actor:Self 00000001 00660C0B )
			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
			ChildThread
				Wait     00000004 
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000001E )
				Wait     00000001 
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
				Wait     00000001 
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFE2 )
				Wait     00000001 
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFC4 )
				Wait     00000001 
				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 FFFFFFB5 )
				Wait     00000001 
			EndChildThread
			UseIntBuffer $IntTable_8022DD30 
			Loop     00000016 
				Get1Int  *Var[0] 
				Call     SetActorDispOffset ( FFFFFF81 00000000 *Var[0] 00000000 )
				Wait     00000001 
			EndLoop
			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
		Case     ==  .Event:ShockHit
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait DoShockHit 
		Case     ==  .Event:ShockDeath
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait DoShockHit 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait DoDeath 
			Return
		CaseOR   ==  00000017
		CaseOR   ==  .Event:Immune
			Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
			If       *Var[0] ==  00000000 
				SetConst *Var[0] 00000001 
				SetConst *Var[1] 00660C08 
				ExecWait DoImmune 
				Call     GetStatusFlags ( .Actor:Self *Var[0] )
				If       *Var[0] ==  00000000 
					Call     SetAnimation 	( .Actor:Self 00000001 00660C09 )
					Wait     0000000A 
				EndIf
			Else
				SetConst *Var[0] 00000001 
				SetConst *Var[1] 00660C0C 
				ExecWait DoImmune 
			EndIf
		EndCaseGroup
		Case     ==  .Event:Death
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait DoNormalHit 
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C0B 
			ExecWait DoDeath 
			Return
		Case     ==  .Event:RecoverStatus
			Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
			If       *Var[0] ==  00000000 
				SetConst *Var[0] 00000001 
				SetConst *Var[1] 00660C04 
				ExecWait DoRecover 
			EndIf
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self .True )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_GetUp_Green
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self .False )
	Call     AddActorDecoration ( .Actor:Self 00000001 00000000 .Decoration:Sweat )
	Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[3.0] )
	Wait     00000014 
	Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
	Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
	Call     SetActorSounds 			( FFFFFF81 00000002 00000000 00000000 )
	Call     PlaySoundAtActor 	( .Actor:Self .Sound:Jump )
	Call     SetAnimation 		( .Actor:Self 00000001 00660C22 )
	Set      *Var[0] 00000000 
	Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000C 00000000 )
	ChildThread
		Loop     00000005 
		   Add      *Var[0] 0000000F 
		   Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
		   Wait     00000001 
		EndLoop
	EndChildThread
	Call     GetActorPos 		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetGoalPos 		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
	Call     JumpToGoal  		( .Actor:Self 00000008 00000000 00000001 00000000 )
	Call     PlaySoundAtActor 	( .Actor:Self 000020BA )
	Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
	Call     SetActorDispOffset 			( FFFFFF81 00000000 00000000 00000000 )
	Call     SetAnimation 		( .Actor:Self 00000001 00660C04 )
	Call     SetActorVar 		( .Actor:Self 00000001 00000000 )
	Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Green )
	Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_Normal )
	Call     SetTargetOffset 	( .Actor:Self 00000001 FFFFFFFC 00000020 )
	Call     8027D4C8 			( FFFFFF81 00000001 FFFFFFFF FFFFFFFC )
	Call     SetActorFlagBits 	( .Actor:Self 00000400 .False )
	Call     ResetActorSounds 			( FFFFFF81 00000002 )
	Call     EnableIdleScript 	( .Actor:Self .True )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_ShellShot_Green
{
	Call     UseIdleAnimation 	( .Actor:Self .False )
	Call     EnableIdleScript 	( .Actor:Self .False )
	Call     SetTargetActor ( .Actor:Self .Actor:Player )
	Call     UseBattleCamPreset 	( 0000003F )
	Call     BattleCamTargetActor ( .Actor:Self )
	Wait     0000000A 
	Call     SetAnimation 	( .Actor:Self 00000001 00660C08 )
	Wait     0000000A 
	ChildThread
		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Add      *Var[1] 00000004 
		Call     PlayEffect  	( 0000001D 00000001 *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
		Wait     00000003 
		Call     PlayEffect  	( 0000001D 00000001 *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
		Wait     00000002 
		Call     PlayEffect  	( 0000001D 00000001 *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
	EndChildThread
	Call     PlaySoundAtActor 	( .Actor:Self 00002021 )
	Call     SetAnimation 	( .Actor:Self 00000001 00660C07 )
	Wait     0000000A 
	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
	Call     PlaySoundAtActor 	( .Actor:Self 000020D3 )
	Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
	Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
	Switch   *Var[0] 
		CaseOR   ==  00000006 
		CaseOR   ==  00000005 
			Set      *Var[A] *Var[0] 
			Call     SetGoalToTarget 	( .Actor:Self )
			Call     AddGoalPos 	( .Actor:Self FFFFFFD8 00000000 00000000 )
			Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
			Call     RunToGoal   	( .Actor:Self 00000000 .False )
			Call     GetBattlePhase ( *Var[0] )
			If       *Var[0] ==  .Phase:FirstStrike
				Call     UseBattleCamPreset 	( 00000005 )
				Call     SetBattleCamZoom  	( 0000012C )
				Call     SetBattleCamOffsetZ 	( 00000014 )
				Call     MoveBattleCamOver 	( 0000000A )
				Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
			EndIf
			Call     SetAnimation 	( .Actor:Self 00000001 00660C09 )
			Wait     00000008 
			Call     ResetAllActorSounds ( FFFFFF81 )
			Call     SetActorYaw 	( .Actor:Self 000000B4 )
			Wait     00000004 
			If       *Var[A] ==  00000005 
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
			EndIf
			Call     SetAnimation 	( .Actor:Self 00000001 00660C1E )
			Wait     00000001 
			Call     SetAnimation 	( .Actor:Self 00000001 00660C1E )
			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Add      *Var[1] 00000014 
			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
			Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
			Call     SetAnimation 	( .Actor:Self 00000001 00660C03 )
			Wait     00000006 
			Sub      *Var[1] 00000014 
			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
			Call     UseBattleCamPreset 	( 00000002 )
			Call     YieldTurn ( )
			Call     SetActorYaw 	( .Actor:Self 000000B4 )
			Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
			Call     SetAnimation 	( .Actor:Self 00000001 00660C03 )
			Call     SetGoalToHome 	( .Actor:Self )
			Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
			Call     RunToGoal   	( .Actor:Self 00000000 .False )
			Call     SetAnimation 	( .Actor:Self 00000001 00660C04 )
			Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
			Call     SetPartYaw ( FFFFFF81 00000001 00000000 )
			Call     SetActorYaw 	( .Actor:Self 00000000 )
			Call     EnableIdleScript 	( .Actor:Self 00000001 )
			Call     UseIdleAnimation 	( .Actor:Self .True )
			Return
		EndCaseGroup
	EndSwitch
	Call     SetGoalToTarget 	( .Actor:Self )
	Call     SetActorSpeed 	( .Actor:Self *Fixed[16.0] )
	Call     RunToGoal   	( .Actor:Self 00000000 .False )
	Call     ResetAllActorSounds ( FFFFFF81 )
	Wait     00000002 
	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 )
	Switch   *Var[0] 
		CaseOR   ==  00000000 
		CaseOR   ==  00000002 
			Call     UseBattleCamPreset 	( 00000002 )
			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Add      *Var[0] 00000028 
			Set      *Var[1] 00000000 
			Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
			Add      *Var[0] 0000001E 
			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
			Add      *Var[0] 00000014 
			Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
			Call     SetAnimation 	( .Actor:Self 00000001 00660C09 )
			Wait     00000008 
			Call     YieldTurn ( )
			SetConst *Var[0] 00000001 
			SetConst *Var[1] 00660C03 
			ExecWait DoReturnHome 
			Call     SetAnimation 	( .Actor:Self 00000001 00660C04 )
		EndCaseGroup
	EndSwitch
	Call     EnableIdleScript 	( .Actor:Self .True )
	Call     UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_Jump_Green
{
	Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self .False )
	Call	GetActorPos			( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	SetAnimation 		( .Actor:Self 00000001 00660C05 )
	Wait	15
	Call	SetAnimation 		( .Actor:Self 00000001 00660C10 )
	Thread
		Call	PlayEffect  	( 00000006 00000004 *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Call	SetActorRotation	( .Actor:Self 0` 0` -25` )
		Wait	2
		Call	EnableActorBlur		( .Actor:Self .True )
	EndThread
	Call	SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
	Call	PlaySoundAtActor 	( .Actor:Self .Sound:Jump )
	Sub		*Var[0]  10`
	Call	SetIdleGoal 			( .Actor:Self *Var[0] 150` *Var[2] )
	Call	IdleFlyToGoal			( .Actor:Self 10` 0` .Easing:Linear )
	Wait	15
	Call	SetActorRotation	( .Actor:Self 0` 0` 0` )
	Call	SetPartFlagBits 	( .Actor:Self 00000001 00020001 .True )
	Call	SetActorFlagBits 	( .Actor:Self 00040000 .True )
	Call	SetActorVar			( .Actor:Self 00000002 .True )
	Call	EnableIdleScript 	( .Actor:Self .True )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_Land_Green
{
	Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self .False )
	Call	SetPartFlagBits 	( .Actor:Self 00000001 00020001 .False )
	Call	SetActorFlagBits 	( .Actor:Self 00040000 .False )
	Call	SetActorVar			( .Actor:Self 00000002 .False )
	Call	SetTargetActor		( .Actor:Self .Actor:Player )
	Call	SetAnimation 		( .Actor:Self 00000001 00660C12 )
	Call	GetActorPos			( .Actor:Player *Var[0] *Var[1] *Var[2] )
	Add		*Var[0]	 50`
	Add		*Var[2]	  2`
	Call	SetActorPos			( .Actor:Self *Var[0] 150` *Var[2] )
	Call	PlaySoundAtActor 	( .Actor:Self 00000301 )
	Wait	10`
	Call	EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000005 00000020 )
	Switch   *Var[0] 
		CaseOR  ==  00000006 
		CaseOR  ==  00000005 
			If       *Var[0] ==  00000005 
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
			EndIf
			Call	GetActorPos			( .Actor:Player *Var[0] *Var[1] *Var[2] )
			Add		*Var[0]  10`
			Add		*Var[2]  20`
			Call	SetGoalPos		( .Actor:Self *Var[0] 0 *Var[2] )
			Call	FlyToGoal			( .Actor:Self 10` 00000000 00000000 )
			Call	EnableActorBlur 	( .Actor:Self .False )
			Call	PlayEffect  		( 00000006 00000004 *Var[0] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
			Call	SetAnimation 		( .Actor:Self 00000001 00660C0B )
			Sub		*Var[0]  30`
			Call	SetGoalPos		( .Actor:Self *Var[0] 0 *Var[2] )
			Call	SetActorJumpGravity 	( .Actor:Self *Fixed[0.8] )
			Call	JumpToGoal  		( .Actor:Self 16` 00000000 00000001 00000000 )
			Sub		*Var[0]  20`
			Call	SetGoalPos		( .Actor:Self *Var[0] 0 *Var[2] )
			Call	SetActorJumpGravity 	( .Actor:Self *Fixed[0.6] )
			Call	JumpToGoal  		( .Actor:Self 8` 00000000 00000001 00000000 )
			Sub		*Var[0]  10`
			Call	SetGoalPos		( .Actor:Self *Var[0] 0 *Var[2] )
			Call	SetActorJumpGravity 	( .Actor:Self *Fixed[0.4] )
			Call	JumpToGoal  		( .Actor:Self 4` 00000000 00000001 00000000 )
			Wait	15`
			Goto	0
		EndCaseGroup
	EndSwitch
	Call	GetActorPos			( .Actor:Player *Var[0] *Var[1] *Var[2] )
	Add		*Var[0]  10`
	Add		*Var[1]  20`
	Call	SetGoalPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	FlyToGoal			( .Actor:Self 10` 00000000 00000000 )
	Call	EnableActorBlur 	( .Actor:Self .False )
	Thread
		Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[1.0] )
		Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[4.0] )
		Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[3.0] )
		Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[2.0] )
		Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[1.0] )
		Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.5] )
	EndThread
	Call	PlaySoundAtActor 	( .Actor:Self 000003ED )
	Call	PlaySoundAtActor 	( .Actor:Self 000020BB )
	Wait	2
	Call	EnemyDamageTarget		( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000002 00000020 )
	Wait	8
	Thread
		Call	SetActorRotationOffset	( .Actor:Self 00000000 14` 00000000 )
		Set		*Var[0]  0 
		Loop	20` 
			Sub		*Var[0]  18` 
			Call	SetActorRotation	( .Actor:Self 00000000 00000000 *Var[0] )
			Wait	1
		EndLoop
		Call	SetActorRotationOffset	( .Actor:Self 00000000 00000000 00000000 )
	EndThread
	Call	GetActorPos  		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[0]  50`
	Call	SetGoalPos 		( .Actor:Self *Var[0] 0 *Var[2] )
	Call	SetAnimation 		( .Actor:Self 00000001 00660C08 )
	Call	PlaySoundAtActor 	( .Actor:Self .Sound:Jump )
	Call	SetActorJumpGravity 	( .Actor:Self *Fixed[0.8] )
	Call	JumpToGoal  		( .Actor:Self 25` 00000000 00000001 00000000 )
	Call	PlaySoundAtActor 	( .Actor:Self 000003B4 )
	Wait	10`
	Call	SetAnimation 		( .Actor:Self 00000001 00660C09 )
	Wait	8`
	Call	SetAnimation 		( .Actor:Self 00000001 00660C1A )
	Wait	20`
	Label	0
	Call	SetActorRotation	( .Actor:Self 0 180` 0 )
	Call	SetGoalToHome 		( .Actor:Self )
	Call	SetActorSpeed 		( .Actor:Self *Fixed[6.0] )
	Call	SetAnimation 		( .Actor:Self 00000001 00660C03 )
	Call	RunToGoal    		( .Actor:Self 00000000 .False )
	Call	SetActorRotation	( .Actor:Self 0 0 0 )
	Call	EnableIdleScript 	( .Actor:Self .True )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_BoostDefense
{
	Call	UseIdleAnimation 	( .Actor:Self .False )
	Call	EnableIdleScript 	( .Actor:Self 00000000 )
	Set		*Var[8]  *Var[0] 
	Call	SetTargetActor	( .Actor:Self .Actor:Player )
	Call	UseBattleCamPreset	( 0000000E )
	Call	BattleCamTargetActor	( .Actor:Self )
	Call	MoveBattleCamOver		( 0000000F )
	Wait	0000000F 
	Call	SetAnimation	( .Actor:Self 00000001 00660C19 )
	Wait	00000005 
	Call	PlaySoundAtActor	( .Actor:Self 000020D4 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	GetStatusFlags	( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Sub		*Var[0] 00000006 
		Add		*Var[1] 0000000C 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Else
		Sub		*Var[0] 00000010 
		Add		*Var[1] 0000001F 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	EndIf
	Wait	0000001E 
	Call	SetAnimation	( .Actor:Self 00000001 00660C1B )
	Wait	00000005 
	Thread
		Wait	0000000A 
		Call	PlaySoundAtActor	( *Var[8] 000002DD )
	EndThread
	Thread
		Call	8026BF48	( 00000001 )
		Call	BoostDefense	( *Var[8] .DefenseBoostIncrement )
		Call	8026BF48	( 00000000 )
	EndThread
	Call	WaitForBuffDone ( )
	Call	UseBattleCamPreset	( 00000002 )
	Wait	0000000A 
	Call	YieldTurn ( )
	Call	EnableIdleScript	( .Actor:Self 00000001 )
	Call	UseIdleAnimation	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_TakeTurn_Green
{
	% is this actor in the air?
	Call	GetActorVar	( .Actor:Self 00000002 *Var[0] )
	If  *Var[0] ==  .True
		ExecWait $Script_Land_Green
		Return
	EndIf
	% get up if necessary
	Call	GetActorVar	( .Actor:Self 00000001 *Var[0] )
	If  *Var[0] ==  00000001 
		ExecWait $Script_GetUp_Green
	EndIf
	Set  *Var[4]  FFFFFFFF % lowest defense enemy id
	Set  *Var[5]  7FFFFFFF % lowest defense boost
	Set  *Var[6]  FFFFFFFF % any enemy id
	Set  *Var[7]  7FFFFFFF % any enemy defense boost
	Set  *Var[8]  0        % num candidates
	Set  *Var[A]  0        % num tied
	Call	EnemyCreateTargetList	( 00008002 )
	Call	InitTargetIterator	( )
	Label	00000000 
		Call	GetOwnerTarget	( *Var[0] *Var[1] )
		Call	GetActorDefenseBoost	( *Var[0] *Var[1] )
		If  *Var[1]  <  .MaxDefenseBoost
			If  *Var[1] <= *Var[5]
				If *Var[1] < *Var[5]
					Set  *Var[4]  *Var[0]
					Set  *Var[5]  *Var[1]
					Set  *Var[A]  0
				Else
					% random chance to replace min (tie-breaker)
					Call	RandInt	( *Var[A] *Var[B] )
					If	*Var[B] == 0
						Set  *Var[4]  *Var[0]
						Set  *Var[5]  *Var[1]
					EndIf
					Add  *Var[A]  1
				EndIf
			Else
				% random chance to replace any
				Call	RandInt	( *Var[8] *Var[B] )
				If	*Var[B] == 0
					Set  *Var[6]  *Var[0]
					Set  *Var[7]  *Var[1]
				EndIf
			EndIf
			Add  *Var[8]  1
		EndIf
	Call	ChooseNextTarget 	( .Iter:Next *Var[0] )
	If  *Var[0]  !=  FFFFFFFF 
		Goto	00000000 
	EndIf
	If  *Var[4]  !=  FFFFFFFF
		% try casting on preferred enemy
		Call	RandInt	( 100` *Var[0] )
		If  *Var[0]  <  20`
			Set  *Var[0] *Var[4]
			ExecWait $Script_BoostDefense
			Return
		EndIf
		% try casting on random enemy
		If  *Var[6]  !=  FFFFFFFF
			Call	RandInt	( 100` *Var[0] )
			If  *Var[0]  <  30`
				Set  *Var[0] *Var[6]
				ExecWait $Script_BoostDefense
				Return
			EndIf
		EndIf
	EndIf
	Call	RandInt	( 100` *Var[0] )
	If  *Var[0] < 40`
		ExecWait $Script_Jump_Green
	Else
		ExecWait $Script_ShellShot_Green
	EndIf
	Return
	End
}
	
	#new:StatusTable $StatusTable_Green
{
.Status:Normal            0`
.Status:Default          0`
.Status:Sleep            70`
.Status:Poison            0`
.Status:Frozen            0`
.Status:Dizzy            70`
.Status:Fear          0`
.Status:Static            0`
.Status:Paralyze         80`
.Status:Shrink          100`
.Status:Stop             70`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -1`
.Status:End
}


#new:DefenseTable $DefenseTable_Normal
{
.Element:Normal 00000001
.Element:End
}

#new:DefenseTable $DefenseTable_Flipped
{
.Element:Normal 00000000
.Element:End
}

#new:IntTable $IntTable_8022DD30
{
00000009 00000010 00000016 0000001A 0000001E 00000020 00000021 00000020 
0000001E 0000001A 00000016 00000010 00000009 00000000 00000004 00000006 
00000007 00000006 00000004 00000000 00000002 00000000 
}

#define .MaxDefenseBoost 1
#define .DefenseBoostIncrement 1

%THIS GUY GONNA SUMMON MORE?
%NO PROBABLY NOT
/%

#new:Vector3D $Vector3D_80223DEC_22
0` -1000` 0`

#new:SpecialFormation $SpecialFormation_80223DF8_22
$WNinjakoopa $Vector3D_80223DEC_22 00000064 00000000 00000000 00000000 00000000 

#new:Script $Script_SummonBackup_22
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     UseBattleCamPreset 	( 0000000E )
   38:  Call     BattleCamTargetActor ( .Actor:Self )
   48:  Call     MoveBattleCamOver 	( 00000014 )
   58:  Call     PlaySoundAtActor 	( .Actor:Self 000002E5 )
  184:  Call     UseBattleCamPreset 	( 00000002 )
  194:  Call     MoveBattleCamOver 	( 0000000F )
  1A4:  Thread
  1AC:  	Wait     00000008 
  1B8:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1D4:  	Call     PlayEffect  	( {FX:Sparkles:Star} *Var[0] *Var[1] *Var[2] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  218:  	Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
  22C:  EndThread
  234:  Call     SetAnimation 	( .Actor:Self 00000001 00660C03 )
  24C:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  260:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  27C:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  298:  Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  2B8:  Call     SummonEnemy 	( $SpecialFormation_80223DF8_22 00000000 )
  2CC:  Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[3] )
  2E8:  Add  *Var[1]  000000C8 
  2F8:  Call     SetActorPos 	( *Var[0] *Var[1] *Var[2] *Var[3] )
  314:  Call     SetGoalToIndex ( *Var[0] *Var[A] )
  328:  Call     PlaySoundAtActor 	( *Var[0] 000020D3 )
  33C:  Call     SetActorSounds ( *Var[0] 00000000 00000000 00000000 )
  358:  Call     SetAnimation 	( *Var[0] 00000001 00660C04 )
  370:  Call     SetActorSpeed 	( *Var[0] *Fixed[6.0] )
  384:  Call     RunToGoal   	( *Var[0] 00000000 .False )
  39C:  Call     SetAnimation 	( *Var[0] 00000001 00660C04 )
  3B4:  Wait     0000000A 
  3C0:  Call     SetAnimation 	( *Var[0] 00000001 00660C05 )
  3D8:  Call     GetActorPos 	( *Var[0] *Var[1] *Var[2] *Var[3] )
  3F4:  Call     ForceHomePos 	( *Var[0] *Var[1] *Var[2] *Var[3] )
  410:  Call     HPBarToHome 	( *Var[0] )
  420:  Call     GetActorVar 	( .Actor:Self 00000001 *Var[1] )
  438:  Switch  *Var[1] 
  444:  	Case  ==  00000000 
  450:  		Call     SetActorVar 	( *Var[0] 00000001 00000001 )
  468:  	Case  ==  00000001 
  474:  		Call     SetActorVar 	( *Var[0] 00000001 00000002 )
  48C:  EndSwitch
  494:  Call     GetActorVar 	( .Actor:Self 00000002 *Var[1] )
  4AC:  Call     SetActorVar 	( *Var[0] 00000002 *Var[1] )
  4C4:  Switch  *Var[1] 
  4D0:  	Case  ==  00000000 
  4DC:  		Call     GetBattleVar 	( 00000004 *Var[0] )
  4F0:  		Add  *Var[0]  00000001 
  500:  		Call     SetBattleVar 	( 00000004 *Var[0] )
  514:  	Case  ==  00000001 
  520:  		Call     GetBattleVar 	( 00000005 *Var[0] )
  534:  		Add  *Var[0]  00000001 
  544:  		Call     SetBattleVar 	( 00000005 *Var[0] )
  558:  	Case  ==  00000002 
  564:  		Call     GetBattleVar 	( 00000006 *Var[0] )
  578:  		Add  *Var[0]  00000001 
  588:  		Call     SetBattleVar 	( 00000006 *Var[0] )
  59C:  	Case  ==  00000003 
  5A8:  		Call     GetBattleVar 	( 00000007 *Var[0] )
  5BC:  		Add  *Var[0]  00000001 
  5CC:  		Call     SetBattleVar 	( 00000007 *Var[0] )
  5E0:  EndSwitch
  5E8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  5FC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  610:  Return
  618:  End%/
