
% ====================================================
% Jungle Fuzzy
% + Leech up to 10 times (20 HP)
% + Faster leeching
% ====================================================

@ $JungleFuzzy
{
% stats
[Index]        29b 
[Level]        16`b 
[MaxHP]         7`b 
}

@ $StatusTable_8021E9E4
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      95`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear    0`
.Status:Static     70`
.Status:Paralyze   75`
.Status:Shrink     75`
.Status:Stop       90`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   -2`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       -1`
.Status:End
}

% Much faster life leech, still possible to get only one hit.
% no it's not - Q
@ $Script_LeechAttack
{
   0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     UseBattleCamPreset 	( 0000003F )
   38:  Call     BattleCamTargetActor ( .Actor:Self )
   48:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   60:  Call     GetBattlePhase ( *Var[0] )
   70:  If  *Var[0]  ==  .Phase:FirstStrike
   80:  	Call     SetGoalToTarget 	( .Actor:Self )
   90:  	Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   AC:  	Add  *Var[0]  00000032 
   BC:  	Set  *Var[1]  00000000 
   CC:  	Call     SetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   E8:  	Goto     00000064 
   F4:  EndIf
   FC:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  110:  Call     SetAnimation 	( .Actor:Self 00000001 002B0303 )
  128:  Call     SetGoalToTarget 	( .Actor:Self )
  138:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  154:  Add  *Var[0]  00000032 
  164:  Set  *Var[1]  00000000 
  174:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  188:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  19C:  ExecWait 8029C12C 
  1A8:  Call     SetAnimation 	( .Actor:Self 00000001 002B0301 )
  1C0:  Label    00000064 
  1CC:  Call     SetActorDispOffset ( FFFFFF81 00000000 0000000A 00000000 )
  1E8:  Call     SetAnimation 	( .Actor:Self 00000001 002B0304 )
  200:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000009 00000000 )
  21C:  Wait     00000001 
  228:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000008 00000000 )
  244:  Wait     00000005 
  250:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 08000000 00000000 00000002 00000010 )
  274:  Switch  *Var[0] 
  280:  	CaseOR  ==  00000006 
  28C:  	CaseOR  ==  00000005 
  298:  		Set  *Var[A]  *Var[0] 
  2A8:  		Call     SetGoalToTarget 	( .Actor:Self )
  2B8:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2D4:  		Sub  *Var[0]  00000005 
  2E4:  		Set  *Var[1]  00000000 
  2F4:  		Sub  *Var[2]  00000005 
  304:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
  318:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0305 )
  330:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  34C:  		Call     JumpToGoal  	( .Actor:Self 0000000B 00000000 00000001 00000000 )
  36C:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  388:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0309 )
  3A0:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3BC:  		Sub  *Var[0]  00000014 
  3CC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
  3E0:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  41C:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  438:  		Sub  *Var[0]  0000000F 
  448:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
  45C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  478:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  498:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4B4:  		Wait     00000004 
  4C0:  		Wait     00000005 
  4CC:  		If  *Var[A]  ==  00000005 
  4DC:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  500:  		EndIf
  508:  		Wait     00000005 
  514:  		Call     UseBattleCamPreset 	( 00000002 )
  524:  		Call     YieldTurn ( )
  530:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  544:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  560:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0303 )
  578:  		Call     SetGoalToHome 	( .Actor:Self )
  588:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  5A4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  5B8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  5CC:  		ExecWait 8029C12C 
  5D8:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  5F0:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  604:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  618:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  62C:  		Return
  634:  	EndCaseGroup
  63C:  	Case  ==  00000007 
  648:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  65C:  		If  *Var[0]  &  00002000 
  66C:  			Set  *Flag[00]  00000000 
  67C:  		Else
  684:  			Set  *Flag[00]  00000001 
  694:  		EndIf
  69C:  EndSwitch
  6A4:  Call     SetGoalToTarget 	( .Actor:Self )
  6B4:  Call     AddGoalPos 	( .Actor:Self FFFFFFFD FFFFFFF4 FFFFFFF1 )
  6D0:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[3.0] )
  6E4:  Call     SetAnimation 	( .Actor:Self 00000001 002B0305 )
  6FC:  Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  71C:  If  *Flag[00]  ==  00000001 
  72C:  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000006 00000020 )
  754:  	Call     YieldTurn ( )  
  75C:  EndIf
  764:  Call     GetStatusFlags ( .Actor:Player *Var[1] )
  778:  If  *Var[1]  &  00100000 
  788:  	Wait     0000000A 
  794:  	Loop     00000002 
  7A0:  		Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
  7B4:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0307 )
  7CC:  		Wait     00000015 
  7D8:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0300 )
  7F0:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000014A )
  80C:  		Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
  820:  		Call     SetActorDispOffset ( FFFFFF81 FFFFFFFD FFFFFFFE 00000000 )
  83C:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  858:  		Wait     00000001 
  864:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
  880:  		Wait     00000001 
  88C:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
  8A8:  		Wait     00000001 
  8B4:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
  8D0:  		Wait     00000001 
  8DC:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
  8F8:  		Wait     00000002 
  904:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.60058594] *Fixed[1.6005859] *Fixed[1.0] )
  920:  		Wait     0000000A 
  92C:  		Wait     00000002 
  938:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[A] 08000000 00000000 00000000 00000004 00000040 )
  960:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  97C:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000008 00000000 )
  998:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  9B4:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0305 )
  9CC:  		Wait     0000001E 
  9D8:  	EndLoop
  9E0:  Else
  9E8:  	Call     ShowMessageBox ( 00000031 00007FFF )
  9FC:  	Call     802694A4 ( 00000001 )
  A0C:  	Call     LoadActionCommand 	( 00000006 )
  A1C:  	Call     802A9000 ( )
  A28:  	Call     SetupMashMeter ( 00000001 00000017 00000000 00000000 00000000 00000000 )
 A4C:  	Wait     0000000A 
  A58:  	Call     SetBattleFlagBits 	( 00004000 .False )
  A6C:  	Call     802A9110 ( 00000000 00007FFF 00000003 )
  A84:  	Set  *Var[D]  00000000 
  A94:  	Loop     0000000A 
  AA0:  		Call     UseIdleAnimation 	( .Actor:Player .False )
  AB4:  		Call     SetAnimation 	( .Actor:Player 00000000 0003000C )
  ACC:  		Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
  AE0:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0307 )
  AF8:  		Set  *Flag[00]  00000000 
  B08:  		Loop     12`
  B14:  			Call     GetActionSuccessCopy ( *Var[1] )
  B24:  			If  *Var[1]  ==  00000001 
  B34:  				Set  *Flag[00]  00000001 
  B44:  				BreakLoop
  B4C:  			EndIf
  B54:  			Wait     00000001 
  B60:  		EndLoop
  B68:  		If  *Flag[00]  ==  00000001 
  B78:  			Call     UseIdleAnimation 	( .Actor:Player .True )
  B8C:  			BreakLoop
  B94:  		EndIf
  B9C:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0300 )
  BB4:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000014A )
  BD0:  		Call     PlaySoundAtActor 	( .Actor:Self 000003E0 )
  BE4:  		Call     SetActorDispOffset ( FFFFFF81 FFFFFFFD FFFFFFFE 00000000 )
  C00:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  C1C:  		Set  *Flag[00]  00000000 
  C2C:  		Loop     00000001 
  C38:  			Call     GetActionSuccessCopy ( *Var[1] )
  C48:  			If  *Var[1]  ==  00000001 
  C58:  				Set  *Flag[00]  00000001 
  C68:  				BreakLoop
  C70:  			EndIf
  C78:  			Wait     00000001 
  C84:  		EndLoop
  C8C:  		If  *Flag[00]  ==  00000001 
  C9C:  			Call     UseIdleAnimation 	( .Actor:Player .True )
  CB0:  			BreakLoop
  CB8:  		EndIf
  CC0:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
  CDC:  		Set  *Flag[00]  00000000 
  CEC:  		Loop     00000001 
  CF8:  			Call     GetActionSuccessCopy ( *Var[1] )
  D08:  			If  *Var[1]  ==  00000001 
  D18:  				Set  *Flag[00]  00000001 
  D28:  				BreakLoop
  D30:  			EndIf
  D38:  			Wait     00000001 
  D44:  		EndLoop
  D4C:  		If  *Flag[00]  ==  00000001 
  D5C:  			Call     UseIdleAnimation 	( .Actor:Player .True )
  D70:  			BreakLoop
  D78:  		EndIf
  D80:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.80078125] *Fixed[1.3007812] *Fixed[1.0] )
  D9C:  		Set  *Flag[00]  00000000 
  DAC:  		Loop     00000001 
  DB8:  			Call     GetActionSuccessCopy ( *Var[1] )
  DC8:  			If  *Var[1]  ==  00000001 
  DD8:  				Set  *Flag[00]  00000001 
  DE8:  				BreakLoop
  DF0:  			EndIf
  DF8:  			Wait     00000001 
  E04:  		EndLoop
  E0C:  		If  *Flag[00]  ==  00000001 
  E1C:  			Call     UseIdleAnimation 	( .Actor:Player .True )
  E30:  			BreakLoop
  E38:  		EndIf
  E40:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
  E5C:  		Set  *Flag[00]  00000000 
  E6C:  		Loop     00000001 
  E78:  			Call     GetActionSuccessCopy ( *Var[1] )
  E88:  			If  *Var[1]  ==  00000001 
  E98:  				Set  *Flag[00]  00000001 
  EA8:  				BreakLoop
  EB0:  			EndIf
  EB8:  			Wait     00000001 
  EC4:  		EndLoop
  ECC:  		If  *Flag[00]  ==  00000001 
  EDC:  			Call     UseIdleAnimation 	( .Actor:Player .True )
  EF0:  			BreakLoop
  EF8:  		EndIf
  F00:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
  F1C:  		Set  *Flag[00]  00000000 
  F2C:  		Loop     00000002 
  F38:  			Call     GetActionSuccessCopy ( *Var[1] )
  F48:  			If  *Var[1]  ==  00000001 
  F58:  				Set  *Flag[00]  00000001 
  F68:  				BreakLoop
  F70:  			EndIf
  F78:  			Wait     00000001 
  F84:  		EndLoop
  F8C:  		If  *Flag[00]  ==  00000001 
  F9C:  			Call     UseIdleAnimation 	( .Actor:Player .True )
  FB0:  			BreakLoop
  FB8:  		EndIf
  FC0:  		Call     SetActorScale 	( .Actor:Self *Fixed[0.60058594] *Fixed[1.6005859] *Fixed[1.0] )
  FDC:  		Set  *Flag[00]  00000000 
  FEC:  		Loop     0000000A 
  FF8:  			Call     GetActionSuccessCopy ( *Var[1] )
 1008:  			If  *Var[1]  ==  00000001 
 1018:  				Set  *Flag[00]  00000001 
 1028:  				BreakLoop
 1030:  			EndIf
 1038:  			Wait     00000001 
 1044:  		EndLoop
 104C:  		If  *Flag[00]  ==  00000001 
 105C:  			Call     UseIdleAnimation 	( .Actor:Player .True )
 1070:  			BreakLoop
 1078:  		EndIf
 1080:  		Set  *Flag[00]  00000000 
 1090:  		Loop     00000002 
 109C:  			Call     GetActionSuccessCopy ( *Var[1] )
 10AC:  			If  *Var[1]  ==  00000001 
 10BC:  				Set  *Flag[00]  00000001 
 10CC:  				BreakLoop
 10D4:  			EndIf
 10DC:  			Wait     00000001 
 10E8:  		EndLoop
 10F0:  		If  *Flag[00]  ==  00000001 
 1100:  			Call     UseIdleAnimation 	( .Actor:Player .True )
 1114:  			BreakLoop
 111C:  		EndIf
 1124:  		Call     UseIdleAnimation 	( .Actor:Player .True )
 1138:  		Call     EnemyDamageTarget 	( .Actor:Self *Var[A] 0A000000 00000000 00000000 00000004 00000040 )
 1160:  		Call     GetLastDamage 	( .Actor:Player *Var[3] )
 1174:  		If  *Var[3]  !=  00000000 
 1184:  			Call     PlaySoundAtActor 	( .Actor:Self 0000206D )
 1198:  			Call     PlaySoundAtActor 	( .Actor:Self 00000214 )
 11AC:  			Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 11C8:  			Add  *Var[1]  0000000A 
 11D8:  			Call     $Function_802181A0 ( *Var[0] *Var[1] *Var[2] *Var[3] )
 11F4:  			Thread
 11FC:  				Wait     0000000F 
 1208:  				Call     PlaySoundAtActor 	( .Actor:Self 0000025C )
 121C:  				Call     $Function_80218254 ( *Var[0] *Var[1] *Var[2] *Var[3] )
 1238:  			EndThread
 1240:  			Add  *Var[0]  00000014 
 1250:  			Add  *Var[1]  00000014 
 1260:  			Call     PlayEffect  	( ~FX:Recover:HP *Var[0] *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
 12A4:  			Call     GetActorHP  	( .Actor:Self *Var[0] )
 12B8:  			Add  *Var[0]  *Var[3] 
 12C8:  			Call     SetEnemyHP  	( .Actor:Self *Var[0] )
 12DC:  		Else
 12E4:  			Add  *Var[D]  00000001 
 12F4:  			If  *Var[D]  >  00000001 
 1304:  				Call     80269470 ( )
 1310:  				BreakLoop
 1318:  			EndIf
 1320:  		EndIf
 1328:  		Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
 1344:  		Call     SetActorDispOffset ( FFFFFF81 00000000 00000008 00000000 )
 1360:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
 137C:  		Call     SetAnimation 	( .Actor:Self 00000001 002B0305 )
 1394:  		Call     GetPlayerHP 	( *Var[1] )
 13A4:  		If  *Var[1]  ==  00000000 
 13B4:  			Call     80269470 ( )
 13C0:  			BreakLoop
 13C8:  		EndIf
 13D0:  		Set  *Flag[00]  00000000 
 13E0:  		Loop     9` 
 13EC:  			Call     GetActionSuccessCopy ( *Var[1] )
 13FC:  			If  *Var[1]  ==  00000001 
 140C:  				Set  *Flag[00]  00000001 
 141C:  				BreakLoop
 1424:  			EndIf
 142C:  			Wait     00000001 
 1438:  		EndLoop
 1440:  		If  *Flag[00]  ==  00000001 
 1450:  			BreakLoop
 1458:  		EndIf
 1460:  	EndLoop
 1468:  	Call     80269470 ( )
 1474:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
 1490:  	Call     SetActorDispOffset ( FFFFFF81 00000000 00000008 00000000 )
 14AC:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
 14C8:  	Call     SetAnimation 	( .Actor:Self 00000001 002B0305 )
 14E0:  EndIf
 14E8:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
 1504:  Call     SetAnimation 	( .Actor:Self 00000001 002B0301 )
 151C:  Call     UseBattleCamPreset 	( 00000002 )
 152C:  Thread
 1534:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.6005859] *Fixed[0.60058594] *Fixed[1.0] )
 1550:  	Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000A 00000000 )
 156C:  	Wait     00000001 
 1578:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000014A )
 1594:  	Wait     00000001 
 15A0:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.5] *Fixed[1.0] )
 15BC:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000012C )
 15D8:  	Wait     00000001 
 15E4:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000010E )
 1600:  	Wait     00000001 
 160C:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[0.7001953] *Fixed[1.0] )
 1628:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 000000F0 )
 1644:  	Wait     00000001 
 1650:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 000000D2 )
 166C:  	Wait     00000001 
 1678:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.7001953] *Fixed[1.4003906] *Fixed[1.0] )
 1694:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 000000B4 )
 16B0:  	Wait     00000002 
 16BC:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[0.7001953] *Fixed[1.0] )
 16D8:  	Wait     00000002 
 16E4:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.5] *Fixed[1.0] )
 1700:  EndThread
 1708:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1724:  Add  *Var[0]  00000028 
 1734:  Set  *Var[1]  00000000 
 1744:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
 1758:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1774:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
 1794:  Call     SetActorScale 	( .Actor:Self *Fixed[1.4003906] *Fixed[0.20019531] *Fixed[1.0] )
 17B0:  Wait     00000001 
 17BC:  Thread
 17C4:  	Wait     00000001 
 17D0:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.5] *Fixed[1.0] )
 17EC:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000096 )
 1808:  	Wait     00000001 
 1814:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
 1830:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000078 )
 184C:  	Wait     00000001 
 1858:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000005A )
 1874:  	Wait     00000001 
 1880:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000003C )
 189C:  	Wait     00000001 
 18A8:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 0000001E )
 18C4:  	Wait     00000001 
 18D0:  	Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
 18EC:  	Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
 1908:  EndThread
 1910:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 192C:  Add  *Var[0]  0000001E 
 193C:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 1958:  Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
 1978:  Wait     00000005 
 1984:  Call     YieldTurn ( )
 1990:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
 19AC:  Call     SetAnimation 	( .Actor:Self 00000001 002B0303 )
 19C4:  Call     SetGoalToHome 	( .Actor:Self )
 19D4:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
 19F0:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
 1A04:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
 1A18:  ExecWait 8029C12C 
 1A24:  Call     SetAnimation 	( .Actor:Self 00000001 002B0301 )
 1A3C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
 1A50:  Call     UseIdleAnimation 	( .Actor:Self .True )
 1A64:  Return
 1A6C:  End
}


% ====================================================
% SpearGuy
% + Spear throw is faster and more dangerous
% ====================================================

@ $SpearGuy
{
% stats
[Index]        2Ab 
[Level]        16`b 
[MaxHP]         7`b 
}

#define .SpearFlightTime 15` % was 20` -- too fast causes glitches

@ $Script_SpearThrow % 8021ACBC
{
[118]	Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] ) % was 6.0
[170]	Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] ) % was 8.0
% miss
[470]	Call     MakeLerp	( FFFFFFE2 0000002D .SpearFlightTime 00000000 )
[590]	Call     SetPartJumpGravity	( .Actor:Self 00000003 *Fixed[1.0] )
		Call     JumpPartTo	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] .SpearFlightTime 00000001 )
% hit
[884]	Call     MakeLerp	( FFFFFFE2 0000002D .SpearFlightTime 00000000 ) % spear rotation
[984]	Call     SetPartJumpGravity	( .Actor:Self 00000003 *Fixed[1.0] ) % was 0.7001953
		Call     JumpPartTo	( .Actor:Self 00000003 *Var[0] *Var[1] *Var[2] .SpearFlightTime 00000001 )
[9E0]	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080264 00000007 00000020 ) % was 3 damage
}

@ $Script_SpearStab
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( FFFFFF81 00000000 )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( FFFFFF81 )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000002 00420006 )
   8C:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   A0:  Call     SetGoalToTarget 	( .Actor:Self )
   B0:  Call     GetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   CC:  Call     GetStatusFlags ( .Actor:Self *Var[A] )
   E0:  If       *Var[A]  &  00080000 
   F0:     Add      *Var[0] 0000000A 
  100:  Else
  108:     Add      *Var[0] 00000019 
  118:  EndIf
  120:  Set      *Var[1] 00000000 
  130:  Add      *Var[2] 00000001 
  140:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  15C:  Call     RunToGoal   	( .Actor:Self 00000000 00000000 )
  Loop	3 % Spear attack is repeated three times
  174:  Call     SetAnimation 	( .Actor:Self 00000002 00420004 )
  18C:  Wait     00000005 
  198:  Call     SetAnimation 	( .Actor:Self 00000002 0042001A )
  1B0:  Wait     00000007 % was F 
  1BC:  Call     EnemyTestTarget ( FFFFFF81 *Var[0] 00000000 00000000 00000001 00000010 )
  1E0:  Switch   *Var[0] 
  1EC:     CaseOR   ==  00000006 
  1F8:     CaseOR   ==  00000005 
  204:        Set      *Var[A] *Var[0] 
  214:        Call     PlaySoundAtActor 	( .Actor:Self 00000309 )
  228:        Call     SetAnimation 	( .Actor:Self 00000002 0042001B )
  240:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  254:        Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  270:        Sub      *Var[0] 0000001E 
  280:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  29C:        Call     JumpToGoal 	( .Actor:Self 00000008 00000000 00000001 00000000 )
  2BC:        If       *Var[A] ==  00000005 
  2CC:           Call     EnemyTestTarget ( FFFFFF81 *Var[A] 80000000 00000000 00000000 00000000 )
  2F0:        EndIf
  2F8:        Sub      *Var[0] 00000014 
  308:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  324:        Call     JumpToGoal 	( .Actor:Self 00000008 00000000 00000001 00000000 )
  344:        Wait     0000000F 
  350:        Wait     00000014 
  35C:        Call     UseBattleCamPreset 	( 00000002 )
  36C:        Call     SetActorYaw 	( .Actor:Self 000000B4 )
  380:        Call     AddActorDecoration ( FFFFFF81 00000002 00000000 00000002 )
  39C:        ExecWait $Script_80218D7C 
  3A8:        Call     RemoveActorDecoration ( FFFFFF81 00000002 00000000 )
  3C0:        Call     SetActorYaw 	( .Actor:Self 00000000 )
  3D4:        Call     EnableIdleScript 	( .Actor:Self 00000001 )
  3E8:        Call     UseIdleAnimation 	( .Actor:Self .True )
  3FC:        Return
  404:     EndCaseGroup
  40C:  EndSwitch
  414:  Call     PlaySoundAtActor 	( .Actor:Self 00000309 )
  428:  Call     SetAnimation 	( .Actor:Self 00000002 0042001B )
  440:  Wait     00000007 
  44C:  Wait     00000002 
  458:  Call     SetGoalToTarget 	( .Actor:Self )
  468:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000002 00000020 )
	EndLoop
  490:  Switch   *Var[0] 
  49C:     CaseOR   ==  00000000 
  4A8:     CaseOR   ==  00000002 
  4B4:        Call     UseBattleCamPreset 	( 00000002 )
  4C4:        Wait     00000014 
  4D0:        ExecWait $Script_80218D7C 
  4DC:     EndCaseGroup
  4E4:  EndSwitch
  4EC:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  500:  Call     UseIdleAnimation 	( .Actor:Self .True )
  514:  Return
  51C:  End
}

@ $Script_TakeTurn_8021D8D8 {
   38:  	ExecWait $Script_8021CD50 
   4C:  Return
   54:  End
}
  
@ $Script_8021C628 {
  [4E8]  Call     SetActorSpeed 	( .Actor:Self *Fixed[9.0] )
   [5C8]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 80080000 00000002 00000020 ) %ramming attack
}
   
@ $Script_8021CD50 {
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     MoveBattleCamOver 	( 00000014 )
   6C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   84:  Call     PlaySoundAtActor 	( .Actor:Self 00000234 )
   98:  Call     SetAnimation 	( .Actor:Self 00000001 003B0009 )
   B0:  Wait     00000014 
   BC:  Call     SetAnimation 	( .Actor:Self 00000001 003B0003 )
   D4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
   E8:  Call     SetGoalToTarget 	( .Actor:Self )
   F8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  114:  Add  *Var[0]  00000050 
  124:  Set  *Var[1]  00000000 
  134:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  150:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  168:  Call     SetActorSounds ( FFFFFF81 00000000 000020BA 000003B4 )
  184:  Call     SetActorSounds ( FFFFFF81 00000004 0000000A 00000000 )
  1A0:  Call     SetAnimation 	( .Actor:Self 00000001 003B0004 )
  1B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[5.0] )
  1CC:  Sub  *Var[0]  00000028 
  1DC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1F8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  210:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  234:  Switch  *Var[0] 
  240:  	CaseOR  ==  00000006 
  24C:  	CaseOR  ==  00000005 
  258:  		Set  *Var[A]  *Var[0] 
  268:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  27C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0009 )
  294:  		Thread
  29C:  			Wait     0000000C 
  2A8:  			Call     SetAnimation 	( .Actor:Self 00000001 003B000A )
  2C0:  		EndThread
  2C8:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  2DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  2EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  308:  		Sub  *Var[0]  0000000A 
  318:  		Set  *Var[1]  00000000 
  328:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  344:  		Call     JumpToGoal  	( .Actor:Self 00000018 00000000 00000001 00000000 )
  364:  		If  *Var[A]  ==  00000005 
  374:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  398:  		EndIf
  3A0:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0005 )
  3B8:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  3CC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  3E0:  		Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  3FC:  		Sub  *Var[0]  0000001E 
  40C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  428:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  448:  		Sub  *Var[0]  00000014 
  458:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  474:  		Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  494:  		Wait     0000000F 
  4A0:  		Call     UseBattleCamPreset 	( 00000002 )
  4B0:  		Call     MoveBattleCamOver 	( 0000000F )
  4C0:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  4D4:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  4F0:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:  		SetConst  *Var[0]  00000001 
  514:  		SetConst  *Var[1]  003B0004 
  524:  		ExecWait DoReturnHome 
  530:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  548:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  55C:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0001 )
  574:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetActorSpeed 	( .Actor:Self *Fixed[10.0] )
  5C8:  Call     SetAnimation 	( .Actor:Self 00000001 003B0009 )
  5E0:  Thread
  5E8:  	Wait     00000009 
  5F4:  	Call     SetAnimation 	( .Actor:Self 00000001 003B000A )
  60C:  EndThread
  614:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  628:  Call     SetGoalToTarget 	( .Actor:Self )
  638:  Call     JumpToGoal  	( .Actor:Self 00000012 00000000 00000001 00000000 )
  658:  Wait     00000002 
  664:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 80080264 00000004 00000020 )
  68C:  Switch  *Var[0] 
  698:  	CaseOR  ==  00000000 
  6A4:  	CaseOR  ==  00000002 
  6B0:  		Call     UseBattleCamPreset 	( 00000002 )
  6C0:  		Call     MoveBattleCamOver 	( 0000000F )
  6D0:  		Thread
  6D8:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 0000000E 00000000 )
  6F4:  			Set  *Var[3]  00000000 
  704:  			Loop     00000014 
  710:  				Sub  *Var[3]  0000001E 
  720:  				If  *Var[3]  <  00000000 
  730:  					Add  *Var[3]  00000168 
  740:  				EndIf
  748:  				Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[3] )
  764:  				Wait     00000001 
  770:  			EndLoop
  778:  			Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  794:  			Call     SetActorRotationOffset 	( .Actor:Self 00000000 00000000 00000000 )
  7B0:  		EndThread
  7B8:  		Call     GetBattleFlags ( *Var[0] )
  7C8:  		If  *Var[0]  &  80000000 
  7D8:  			Goto     00000001 
  7E4:  		EndIf
  7EC:  		Call     GetLastDamage 	( .Actor:Player *Var[0] )
  800:  		If  *Var[0]  ==  00000000 
  810:  			Goto     00000001 
  81C:  		EndIf
  824:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  840:  		Add  *Var[0]  00000028 
  850:  		Set  *Var[1]  00000000 
  860:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  874:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  890:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  8B0:  		Call     PlaySoundAtActor 	( .Actor:Self 00000349 )
  8C4:  		Call     PlaySoundAtActor 	( .Actor:Self 00000749 )
  8D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0009 )
  8F0:  		Wait     0000000A 
  8FC:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0007 )
  914:  		Wait     0000000F 
  920:  		Goto     00000002 
  92C:  		Label    00000001 
  938:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  954:  		Add  *Var[0]  00000028 
  964:  		Set  *Var[1]  00000000 
  974:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  988:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  9A4:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  9C4:  		Call     PlaySoundAtActor 	( .Actor:Self 000020E4 )
  9D8:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0010 )
  9F0:  		Wait     0000000A 
  9FC:  		Call     PlaySoundAtActor 	( .Actor:Self 000020C3 )
  A10:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
				Exec $Script_8021C628
  A2C:  		Call     RandInt     	( 00000064 *Var[0] )
  A40:  		If  *Var[0]  <  00000032 
  A50:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0011 )
  A68:  		Else
  A70:  			Call     SetAnimation 	( .Actor:Self 00000001 003B0013 )
  A88:  		EndIf
  A90:  		Wait     00000019 
  A9C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  AB4:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  AC8:  		Label    00000002 
  AD4:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  AE8:  		SetConst  *Var[0]  00000001 
  AF8:  		SetConst  *Var[1]  003B0004 
  B08:  		ExecWait DoReturnHome 
  B14:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  B28:  		Call     SetAnimation 	( .Actor:Self 00000001 003B0001 )
  B40:  	EndCaseGroup
  B48:  EndSwitch
  B50:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  B64:  Call     UseIdleAnimation 	( .Actor:Self .True )
  B78:  Return
  B80:  End
}
   
% ====================================================
% Medi Guys (same changes as Chapter 4)
% + Heals an ally by 6HP or all allies by 3HP
% + Increased heal frequency, improved move selection AI
% + Attack speed increased, 40% chance to inflict Sleep
% + Added 1 defense for increased resiliency
% ====================================================

@ $MediGuy
{
% stats
[Index]        22b 
[Level]        14`b 
[MaxHP]         7`b 
}

#delete $Script_802239AC

@ $DefenseTable_8022259C
{
.Element:Normal  00000001
.Element:Shock   00000000
.Element:End
}

@ $Script_TakeTurn_80223A8C
{
	Set      *Var[A] 00000000 % num hurt
	Set      *Var[B] 00000000 % heal all amount
	Set      *Var[C] 00000000 % best heal amount
	Set      *Var[D] 00000000 % best npc
	Set      *Var[E] 7FFFFFFF % best npc HP
	% check HP of allies
	Call     EnemyCreateTargetList 	( 00000002 )
	Call     InitTargetIterator 	( )
		Label    0` 
		Call     GetOwnerTarget 	( *Var[0] *Var[1] )
		Call     GetActorHP      ( *Var[0] *Var[2] )
		Call     GetEnemyMaxHP   ( *Var[0] *Var[3] )
		If       *Var[2]  !=  *Var[3]
			Call     GetOwnerTarget 	( *Var[0] *Var[1] )
			Add      *Var[A] 00000001 
			% get heal amount
			Set     *Var[F] *Var[3]
			Sub     *Var[F] *Var[2]
			Add     *Var[B] *Var[F]
			% check against most injured ally
			If	*Var[F] >= *Var[C]
				If *Var[F] == *Var[C]
					% heal amount == best heal, prioritize ally with lowest HP
					If *Var[2] < *Var[E]
						Set    *Var[C] *Var[F]
						Set    *Var[D] *Var[0]
						Set    *Var[E] *Var[2]
					EndIf
				Else
					% heal amount > best heal, found new best heal
					Set    *Var[C] *Var[F]
					Set    *Var[D] *Var[0]
					Set    *Var[E] *Var[2]
				EndIf
			EndIf
		EndIf
		Call     ChooseNextTarget 	( 00000000 *Var[0] )
		If       *Var[0]  !=  FFFFFFFF
			Goto     0` 
		EndIf
	% choose an action
	If  *Var[A] == 0
		% attack if noone is hurt
		ExecWait $Script_FlyingAttack
	Else
		% noone is badly hurt, attack with P = 0.4
		If *Var[B] < 4
			Call     RandInt ( 64 *Var[9] )
			If       *Var[9]  <=  28
				ExecWait $Script_FlyingAttack 
			Else
				ExecWait $Script_DoHeal 
			EndIf
		% need to heal someone
		Else
			ExecWait $Script_DoHeal
		EndIf
	EndIf
	Return
	End
}

% Assume numHurt > 0 when this script is executed
#new:Script $Script_DoHeal
{
	If *Var[A] == 1
		% heal the only hurt ally
		Set    *Var[0] *Var[D]
		ExecWait $Script_HealOneAlly
	Else
		% choose the option that restores the most HP
		If *Var[B] > *Var[C]
			ExecWait $Script_HealAll 
		Else
			Set    *Var[0] *Var[D]
			ExecWait $Script_HealOneAlly 
		EndIf
	EndIf
	Return
	End
}

#new:Script $Script_HealAll
{
	% begin heal all
	Call     UseIdleAnimation 	( FFFFFF81 00000000 )
	Call     EnableIdleScript 	( FFFFFF81 00000000 )
	Call     SetTargetActor 	( FFFFFF81 00000000 )
	Call     UseBattleCamPreset 	( 0000000E )
	Call     BattleCamTargetActor 	( FFFFFF81 )
	Call     MoveBattleCamOver 	( 0000000F )
	Wait     0000000F 
	% casting animation
	Call     GetOwnerID 	( *Var[0] )
	Call     GetActorPos       	( *Var[0] *Var[1] *Var[2] *Var[3] )
	Call     PlaySoundAtActor   ( FFFFFF81 000002F8 )
	Call     PlaySoundAtActor   ( FFFFFF81 00000214 )
	Call     PlaySoundAtActor   ( FFFFFF81 00000000 )
	Call     SetAnimation 		( FFFFFF81 00000001 00400005 )
	Add      *Var[2] 00000032 
	Call     PlayEffect       	( 00000011 00000001 *Var[1] *Var[2] *Var[3] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call     PlayEffect       	( 00000040 00000002 *Var[1] *Var[2] *Var[3] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Wait     30` 
	Call     SetAnimation 	( FFFFFF81 00000001 00400001 )
	Wait     10` 
	% loop over all enemies
	Call     EnemyCreateTargetList 	( 00008002 )
	Call     InitTargetIterator	( )
		Label    00000000 
		Call     GetOwnerTarget 	( *Var[0] *Var[1] )
		Thread
			Wait     00000005 
			Call     PlaySoundAtActor    ( *Var[0] 0000206D )
			Call     PlaySoundAtActor    ( *Var[0] 00000214 )
			Wait     30` 
			Call     PlaySoundAtActor    ( *Var[0] 0000025C )
		EndThread
		Thread
			Call     8026BF48 	( 00000001 )
			Call     HealActor   	( *Var[0] 00000003 00000001 )
			Call     8026BF48 	( 00000000 )
		EndThread
		Call     ChooseNextTarget    	( 00000000 *Var[0] )
		If       *Var[0]  !=  FFFFFFFF
			Goto     00000000 
		EndIf
	% reset and return
	Call     WaitForBuffDone 	( )
	Wait     1` 
	Call     UseBattleCamPreset 	( 00000002 )
	Wait     10` 
	Call     YieldTurn 	( )
	Call     EnableIdleScript 	( FFFFFF81 00000001 )
	Call     UseIdleAnimation 	( FFFFFF81 00000001 )
	Return
	End
}

% Heal individual targets for a fixed 6HP, rather than 60% (effectively 4)
@ $Script_HealOneAlly
{
[270]	Call     HealActor 	( *Var[A] 4` 00000000 )
}

% Increase swoop speed, add chance for 40% chance for sleep
@ $Script_FlyingAttack
{
[640]	Call     SetActorSpeed     	( FFFFFF81 *Fixed[12.000000] )
[694]	Call     EnemyDamageTarget       ( FFFFFF81 *Var[0] 00000000 00000000 80001328 00000004 00000020 )
}

% ====================================================
% SpikeTop
% + Lunge attack is 50% faster
% ====================================================


@ $SpikeTop
{
% stats
[MaxHP]         5`b 
}

@ $DefenseTable_80223B20
{
.Element:Normal 00000005
.Element:Fire   00000063
.Element:Blast  00000063
.Element:End
}

@ $DefenseTable_80223B3C
{
.Element:Normal 00000001
.Element:Fire   00000063
.Element:Blast  00000063
.Element:End
}

@ $StatusTable_80223B48
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      60`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      75`
.Status:Fear    0`
.Status:Static     50`
.Status:Paralyze   75`
.Status:Shrink     75`
.Status:Stop       90`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      -2`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   -1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       -1`
.Status:End
}

@ $Script_TakeTurn_802260DC
{
[7A0]  Call     SetActorSpeed 	( .Actor:Self *Fixed[21.0] ) % was 14.0
[7D8]  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000005 00000020 )
}
  
% ====================================================
% MBush
% + Increased chance to poison
% + Moar HP
% + Crazy fire weakness
% ====================================================

@ $MBush
{
% stats
[Index]        27b 
[Level]        16`b 
[MaxHP]         12`b % beefus maximus
}

@ $DefenseTable_8022187C
{
.Element:Normal   00000000
.Element:Water    00000003
.Element:Fire     FFFFFFFB % call fire department!
.Element:End
}

@ $StatusTable_80221890
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      25`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      10`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink     25`
.Status:Stop       70`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -3`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod    -2`
.Status:StopTurnMod      -1`
.Status:End
}

% Chance to poison: 25% -> 100%, turns 2 -> 6
% attack was randomized - now poison is now not blockable instead
% if Mario is poisoned, heals if it's below max HP.
@ $Script_TakeTurn_80221F78
{
   0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
      	Call     GetStatusFlags ( .Actor:Player *Var[0] )
		If  *Var[0]  &  00020000  %if mario is poisoned...
			Call     GetActorHP  	( .Actor:Self *Var[0] )
   			Call     GetEnemyMaxHP 	( .Actor:Self *Var[1] )
   			Sub  *Var[1]  00000003 
   			If  *Var[0] <= *Var[1] %and if it can get full value out of a heal, heal instead.
   				Thread
					Wait     00000005 
					Call     PlaySoundAtActor    ( .Actor:Self 0000206D )
					Call     PlaySoundAtActor    ( .Actor:Self 00000214 )
					Wait     30` 
					Call     PlaySoundAtActor    ( .Actor:Self 0000025C )
				EndThread
				Thread
					Call     8026BF48 ( 00000001 ) %fun fact: this is an enable switch of some kind. If you don't call it, healing doesn't actually change the bush's HP
   					Call	 HealActor ( .Actor:Self 00000003 00000000 ) %heal
   					Call     8026BF48 ( 00000000 ) 
   				EndThread
   				Call     WaitForBuffDone ( ) % I *think* this waits for the healing to be over.
   				Call     EnableIdleScript 	( .Actor:Self 00000001 )
 		  		Call     UseIdleAnimation 	( .Actor:Self .True )
		 		Return
			EndIf
		EndIf
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00450004 )
   8C:  Call     SetGoalToTarget 	( .Actor:Self )
   9C:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   B8:  Add  *Var[0]  00000032 
   C8:  Set  *Var[1]  00000000 
   D8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
   EC:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  108:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  120:  Call     SetActorSounds ( FFFFFF81 00000002 000020C9 00000000 )
  13C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  160:  Switch  *Var[0] 
  16C:  	CaseOR  ==  00000006 
  178:  	CaseOR  ==  00000005 
  184:  		Set  *Var[A]  *Var[0] 
  194:  		Call     SetAnimation 	( .Actor:Self 00000001 00450006 )
  1AC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  1C0:  		Call     SetGoalToTarget 	( .Actor:Self )
  1D0:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1EC:  		Sub  *Var[0]  0000001E 
  1FC:  		Set  *Var[1]  00000000 
  20C:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  228:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  248:  		Call     ResetAllActorSounds ( FFFFFF81 )
  258:  		If  *Var[A]  ==  00000005 
  268:  			Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  28C:  		EndIf
  294:  		Sub  *Var[0]  00000014 
  2A4:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2C0:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  2E0:  		Wait     0000000F 
  2EC:  		Call     SetAnimation 	( .Actor:Self 00000001 00450002 )
  304:  		Wait     0000000F 
  310:  		Call     UseBattleCamPreset 	( 00000002 )
  320:  		Call     YieldTurn ( )
  32C:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  348:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  35C:  		ExecWait $Script_802219E4 
  368:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  380:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  394:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  3A8:  		Return
  3B0:  	EndCaseGroup
  3B8:  EndSwitch
  3C0:  Call     SetAnimation 	( .Actor:Self 00000001 00450006 )
  3D8:  Call     SetGoalToTarget 	( .Actor:Self )
  3E8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  404:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  418:  Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  438:  Call     ResetAllActorSounds ( FFFFFF81 )
  448:  Wait     00000001
		%damage is blockable - poison is not
		Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 12000000 00000000 80020764 00000000 00000020 )
  454:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000003 00000020 ) %putting damage after ensures block anim is shown if player blocks
  47C:  Switch  *Var[0] 
  488:  	CaseOR  ==  00000000 
  494:  	CaseOR  ==  00000002 
  4A0:  		Call     UseBattleCamPreset 	( 00000002 )
  4B0:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  4CC:  		Add  *Var[0]  0000001E 
  4DC:  		Set  *Var[1]  00000000 
  4EC:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  500:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  51C:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  53C:  		Call     SetAnimation 	( .Actor:Self 00000001 00450002 )
  554:  		Wait     00000008 
  560:  		Call     YieldTurn ( )
  56C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  580:  		ExecWait $Script_802219E4
  58C:  	EndCaseGroup
  594:  EndSwitch
  59C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  5B0:  Call     UseIdleAnimation 	( .Actor:Self .True )
  5C4:  Return
  5CC:  End
% ====================================================
% HurtPlant
% + Added spike damage from jumping on them
% ====================================================
}

@ $HurtPlant
{
% stats
[MaxHP]         8`b
}

@ $DefenseTable_8021D98C
{
.Element:Normal 00000000
.Element:Fire   FFFFFFFE
.Element:Water  00000003
.Element:End
}

@ $StatusTable_8021D9A0
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      45`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink     75`
.Status:Stop       50`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -2`
.Status:End
}

@ $Script_TakeTurn_8021E33C
{
  [568]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
  [598]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 80020464 00000004 00000020 )
}

@ $PartsTable_8021DA4C
{
00800000 01000000 F61800FF $IdleAnimations_8021D940 $DefenseTable_8021D98C 00000010 00000000 F8FB0000 00000000 
}

@ $Script_HandleEvent_8021DCF4
{
  [600]
	% new event handler for spike contact, makes it look like the plant bites upward (sorta)
			Case     ==  0000001B 
				Call     SetAnimation 	( .Actor:Self 00000001 0044000D )
				Wait     00000014 
	% keep the rest of the script
  600:		Default
  608:	EndSwitch
  610:	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  624:	Call     UseIdleAnimation 	( .Actor:Self .True )
  638:	Return
  640:	End
}

  % ===========================
  % NEW CHALLENGER APPROACHING
  % ===========================
   
     % I was saving this for ch6 but the jungle is so weak to power bomb, quake, and dizzy shell
     % that it hurts. Enjoy a high HP flying enemy with solid damage and poison chance.
  
  #import Bloober.bpat
  
  % ===========================
  % NEW CHALLENGER APPROACHING
  % ===========================
  
     % Everyone complains that mediguys are out of place
	 % so I made this guy to replace him.
  
  #import RemedyGuy.bpat
  
% ====================================================
% Formation Changes
% + Increased the number of enemies
% + Added RemedyGuy to more formations
% + Added SpikeTop to more formations
% ====================================================

@ $Formation_00
{
$SpearGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpearGuy 00000001 00000009 00000001 00000000 00000000 00000000 
$SpearGuy 00000002 00000008 00000000 00000000 00000000 00000000 % added
$RemedyGuy  00000007 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_01
{
$SpearGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpearGuy 00000001 00000009 00000001 00000000 00000000 00000000 
$SpikeTop 00000002 00000008 00000000 00000000 00000000 00000000 % changed from SpearGuy
$RemedyGuy  00000007 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_02
{
$SpearGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpearGuy 00000001 00000009 00000001 00000000 00000000 00000000 
$MBush    00000002 00000008 00000000 00000000 00000000 00000000 % added
$RemedyGuy  00000007 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_03
{
$SpearGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpearGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$SpearGuy 00000002 00000008 00000000 00000000 00000000 00000000
$SpearGuy 00000003 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_06
{
$SpearGuy    00000000 0000000A 00000000 00000000 00000000 00000000 
$SpikeTop    00000001 00000009 00000000 00000000 00000000 00000000 
$SpearGuy    00000002 00000008 00000001 00000000 00000000 00000000 
$JungleFuzzy 00000003 00000007 00000000 00000000 00000000 00000000
}

@ $Formation_08
{
$HurtPlant 00000001 0000000A 00000000 00000000 00000000 00000000 
$HurtPlant 00000002 0000000A 00000000 00000000 00000000 00000000 
$Bloober   00000007 00000009 00000000 00000000 00000000 00000000 % added
}

@ $Formation_0A
{
$JungleFuzzy 00000000 0000000A 00000000 00000000 00000000 00000000 
$MBush		 00000001 00000009 00000000 00000000 00000000 00000000 % added
}

@ $Formation_0B
{
$JungleFuzzy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpearGuy    00000003 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_0C
{
$JungleFuzzy 00000000 0000000A 00000000 00000000 00000000 00000000 
$Bloober     00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_0D
{
$JungleFuzzy 00000000 0000000A 00000000 00000000 00000000 00000000 
$RemedyGuy  00000007 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_0E
{
$MBush 00000001 0000000A 00000000 00000000 00000000 00000000 
$MBush 00000002 00000009 00000000 00000000 00000000 00000000 
$SpearGuy 00000003 00000008 00000001 00000000 00000000 00000000 % added
}

@ $Formation_10
{
$MBush 00000000 0000000A 00000000 00000000 00000000 00000000 
$MBush 00000001 00000009 00000000 00000000 00000000 00000000 
$MBush 00000002 00000008 00000000 00000000 00000000 00000000 
$Bloober 00000007 00000007 00000000 00000000 00000000 00000000 % changed from MBush
}

#new:Formation $40sFormation1_11
{
$JungleFuzzy 00000000 0000000A 00000000 00000000 00000000 00000000 
$MBush 		 00000001 00000009 00000000 00000000 00000000 00000000 
$HurtPlant   00000002 00000008 00000000 00000000 00000000 00000000 
$RemedyGuy   00000007 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $40sFormation2_12
{
$JungleFuzzy 00000000 0000000A 00000000 00000000 00000000 00000000 
$SpearGuy 00000001 00000009 00000000 00000000 00000000 00000000 
$SpearGuy 00000002 00000008 00000000 00000000 00000000 00000000
$SpearGuy 00000003 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $40sFormation3_13
{
$JungleFuzzy 00000000 0000000A 00000000 00000000 00000000 00000000 
$JungleFuzzy 00000001 00000009 00000000 00000000 00000000 00000000
$JungleFuzzy 00000002 00000008 00000000 00000000 00000000 00000000
$Bloober     00000007 00000007 00000000 00000000 00000000 00000000
}

@ $FormationTable
{
$SJIS_80228FC8 00000004 $Formation_00 $Stage_80227A84 00000000 % **
$SJIS_80228FB8 00000004 $Formation_01 $Stage_80227A84 00000000 % **
$SJIS_80228FA0 00000004 $Formation_02 $Stage_80227A84 00000000 % **
$SJIS_80228F84 00000004 $Formation_03 $Stage_80227A84 00000000 % **
$SJIS_80228F68 00000003 $Formation_04 $Stage_80227A84 00000000 % unused
$SJIS_80228F40 00000003 $Formation_05 $Stage_80227A84 00000000 % unused
$SJIS_80228F10 00000004 $Formation_06 $Stage_80227A84 00000000 % **
$SJIS_80228EE4 00000003 $Formation_07 $Stage_80227A84 00000000 % unused
$SJIS_80228ECC 00000003 $Formation_08 $Stage_80227A84 00000000 % **
$SJIS_80228EB4 00000003 $Formation_09 $Stage_80227A84 00000000 % unused
$SJIS_80228EA4 00000002 $Formation_0A $Stage_80227A84 00000000 
$SJIS_80228E94 00000002 $Formation_0B $Stage_80227A84 00000000 
$SJIS_80228E84 00000002 $Formation_0C $Stage_80227A84 00000000 % unused **
$SJIS_80228E60 00000002 $Formation_0D $Stage_80227A84 00000000 % **
$SJIS_80228E50 00000003 $Formation_0E $Stage_80227A84 00000000 % **
$SJIS_80228E40 00000003 $Formation_0F $Stage_80227A84 00000000 % unused
$SJIS_80228E30 00000004 $Formation_10 $Stage_80227A84 00000000 % **00000000 00000004 $30sFormation1_2D $AncientStage 00000000 %These formations are
00000000 00000004 $40sFormation1_11 $AncientStage 00000000 %These formations are
00000000 00000004 $40sFormation2_12 $AncientStage 00000000 %for the pit of 100 trials
00000000 00000004 $40sFormation3_13 $AncientStage 00000000 %hopefully this works okay
00000000 00000000 00000000 00000000 00000000 % unused
}

#new:Stage $AncientStage
{
"kpa_tex"
"kmr_bt07_shape"
"kmr_bt07_hit"
$Script_BeforeBoss 
$Script_AfterBoss
00000000 
00000000
00000000 
00000000 
00000000 
}

#new:Script $Script_BeforeBoss
{
	Call	SetSpriteShading 	( FFFFFFFF )
	Call	SetCamBGColor 	( 00000001 00000000 00000000 00000000 )
	Return
	End
}

#new:Script $Script_AfterBoss
{
	Return
	End 
}
