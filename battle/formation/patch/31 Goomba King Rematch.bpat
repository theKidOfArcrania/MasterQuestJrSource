
% ====================================================
% Rematch bosses only give SP the first time they are
% defeated. Set their level to 0 for repeat fights.
% ====================================================

#new:Function $Function_SetLevel
{
	PUSH	RA, S0, S1, S2
	DADDU	S1, A0, R0
	LW		S0, C (S1)
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	ADDIU	S0, S0, 4
	DADDU	A0, S1, R0
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S2, V0, R0
	SB		V0, 6 (S2)
	POP		RA, S0, S1, S2
	JR		RA
	ADDIU	V0, R0, 2
}

% ====================================================
% Actor: Blue Goomba
% ====================================================

#new:Actor $BlueGoomba
{
% stats
[Index]        90b 
[Level]        40`b 
[MaxHP]        30`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_Blue 
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_Blue 
[Script]      $Script_Init_Blue 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]  3`b  
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         32`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]    8`b  25`b % dx dy
}

#new:PartsTable $PartsTable_Blue
{
00800000 01000000 001800FF $IdleAnimations_Blue $DefenseTable_Blue 00000000 00000000 00FD0000 00000000 
}

#new:DefenseTable $DefenseTable_Blue
{
.Element:Normal	1
.Element:Water	63
.Element:Ice	63
.Element:End
}

#new:StatusTable $StatusTable_Blue
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      20`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      40`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze   20`
.Status:Shrink    100`
.Status:Stop       40`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:IdleAnimations $IdleAnimations_Blue
{
.Status:Normal    00620102
.Status:Stone     00620100
.Status:Sleep     0062010D
.Status:Poison    00620102
.Status:Stop      00620100
.Status:Static    00620102
.Status:Paralyze  00620100
.Status:Dizzy     0062010C
.Status:Fear  0062010C
.Status:End
}

#new:IdleAnimations $IdleAnimations_Shuffle_Blue
{
.Status:Normal    00620106
.Status:Stone     00620100
.Status:Sleep     0062010D
.Status:Poison    00620102
.Status:Stop      00620100
.Status:Static    00620106
.Status:Paralyze  00620100
.Status:Dizzy     0062010C
.Status:Fear  0062010C
.Status:End
}

#new:Script $Script_Init_Blue
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Blue )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_Blue )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Blue )
		If	*Flag_BeatRematch0  ==  .True
			Call	$Function_SetLevel	( $BlueGoomba 0 )
		EndIf
   3C:  Return
   44:  End
}

#new:Script $Script_Idle_Blue
{
    0:  Label    0000000A 
    C:  Call     RandInt     	( 00000050 *Var[0] )
   20:  Add      *Var[0] 00000050 
   30:  Loop     *Var[0] 
   3C:     Label    00000000 
   48:     Call     GetStatusFlags ( .Actor:Self *Var[1] )
   5C:     If       *Var[1]  &  0035D000 
   6C:        Wait     00000001 
   78:        Goto     00000000 
   84:     EndIf
   8C:     Wait     00000001 
   98:  EndLoop
   A0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  Add      *Var[0] 00000005 
   CC:  Call     SetActorIdleSpeed ( FFFFFF81 *Fixed[1.0] )
   E0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Shuffle_Blue )
   F8:  Call     SetIdleGoal ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  114:  Call     IdleRunToGoal ( FFFFFF81 00000000 )
  128:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Blue )
  140:  Loop     00000014 
  14C:     Label    00000001 
  158:     Call     GetStatusFlags ( .Actor:Self *Var[1] )
  16C:     If       *Var[1]  &  0035D000 
  17C:        Wait     00000001 
  188:        Goto     00000001 
  194:     EndIf
  19C:     Wait     00000001 
  1A8:  EndLoop
  1B0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1CC:  Sub      *Var[0] 00000005 
  1DC:  Call     SetActorIdleSpeed ( FFFFFF81 *Fixed[1.0] )
  1F0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Shuffle_Blue )
  208:  Call     SetIdleGoal ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  224:  Call     IdleRunToGoal ( FFFFFF81 00000000 )
  238:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Blue )
  250:  Loop     00000050 
  25C:     Label    00000002 
  268:     Call     GetStatusFlags ( .Actor:Self *Var[1] )
  27C:     If       *Var[1]  &  0035D000 
  28C:        Wait     00000001 
  298:        Goto     00000002 
  2A4:     EndIf
  2AC:     Wait     00000001 
  2B8:  EndLoop
  2C0:  Goto     0000000A 
  2CC:  Return
  2D4:  End
}

#new:Script $Script_HandleEvent_Blue
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch   *Var[0] 
   64:     CaseOR   ==  .Event:HitCombo
   70:     CaseOR   ==  .Event:Hit
   7C:        SetConst *Var[0] 00000001 
   8C:        SetConst *Var[1] 00620109 
   9C:        ExecWait DoNormalHit 
   A8:     EndCaseGroup
   B0:     Case     ==  .Event:BurnHit
   BC:        SetConst *Var[0] 00000001 
   CC:        SetConst *Var[1] 0062010E 
   DC:        SetConst *Var[2] 0062010F 
   EC:        ExecWait DoBurnHit 
   F8:     Case     ==  .Event:BurnDeath
  104:        SetConst *Var[0] 00000001 
  114:        SetConst *Var[1] 0062010E 
  124:        SetConst *Var[2] 0062010F 
  134:        ExecWait DoBurnHit 
  140:        SetConst *Var[0] 00000001 
  150:        SetConst *Var[1] 0062010F 
  160:        ExecWait DoDeath 
  16C:        Return
  174:     Case     ==  .Event:SpinSmashHit
  180:        SetConst *Var[0] 00000001 
  190:        SetConst *Var[1] 00620109 
  1A0:        ExecWait 8029B998 
  1AC:     Case     ==  .Event:SpinSmashDeath
  1B8:        SetConst *Var[0] 00000001 
  1C8:        SetConst *Var[1] 00620109 
  1D8:        ExecWait 8029B998 
  1E4:        SetConst *Var[0] 00000001 
  1F4:        SetConst *Var[1] 00620109 
  204:        ExecWait DoDeath 
  210:        Return
  218:     Case     ==  .Event:ShockHit
  224:        SetConst *Var[0] 00000001 
  234:        SetConst *Var[1] 00620109 
  244:        ExecWait DoShockHit 
  250:        SetConst *Var[0] 00000001 
  260:        SetConst *Var[1] 00620109 
  270:        ExecWait 8029BD70 
  27C:        Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  29C:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  2B4:        Call     SetAnimation 	( .Actor:Self 00000001 0062010C )
  2CC:        Call     SetGoalToHome 	( .Actor:Self )
  2DC:        Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  2F0:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  308:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  320:        Wait     00000005 
  32C:        Call     SetAnimation 	( .Actor:Self 00000001 00620102 )
  344:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  358:        Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  378:     Case     ==  .Event:ShockDeath
  384:        SetConst *Var[0] 00000001 
  394:        SetConst *Var[1] 00620109 
  3A4:        ExecWait DoShockHit 
  3B0:        SetConst *Var[0] 00000001 
  3C0:        SetConst *Var[1] 00620109 
  3D0:        ExecWait DoDeath 
  3DC:        Return
  3E4:     Case     ==  .Event:StarBeam
  3F0:     CaseOR   ==  00000017
  3FC:     CaseOR   ==  .Event:Immune
  408:     CaseOR   ==  .Event:AirLiftFailed
  414:        SetConst *Var[0] 00000001 
  424:        SetConst *Var[1] 00620102 
  434:        ExecWait DoImmune 
  440:     EndCaseGroup
  448:     Case     ==  .Event:Death
  454:        SetConst *Var[0] 00000001 
  464:        SetConst *Var[1] 00620109 
  474:        ExecWait DoNormalHit 
  480:        Wait     0000000A 
  48C:        SetConst *Var[0] 00000001 
  49C:        SetConst *Var[1] 00620109 
  4AC:        ExecWait DoDeath 
  4B8:        Return
  4C0:     Case     ==  .Event:EndFirstStrike
  4CC:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  4E4:        Call     SetAnimation 	( .Actor:Self 00000001 00620106 )
  4FC:        Call     SetGoalToHome 	( .Actor:Self )
  50C:        Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  520:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  538:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  550:        Call     HPBarToHome 	( .Actor:Self )
  560:     Case     ==  .Event:RecoverStatus
  56C:        SetConst *Var[0] 00000001 
  57C:        SetConst *Var[1] 00620102 
  58C:        ExecWait DoRecover 
  598:     Case     ==  .Event:ScareAway
  5A4:        SetConst *Var[0] 00000001 
  5B4:        SetConst *Var[1] 00620106 
  5C4:        SetConst *Var[2] 00620109 
  5D4:        ExecWait DoScareAway 
  5E0:        Return
  5E8:     Case     ==  .Event:BeginAirLift
  5F4:        SetConst *Var[0] 00000001 
  604:        SetConst *Var[1] 00620106 
  614:        ExecWait DoAirLift 
  620:     Case     ==  .Event:BlowAway
  62C:        SetConst *Var[0] 00000001 
  63C:        SetConst *Var[1] 00620109 
  64C:        ExecWait DoBlowAway 
  658:        Return
  660:     Default
  668:  EndSwitch
  670:  Call     SetAnimation 	( .Actor:Self 00000001 00620102 )
  688:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  69C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6B0:  Return
  6B8:  End
}

#new:FloatTable $FloatTable_8021DF84
{
00000000 3C8EF77F 3D0EF241 3D565E46 3D8EDC3C 3DB27ED8 3DD612C7 3DF99674 
3E0E835E 3E20303C 3E31D0C8 3E43636F 3E54E6E2 3E66598E 3E77BA67 3E8483ED 
3E8D204B 3E95B1C8 3E9E377A 3EA6B0D9 3EAF1D3F 3EB77C03 3EBFCC7D 3EC80DE5 
3ED03FD5 3ED86163 3EE0722A 3EE87161 3EF05EA2 3EF83904 3F000000 3F03D988 
3F07A8C6 3F0B6D76 3F0F2746 3F12D5E0 3F167914 3F1A108C 3F1D9BF6 3F211B1E 
3F248DC1 3F27F37C 3F2B4C2B 3F2E976C 3F31D51B 3F3504F7 3F3826AB 3F3B3A04 
3F3E3EC0 3F4134AD 3F441B76 3F46F30A 3F49BB17 3F4C7369 3F4F1BBD 3F51B3F2 
3F543BD6 3F56B325 3F5919AC 3F5B6F4C 3F5DB3D0 3F5FE719 3F6208E1 3F641909 
3F66175D 3F6803CD 3F69DE16 3F6BA637 3F6D5BEE 3F6EFF19 3F708FB8 3F720D88 
3F737879 3F74D068 3F761544 3F7746ED 3F786552 3F797050 3F7A67E8 3F7B4BE8 
3F7C1C61 3F7CD91F 3F7D8234 3F7E177F 3F7E98FE 3F7F06A3 3F7F605B 3F7FA637 
3F7FD817 3F7FF60A 3F800000 
}

#new:Script $Script_JumpAttack_Blue
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00620106 )
   8C:  Call     SetGoalToTarget 	( .Actor:Self )
   9C:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
   B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   CC:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
   E4:  Call     SetAnimation 	( .Actor:Self 00000001 00620102 )
   FC:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFF 00000000 )
  118:  Wait     00000001 
  124:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  140:  Wait     00000005 
  14C:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  168:  Call     SetAnimation 	( .Actor:Self 00000001 00620108 )
  180:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
            Loop 2
  1A4:  Switch   *Var[0] 
  1B0:     CaseOR   ==  00000006 
  1BC:     CaseOR   ==  00000005 
  1C8:        Set      *Var[A] *Var[0] 
  1D8:        Call     SetGoalToTarget 	( .Actor:Self )
  1E8:        Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  204:        Sub      *Var[0] 0000000A 
  214:        Set      *Var[1] 0000000A 
  224:        Add      *Var[2] 00000003 
  234:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  250:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  264:        Thread
  26C:           Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[0] )
  288:           Set      *Var[0] 00000000 
  298:           Loop     00000010 
  2A4:              Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  2C0:              Call     $Function_GetRotationAngle_Blue ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
  2E0:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  2FC:              Set      *Var[1] *Var[4] 
  30C:              Set      *Var[2] *Var[5] 
  31C:              Set      *Var[3] *Var[6] 
  32C:              Wait     00000001 
  338:           EndLoop
  340:        EndThread
  348:        Thread
  350:           Wait     00000006 
  35C:           Call     SetAnimation 	( .Actor:Self 00000001 00620108 )
  374:        EndThread
  37C:        Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  39C:        Call     SetAnimation 	( .Actor:Self 00000001 0062010D )
  3B4:        Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  3D0:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000005 00000000 )
  3EC:        Wait     00000001 
  3F8:        Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
  414:        Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  430:        Wait     00000001 
  43C:        Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  458:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000007 00000000 )
  474:        Call     SetAnimation 	( .Actor:Self 00000001 00620109 )
  48C:        Wait     00000005 
  498:        If       *Var[A] ==  00000005 
  4A8:           Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4CC:        EndIf
  4D4:        Wait     00000005 
  4E0:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  4FC:        Call     SetAnimation 	( .Actor:Self 00000001 00620108 )
  514:        Call     SetGoalToTarget 	( .Actor:Self )
  524:        Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  540:        Add      *Var[0] 00000014 
  550:        Set      *Var[1] 00000000 
  560:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  57C:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
  590:        Thread
  598:           Wait     00000004 
  5A4:           Set      *Var[0] 000000B4 
  5B4:           Loop     00000004 
  5C0:              Sub      *Var[0] 0000002D 
  5D0:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  5EC:              Wait     00000001 
  5F8:           EndLoop
  600:           Call     SetAnimation 	( .Actor:Self 00000001 00620108 )
  618:        EndThread
  620:        Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  640:        Call     SetAnimation 	( .Actor:Self 00000001 0062010C )
  658:        Wait     00000005 
  664:        Call     UseBattleCamPreset 	( 00000002 )
  674:        Call     YieldTurn ( )
  680:        Call     SetActorYaw 	( .Actor:Self 000000B4 )
  694:        Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  6B0:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  6C8:        Call     SetGoalToHome 	( .Actor:Self )
  6D8:        Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  6EC:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  704:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  71C:        Call     SetActorYaw 	( .Actor:Self 00000000 )
  730:        Wait     00000005 
  73C:        Call     SetAnimation 	( .Actor:Self 00000001 00620102 )
  754:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  768:        Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  788:        Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  7A0:        Call     EnableIdleScript 	( .Actor:Self 00000001 )
  7B4:        Call     UseIdleAnimation 	( .Actor:Self .True )
  7C8:        Return
  7D0:     EndCaseGroup
  7D8:     Default
  7E0:        Call     SetGoalToTarget 	( .Actor:Self )
  7F0:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  804:        Thread
  80C:           Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[0] )
  828:           Set      *Var[0] 00000000 
  838:           Loop     00000010 
  844:              Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  860:              Call     $Function_GetRotationAngle_Blue ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
  880:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  89C:              Set      *Var[1] *Var[4] 
  8AC:              Set      *Var[2] *Var[5] 
  8BC:              Set      *Var[3] *Var[6] 
  8CC:              Wait     00000001 
  8D8:           EndLoop
  8E0:        EndThread
  8E8:        Thread
  8F0:           Wait     00000006 
  8FC:           Call     SetAnimation 	( .Actor:Self 00000001 00620108 )
  914:        EndThread
  91C:        Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  93C:        Call     SetAnimation 	( .Actor:Self 00000001 00620108 )
  954:        Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  970:        Wait     00000001 
  97C:        Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
  998:        Wait     00000001 
  9A4:  EndSwitch
  9AC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000005 00000020 )
  EndLoop
  9D4:  Switch   *Var[0] 
  9E0:     CaseOR   ==  00000000 
  9EC:     CaseOR   ==  00000002 
  9F8:        Call     UseBattleCamPreset 	( 00000002 )
  A08:        Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  A24:        Wait     00000001 
  A30:        Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  A4C:        Wait     00000001 
  A58:        Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  A74:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  A90:        Call     SetAnimation 	( .Actor:Self 00000001 00620102 )
  AA8:        Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  AC4:        Add      *Var[0] 00000028 
  AD4:        Set      *Var[1] 00000000 
  AE4:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  AF8:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B14:        Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  B34:        Add      *Var[0] 0000001E 
  B44:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B60:        Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  B80:        Add      *Var[0] 00000014 
  B90:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  BAC:        Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  BCC:        Call     SetAnimation 	( .Actor:Self 00000001 00620102 )
  BE4:        Wait     00000003 
  BF0:        Call     YieldTurn ( )
  BFC:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  C14:        Call     SetAnimation 	( .Actor:Self 00000001 00620106 )
  C2C:        Call     SetGoalToHome 	( .Actor:Self )
  C3C:        Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  C50:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  C68:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  C80:     EndCaseGroup
  C88:  EndSwitch
  C90:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  CA4:  Call     UseIdleAnimation 	( .Actor:Self .True )
  CB8:  Return
  CC0:  End
}
  
#new:Script $Script_BoostDefense
{
	Call	UseIdleAnimation 	( .Actor:Self .False )
	Call	EnableIdleScript 	( .Actor:Self 00000000 )
	Set		*Var[8]  *Var[0] 
	Call	SetTargetActor	( .Actor:Self .Actor:Player )
	Call	UseBattleCamPreset	( 0000000E )
	Call	BattleCamTargetActor	( .Actor:Self )
	Call	MoveBattleCamOver		( 0000000F )
	Wait	0000000F 
	Call	SetAnimation	( .Actor:Self 00000001 0062010A )
	Wait	00000005 
	Call	PlaySoundAtActor	( .Actor:Self 000020D4 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	GetStatusFlags	( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Add		*Var[1] 0000000C 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Else
		Add		*Var[1] 0000001F 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	EndIf
	Wait	0000001E 
	Call	SetAnimation	( .Actor:Self 00000001 00620102 )
	Wait	00000005 
	Thread
		Wait	0000000A 
		Call	PlaySoundAtActor	( *Var[8] 000002DD )
	EndThread
	Thread
		Call	8026BF48	( 00000001 )
		Call	BoostDefense	( *Var[8] 00000003 )
		Call	8026BF48	( 00000000 )
	EndThread
	Call	WaitForBuffDone ( )
	Call	UseBattleCamPreset	( 00000002 )
	Wait	0000000A 
	Call	YieldTurn ( )
	Call	EnableIdleScript	( .Actor:Self 00000001 )
	Call	UseIdleAnimation	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_TakeTurn_Blue
{
	Call	ActorExists	( .Actor:Enemy0 *Var[0] )
	If  *Var[0]  ==  .True
		Call	GetActorDefenseBoost	( .Actor:Enemy0 *Var[0] )
		If  *Var[0]  <  00000005
			Call	RandInt	( 100` *Var[0] )
			If  *Var[0]  <  50`
				Set  *Var[0]  .Actor:Enemy0
				ExecWait	$Script_BoostDefense
				Return
			EndIf
		EndIf
	EndIf
	ExecWait	$Script_JumpAttack_Blue
	Return
	End
}

% ====================================================
% Actor: Red Goomba
% ====================================================

#new:Actor $RedGoomba
{
% stats
[Index]        91b 
[Level]        40`b 
[MaxHP]        40`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_Red 
% ai
[PartsCount]   1`s 
[PartsTable] $PartsTable_Red 
[Script]      $Script_Init_Red 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]  3`b  
[SpinSmash]     0`b % weight (0-4)
% ui positions
[Size]         32`b  32`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]  -10`b  20`b % dx dy
[StatusIcon]    8`b  25`b % dx dy
}

#new:PartsTable $PartsTable_Red
{
00800000 01000000 001800FF $IdleAnimations_Red $DefenseTable_Red 00000000 00000000 00FD0000 00000000 
}

#new:DefenseTable $DefenseTable_Red
{
.Element:Normal 0
.Element:Fire	63
.Element:Blast	63
.Element:End
}

#new:IdleAnimations $IdleAnimations_Red
{
.Status:Normal    00620002
.Status:Stone     00620000
.Status:Sleep     0062000D
.Status:Poison    00620002
.Status:Stop      00620000
.Status:Static    00620002
.Status:Paralyze  00620000
.Status:Dizzy     0062000C
.Status:Fear  0062000C
.Status:End
}

#new:IdleAnimations $IdleAnimations_Shuffle_Red
{
.Status:Normal    00620006
.Status:Stone     00620000
.Status:Sleep     0062000D
.Status:Poison    00620002
.Status:Stop      00620000
.Status:Static    00620006
.Status:Paralyze  00620000
.Status:Dizzy     0062000C
.Status:Fear  0062000C
.Status:End
}

#new:StatusTable $StatusTable_Red
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      50`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      30`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze   30`
.Status:Shrink    100`
.Status:Stop       50`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#new:Script $Script_Init_Red
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Red )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_Red )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Red )
		If	*Flag_BeatRematch0  ==  .True
			Call	$Function_SetLevel	( $RedGoomba 0 )
		EndIf
   3C:  Return
   44:  End
}

#new:Script $Script_Idle_Red
{
    0:  Label    0000000A 
    C:  Call     RandInt     	( 00000050 *Var[0] )
   20:  Add      *Var[0] 00000050 
   30:  Loop     *Var[0] 
   3C:     Label    00000000 
   48:     Call     GetStatusFlags ( .Actor:Self *Var[1] )
   5C:     If       *Var[1]  &  0035D000 
   6C:        Wait     00000001 
   78:        Goto     00000000 
   84:     EndIf
   8C:     Wait     00000001 
   98:  EndLoop
   A0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  Add      *Var[0] 00000005 
   CC:  Call     SetActorIdleSpeed ( FFFFFF81 *Fixed[1.0] )
   E0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Shuffle_Red )
   F8:  Call     SetIdleGoal ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  114:  Call     IdleRunToGoal ( FFFFFF81 00000000 )
  128:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Red )
  140:  Loop     00000014 
  14C:     Label    00000001 
  158:     Call     GetStatusFlags ( .Actor:Self *Var[1] )
  16C:     If       *Var[1]  &  0035D000 
  17C:        Wait     00000001 
  188:        Goto     00000001 
  194:     EndIf
  19C:     Wait     00000001 
  1A8:  EndLoop
  1B0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1CC:  Sub      *Var[0] 00000005 
  1DC:  Call     SetActorIdleSpeed ( FFFFFF81 *Fixed[1.0] )
  1F0:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Shuffle_Red )
  208:  Call     SetIdleGoal ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  224:  Call     IdleRunToGoal ( FFFFFF81 00000000 )
  238:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Red )
  250:  Loop     00000050 
  25C:     Label    00000002 
  268:     Call     GetStatusFlags ( .Actor:Self *Var[1] )
  27C:     If       *Var[1]  &  0035D000 
  28C:        Wait     00000001 
  298:        Goto     00000002 
  2A4:     EndIf
  2AC:     Wait     00000001 
  2B8:  EndLoop
  2C0:  Goto     0000000A 
  2CC:  Return
  2D4:  End
}

#new:Script $Script_HandleEvent_Red
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch   *Var[0] 
   64:     CaseOR   ==  .Event:HitCombo
   70:     CaseOR   ==  .Event:Hit
   7C:        SetConst *Var[0] 00000001 
   8C:        SetConst *Var[1] 00620009 
   9C:        ExecWait DoNormalHit 
   A8:     EndCaseGroup
   B0:     Case     ==  .Event:BurnHit
   BC:        SetConst *Var[0] 00000001 
   CC:        SetConst *Var[1] 0062000E 
   DC:        SetConst *Var[2] 0062000F 
   EC:        ExecWait DoBurnHit 
   F8:     Case     ==  .Event:BurnDeath
  104:        SetConst *Var[0] 00000001 
  114:        SetConst *Var[1] 0062000E 
  124:        SetConst *Var[2] 0062000F 
  134:        ExecWait DoBurnHit 
  140:        SetConst *Var[0] 00000001 
  150:        SetConst *Var[1] 0062000F 
  160:        ExecWait DoDeath 
  16C:        Return
  174:     Case     ==  .Event:SpinSmashHit
  180:        SetConst *Var[0] 00000001 
  190:        SetConst *Var[1] 00620009 
  1A0:        ExecWait 8029B998 
  1AC:     Case     ==  .Event:SpinSmashDeath
  1B8:        SetConst *Var[0] 00000001 
  1C8:        SetConst *Var[1] 00620009 
  1D8:        ExecWait 8029B998 
  1E4:        SetConst *Var[0] 00000001 
  1F4:        SetConst *Var[1] 00620009 
  204:        ExecWait DoDeath 
  210:        Return
  218:     Case     ==  .Event:ShockHit
  224:        SetConst *Var[0] 00000001 
  234:        SetConst *Var[1] 00620009 
  244:        ExecWait DoShockHit 
  250:        SetConst *Var[0] 00000001 
  260:        SetConst *Var[1] 00620009 
  270:        ExecWait 8029BD70 
  27C:        Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  29C:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  2B4:        Call     SetAnimation 	( .Actor:Self 00000001 0062000C )
  2CC:        Call     SetGoalToHome 	( .Actor:Self )
  2DC:        Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  2F0:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  308:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  320:        Wait     00000005 
  32C:        Call     SetAnimation 	( .Actor:Self 00000001 00620002 )
  344:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  358:        Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  378:     Case     ==  .Event:ShockDeath
  384:        SetConst *Var[0] 00000001 
  394:        SetConst *Var[1] 00620009 
  3A4:        ExecWait DoShockHit 
  3B0:        SetConst *Var[0] 00000001 
  3C0:        SetConst *Var[1] 00620009 
  3D0:        ExecWait DoDeath 
  3DC:        Return
  3E4:     Case     ==  .Event:StarBeam
  3F0:     CaseOR   ==  00000017
  3FC:     CaseOR   ==  .Event:Immune
  408:     CaseOR   ==  .Event:AirLiftFailed
  414:        SetConst *Var[0] 00000001 
  424:        SetConst *Var[1] 00620002 
  434:        ExecWait DoImmune 
  440:     EndCaseGroup
  448:     Case     ==  .Event:Death
  454:        SetConst *Var[0] 00000001 
  464:        SetConst *Var[1] 00620009 
  474:        ExecWait DoNormalHit 
  480:        Wait     0000000A 
  48C:        SetConst *Var[0] 00000001 
  49C:        SetConst *Var[1] 00620009 
  4AC:        ExecWait DoDeath 
  4B8:        Return
  4C0:     Case     ==  .Event:EndFirstStrike
  4CC:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  4E4:        Call     SetAnimation 	( .Actor:Self 00000001 00620006 )
  4FC:        Call     SetGoalToHome 	( .Actor:Self )
  50C:        Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  520:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  538:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  550:        Call     HPBarToHome 	( .Actor:Self )
  560:     Case     ==  .Event:RecoverStatus
  56C:        SetConst *Var[0] 00000001 
  57C:        SetConst *Var[1] 00620002 
  58C:        ExecWait DoRecover 
  598:     Case     ==  .Event:ScareAway
  5A4:        SetConst *Var[0] 00000001 
  5B4:        SetConst *Var[1] 00620006 
  5C4:        SetConst *Var[2] 00620009 
  5D4:        ExecWait DoScareAway 
  5E0:        Return
  5E8:     Case     ==  .Event:BeginAirLift
  5F4:        SetConst *Var[0] 00000001 
  604:        SetConst *Var[1] 00620006 
  614:        ExecWait DoAirLift 
  620:     Case     ==  .Event:BlowAway
  62C:        SetConst *Var[0] 00000001 
  63C:        SetConst *Var[1] 00620009 
  64C:        ExecWait DoBlowAway 
  658:        Return
  660:     Default
  668:  EndSwitch
  670:  Call     SetAnimation 	( .Actor:Self 00000001 00620002 )
  688:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  69C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  6B0:  Return
  6B8:  End
}

#new:FloatTable $FloatTable_8021F984
{
00000000 3C8EF77F 3D0EF241 3D565E46 3D8EDC3C 3DB27ED8 3DD612C7 3DF99674 
3E0E835E 3E20303C 3E31D0C8 3E43636F 3E54E6E2 3E66598E 3E77BA67 3E8483ED 
3E8D204B 3E95B1C8 3E9E377A 3EA6B0D9 3EAF1D3F 3EB77C03 3EBFCC7D 3EC80DE5 
3ED03FD5 3ED86163 3EE0722A 3EE87161 3EF05EA2 3EF83904 3F000000 3F03D988 
3F07A8C6 3F0B6D76 3F0F2746 3F12D5E0 3F167914 3F1A108C 3F1D9BF6 3F211B1E 
3F248DC1 3F27F37C 3F2B4C2B 3F2E976C 3F31D51B 3F3504F7 3F3826AB 3F3B3A04 
3F3E3EC0 3F4134AD 3F441B76 3F46F30A 3F49BB17 3F4C7369 3F4F1BBD 3F51B3F2 
3F543BD6 3F56B325 3F5919AC 3F5B6F4C 3F5DB3D0 3F5FE719 3F6208E1 3F641909 
3F66175D 3F6803CD 3F69DE16 3F6BA637 3F6D5BEE 3F6EFF19 3F708FB8 3F720D88 
3F737879 3F74D068 3F761544 3F7746ED 3F786552 3F797050 3F7A67E8 3F7B4BE8 
3F7C1C61 3F7CD91F 3F7D8234 3F7E177F 3F7E98FE 3F7F06A3 3F7F605B 3F7FA637 
3F7FD817 3F7FF60A 3F800000 
}

#new:Script $Script_JumpAttack_Red
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 00620006 )
   8C:  Call     SetGoalToTarget 	( .Actor:Self )
   9C:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
   B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   CC:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
   E4:  Call     SetAnimation 	( .Actor:Self 00000001 00620002 )
   FC:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFF 00000000 )
  118:  Wait     00000001 
  124:  Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  140:  Wait     00000005 
  14C:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  168:  Call     SetAnimation 	( .Actor:Self 00000001 00620008 )
  180:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
          Loop 2
  1A4:  Switch   *Var[0] 
  1B0:     CaseOR   ==  00000006 
  1BC:     CaseOR   ==  00000005 
  1C8:        Set      *Var[A] *Var[0] 
  1D8:        Call     SetGoalToTarget 	( .Actor:Self )
  1E8:        Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  204:        Sub      *Var[0] 0000000A 
  214:        Set      *Var[1] 0000000A 
  224:        Add      *Var[2] 00000003 
  234:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  250:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  264:        Thread
  26C:           Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[0] )
  288:           Set      *Var[0] 00000000 
  298:           Loop     00000010 
  2A4:              Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  2C0:              Call     $Function_GetRotationAngle_Red ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
  2E0:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  2FC:              Set      *Var[1] *Var[4] 
  30C:              Set      *Var[2] *Var[5] 
  31C:              Set      *Var[3] *Var[6] 
  32C:              Wait     00000001 
  338:           EndLoop
  340:        EndThread
  348:        Thread
  350:           Wait     00000006 
  35C:           Call     SetAnimation 	( .Actor:Self 00000001 00620008 )
  374:        EndThread
  37C:        Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  39C:        Call     SetAnimation 	( .Actor:Self 00000001 0062000D )
  3B4:        Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  3D0:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000005 00000000 )
  3EC:        Wait     00000001 
  3F8:        Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
  414:        Call     SetActorDispOffset ( FFFFFF81 00000000 FFFFFFFE 00000000 )
  430:        Wait     00000001 
  43C:        Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  458:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000007 00000000 )
  474:        Call     SetAnimation 	( .Actor:Self 00000001 00620009 )
  48C:        Wait     00000005 
  498:        If       *Var[A] ==  00000005 
  4A8:           Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4CC:        EndIf
  4D4:        Wait     00000005 
  4E0:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  4FC:        Call     SetAnimation 	( .Actor:Self 00000001 00620008 )
  514:        Call     SetGoalToTarget 	( .Actor:Self )
  524:        Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  540:        Add      *Var[0] 00000014 
  550:        Set      *Var[1] 00000000 
  560:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  57C:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[2.0] )
  590:        Thread
  598:           Wait     00000004 
  5A4:           Set      *Var[0] 000000B4 
  5B4:           Loop     00000004 
  5C0:              Sub      *Var[0] 0000002D 
  5D0:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  5EC:              Wait     00000001 
  5F8:           EndLoop
  600:           Call     SetAnimation 	( .Actor:Self 00000001 00620008 )
  618:        EndThread
  620:        Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  640:        Call     SetAnimation 	( .Actor:Self 00000001 0062000C )
  658:        Wait     00000005 
  664:        Call     UseBattleCamPreset 	( 00000002 )
  674:        Call     YieldTurn ( )
  680:        Call     SetActorYaw 	( .Actor:Self 000000B4 )
  694:        Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  6B0:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  6C8:        Call     SetGoalToHome 	( .Actor:Self )
  6D8:        Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  6EC:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  704:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  71C:        Call     SetActorYaw 	( .Actor:Self 00000000 )
  730:        Wait     00000005 
  73C:        Call     SetAnimation 	( .Actor:Self 00000001 00620002 )
  754:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.6005859] )
  768:        Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  788:        Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  7A0:        Call     EnableIdleScript 	( .Actor:Self 00000001 )
  7B4:        Call     UseIdleAnimation 	( .Actor:Self .True )
  7C8:        Return
  7D0:     EndCaseGroup
  7D8:     Default
  7E0:        Call     SetGoalToTarget 	( .Actor:Self )
  7F0:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  804:        Thread
  80C:           Call     GetActorPos 	( .Actor:Self *Var[1] *Var[2] *Var[0] )
  828:           Set      *Var[0] 00000000 
  838:           Loop     00000010 
  844:              Call     GetActorPos 	( .Actor:Self *Var[4] *Var[5] *Var[6] )
  860:              Call     $Function_GetRotationAngle_Red ( *Var[1] *Var[2] *Var[4] *Var[5] *Var[0] )
  880:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  89C:              Set      *Var[1] *Var[4] 
  8AC:              Set      *Var[2] *Var[5] 
  8BC:              Set      *Var[3] *Var[6] 
  8CC:              Wait     00000001 
  8D8:           EndLoop
  8E0:        EndThread
  8E8:        Thread
  8F0:           Wait     00000006 
  8FC:           Call     SetAnimation 	( .Actor:Self 00000001 00620008 )
  914:        EndThread
  91C:        Call     JumpToGoal  	( .Actor:Self 00000010 00000000 00000001 00000000 )
  93C:        Call     SetAnimation 	( .Actor:Self 00000001 00620008 )
  954:        Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  970:        Wait     00000001 
  97C:        Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.5] *Fixed[1.0] )
  998:        Wait     00000001 
  9A4:  EndSwitch
  9AC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 00000000 00000006 00000020 )
  EndLoop
  9D4:  Switch   *Var[0] 
  9E0:     CaseOR   ==  00000000 
  9EC:     CaseOR   ==  00000002 
  9F8:        Call     UseBattleCamPreset 	( 00000002 )
  A08:        Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.80078125] *Fixed[1.0] )
  A24:        Wait     00000001 
  A30:        Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  A4C:        Wait     00000001 
  A58:        Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  A74:        Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  A90:        Call     SetAnimation 	( .Actor:Self 00000001 00620002 )
  AA8:        Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  AC4:        Add      *Var[0] 00000028 
  AD4:        Set      *Var[1] 00000000 
  AE4:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.8007812] )
  AF8:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B14:        Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  B34:        Add      *Var[0] 0000001E 
  B44:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  B60:        Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  B80:        Add      *Var[0] 00000014 
  B90:        Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  BAC:        Call     JumpToGoal  	( .Actor:Self 00000006 00000000 00000001 00000000 )
  BCC:        Call     SetAnimation 	( .Actor:Self 00000001 00620002 )
  BE4:        Wait     00000003 
  BF0:        Call     YieldTurn ( )
  BFC:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[2.0] )
  C14:        Call     SetAnimation 	( .Actor:Self 00000001 00620006 )
  C2C:        Call     SetGoalToHome 	( .Actor:Self )
  C3C:        Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
  C50:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  C68:        Call     SetAnimationRate 	( .Actor:Self 00000001 *Fixed[1.0] )
  C80:     EndCaseGroup
  C88:  EndSwitch
  C90:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  CA4:  Call     UseIdleAnimation 	( .Actor:Self .True )
  CB8:  Return
  CC0:  End
}
  
#new:Script $Script_BoostAttack
{
	Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self 00000000 )
	Set		*Var[8]  *Var[0] 
	Call	SetTargetActor	( .Actor:Self .Actor:Player )
	Call	UseBattleCamPreset	( 0000000E )
	Call	BattleCamTargetActor	( .Actor:Self )
	Call	MoveBattleCamOver		( 0000000F )
	Wait	0000000F 
	Call	SetAnimation	( .Actor:Self 00000001 0062000A )
	Wait	00000005 
	Call	PlaySoundAtActor	( .Actor:Self 000020D4 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	GetStatusFlags	( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Add		*Var[1] 0000000C 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Else
		Add		*Var[1] 0000001F 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	EndIf
	Wait	0000001E 
	Call	SetAnimation	( .Actor:Self 00000001 00620002 )
	Wait	00000005 
	Thread
		Wait	0000000A 
		Call	PlaySoundAtActor 	( *Var[8] 000002DD )
	EndThread
	Thread
		Call	8026BF48	( 00000001 )
		Call	BoostAttack 	( *Var[8] 00000003 )
		Call	8026BF48	( 00000000 )
	EndThread
	Call	WaitForBuffDone ( )
	Call	UseBattleCamPreset 	( 00000002 )
	Wait	0000000A 
	Call	YieldTurn ( )
	Call	EnableIdleScript 	( .Actor:Self 00000001 )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}

#new:Script $Script_TakeTurn_Red
{
	Call	ActorExists	( .Actor:Enemy0 *Var[0] )
	If  *Var[0]  ==  .True
		Call	GetActorAttackBoost	( .Actor:Enemy0 *Var[0] )
		If  *Var[0]  <  00000005
			Call	RandInt	( 100` *Var[0] )
			If  *Var[0]  <  40`
				Set  *Var[0]  .Actor:Enemy0
				ExecWait	$Script_BoostAttack
				Return
			EndIf
		EndIf
	EndIf
	ExecWait	$Script_JumpAttack_Red
	Return
	End
}

% ====================================================
% Actor: Goomba King
% ====================================================

#new:Actor $GoombaKing
{
% stats
[Index]        92b 
[Level]        50`b 
[MaxHP]       100`b 
[Coins]         0`b 
[Flags]       00000000 
[StatusTable] $StatusTable_King 
% ai
[PartsCount]   2`s 
[PartsTable] $PartsTable_King 
[Script]      $Script_Init_King 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]  3`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]         56`b  80`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]   -6`b  38`b % dx dy
[StatusIcon]   12`b  75`b % dx dy
}

#new:PartsTable $PartsTable_King
{
00020020 01000000 E70F00FF $IdleAnimations_King $DefenseTable_King 00000000 00000000 00000000 00000000 
00800020 02000000 005000FF 00000000 $DefenseTable_King 00000000 00000000 00000000 00000000 
}

#new:DefenseTable $DefenseTable_King
{
.Element:Normal 00000000
.Element:End
}

#new:IdleAnimations $IdleAnimations_King
{
.Status:Normal    00630001
.Status:Stone     00630000
.Status:Sleep     00630008
.Status:Poison    00630000
.Status:Stop      00630000
.Status:Static    00630000
.Status:Paralyze  00630000
.Status:Dizzy     00630007
.Status:End
}

#new:IdleAnimations $IdleAnimations_Shuffle_King
{
.Status:Normal    00630004
.Status:Stone     00630000
.Status:Sleep     00630008
.Status:Poison    00630000
.Status:Stop      00630000
.Status:Static    00630000
.Status:Paralyze  00630000
.Status:Dizzy     00630007
.Status:End
}

#new:StatusTable $StatusTable_King
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      50`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy      30`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze   30`
.Status:Shrink      0`
.Status:Stop       50`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod   0`
.Status:StaticTurnMod    -1`
.Status:ParalyzeTurnMod  -1`
.Status:ShrinkTurnMod    -1`
.Status:StopTurnMod      -1`
.Status:End
}

#new:Script $Script_Init_King
{
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_King )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_King )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_King )
   50:  Exec     $Script_Footstep_Shake *Var[0] 
   60:  Call     SetActorVar 	( .Actor:Self 00000004 *Var[0] )  % footstep shake script (killed on actor death)
   78:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 ) % no longer used
   90:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 ) % no longer used
   A8:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 ) % how much to shake screen when walking?
   D8:  Call     SetActorVar 	( .Actor:Self 00000005 00000000 ) % no longer used
   F0:  Call     SetActorVar 	( .Actor:Self 00000006 00000000 ) % no longer used
		If	*Flag_BeatRematch0  ==  .True
			Call	$Function_SetLevel	( $GoombaKing 0 )
		EndIf
  108:  Return
  110:  End
}

#new:Script $Script_Idle_King
{
    0:  Label    00000000 
    C:  Call     RandInt     	( 00000050 *Var[0] )
   20:  Add      *Var[0] 00000050 
   30:  Wait     *Var[0] 
   3C:  Label    00000001 
   48:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   5C:  If       *Var[0]  &  0035D000 
   6C:     Wait     00000001 
   78:     Goto     00000001 
   84:  EndIf
   8C:  Call     SetGoalToHome 	( .Actor:Self )
   9C:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   B8:  Add      *Var[0] 00000005 
   C8:  Call     SetActorIdleSpeed ( FFFFFF81 *Fixed[1.0] )
   DC:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Shuffle_King )
   F4:  Call     SetIdleGoal ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  110:  Call     IdleRunToGoal ( FFFFFF81 00000000 )
  124:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_King )
  13C:  Wait     00000014 
  148:  Label    00000002 
  154:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  168:  If       *Var[0]  &  0035D000 
  178:     Wait     00000001 
  184:     Goto     00000002 
  190:  EndIf
  198:  Call     SetGoalToHome 	( .Actor:Self )
  1A8:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1C4:  Call     SetActorIdleSpeed ( FFFFFF81 *Fixed[1.0] )
  1D8:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_Shuffle_King )
  1F0:  Call     SetIdleGoal ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
  20C:  Call     IdleRunToGoal ( FFFFFF81 00000000 )
  220:  Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_King )
  238:  Wait     00000050 
  244:  Goto     00000000 
  250:  Return
  258:  End
}

#new:Script $Script_HandleEvent_King
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
   44:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   58:  Switch   *Var[0] 
   64:     Case     ==  .Event:HitCombo
   70:        SetConst *Var[0] 00000001 
   80:        SetConst *Var[1] 00630006 
   90:        ExecWait DoNormalHit 
   9C:     Case     ==  .Event:Hit
   A8:        SetConst *Var[0] 00000001 
   B8:        SetConst *Var[1] 00630006 
   C8:        ExecWait DoNormalHit 
   D4:     Case     ==  .Event:BurnHit
   E0:        SetConst *Var[0] 00000001 
   F0:        SetConst *Var[1] 0063000D 
  100:        SetConst *Var[2] 0063000E 
  110:        ExecWait DoBurnHit 
  11C:     Case     ==  .Event:SpinSmashHit
  128:        SetConst *Var[0] 00000001 
  138:        SetConst *Var[1] 00630006 
  148:        ExecWait 8029B998 
  154:     Case     ==  .Event:ShockHit
  160:        SetConst *Var[0] 00000001 
  170:        SetConst *Var[1] 00630006 
  180:        ExecWait DoShockHit 
  18C:        SetConst *Var[0] 00000001 
  19C:        SetConst *Var[1] 00630006 
  1AC:        ExecWait $Script_ShockJump_King 
  1B8:        SetConst *Var[0] 00000001 
  1C8:        SetConst *Var[1] 00630004 
  1D8:        ExecWait DoReturnHome 
  1E4:     Case     ==  .Event:ShockDeath
  1F0:        SetConst *Var[0] 00000001 
  200:        SetConst *Var[1] 00630006 
  210:        ExecWait DoShockHit 
  21C:        Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  234:        Kill     *Var[0] 
  240:        SetConst *Var[0] 00000001 
  250:        SetConst *Var[1] 00630006 
  260:        ExecWait $Script_Death_King 
  26C:        Return
  274:     CaseOR   ==  00000017
  280:     CaseOR   ==  .Event:Immune
  28C:        SetConst *Var[0] 00000001 
  29C:        SetConst *Var[1] 00630001 
  2AC:        ExecWait DoImmune 
  2B8:     EndCaseGroup
  2C0:     Case     ==  .Event:Death
  2CC:        SetConst *Var[0] 00000001 
  2DC:        SetConst *Var[1] 00630006 
  2EC:        ExecWait DoNormalHit 
  2F8:        Wait     0000000A 
  304:        Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  31C:        Kill     *Var[0] 
  328:        SetConst *Var[0] 00000001 
  338:        SetConst *Var[1] 00630006 
  348:        ExecWait $Script_Death_King 
  354:        Return
  35C:     Case     ==  .Event:BurnDeath
  368:        SetConst *Var[0] 00000001 
  378:        SetConst *Var[1] 0063000D 
  388:        SetConst *Var[2] 0063000E 
  398:        ExecWait DoBurnHit 
  3A4:        Wait     0000000A 
  3B0:        Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  3C8:        Kill     *Var[0] 
  3D4:        SetConst *Var[0] 00000001 
  3E4:        SetConst *Var[1] 0063000E 
  3F4:        ExecWait $Script_Death_King 
  400:        Return
  408:     Case     ==  .Event:SpinSmashDeath
  414:        SetConst *Var[0] 00000001 
  424:        SetConst *Var[1] 00630006 
  434:        ExecWait 8029B998 
  440:        Call     GetActorVar 	( .Actor:Self 00000004 *Var[0] )
  458:        Kill     *Var[0] 
  464:        SetConst *Var[0] 00000001 
  474:        SetConst *Var[1] 00630006 
  484:        ExecWait $Script_Death_King 
  490:        Return
  498:     Case     ==  .Event:SpikeContact
  4A4:        Call     SetAnimation 	( .Actor:Self 00000001 00630006 )
  4BC:        Wait     00000014 
  4C8:        Call     SetAnimation 	( .Actor:Self 00000001 00630004 )
  4E0:        Call     SetGoalToHome 	( .Actor:Self )
  4F0:        Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  504:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  51C:        Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  534:     Case     ==  .Event:EndFirstStrike
  540:        SetConst *Var[0] 00000001 
  550:        SetConst *Var[1] 00630001 
  560:        ExecWait DoReturnHome 
  56C:        Call     HPBarToHome 	( .Actor:Self )
  57C:     Case     ==  .Event:RecoverStatus
  588:        SetConst *Var[0] 00000001 
  598:        SetConst *Var[1] 00630001 
  5A8:        ExecWait DoRecover 
  5B4:     Default
  5BC:  EndSwitch
  5C4:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  5D8:  Call     UseIdleAnimation 	( .Actor:Self .True )
  5EC:  Return
  5F4:  End
}

#new:Script $Script_ShockJump_King
{
    0:  Call     UseBattleCamPreset 	( 00000002 )
   10:  Call     SetAnimation 	( .Actor:Self *Var[0] *Var[1] )
   28:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   44:  Set      *Var[1] 00000000 
   54:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   70:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.4003906] )
   84:  Call     AddGoalPos 	( .Actor:Self 0000001E 00000000 00000000 )
   A0:  Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
   C0:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
   D4:  Call     AddGoalPos 	( .Actor:Self 0000000F 00000000 00000000 )
   F0:  Call     JumpToGoal  	( .Actor:Self 00000008 00000000 00000001 00000000 )
  110:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
  124:  Call     AddGoalPos 	( .Actor:Self 00000005 00000000 00000000 )
  140:  Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  160:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
  174:  Return
  17C:  End
}
  
#new:Script $Script_TakeTurn_King
{
	Call	UseIdleAnimation 	( .Actor:Self .False )
	Call	EnableIdleScript 	( .Actor:Self 00000000 )
	Call	SetActorDispOffset 			( .Actor:Self 00000000 00000000 00000000 )
	Call	SetTargetActor		( .Actor:Self .Actor:Player )
	Call	SetGoalToTarget		( .Actor:Self )
	% chance to drop nuts on player if not dizzy or paralyzed
	Call	GetStatusFlags		( .Actor:Player *Var[0] )
	If	*Var[0] !&  00050000 
		Call	GetActorVar		( .Actor:Enemy3 .NutGrowthCounter *Var[0] )
		If  *Var[0]  <  0
			Call     RandInt	( 100` *Var[1] )
			If  *Var[1]  <  60`
				Call     SetActorVar 	( .Actor:Enemy3 .NutGrowthCounter .NutGrowthTurns )
				ExecWait $Script_DropNutsOnPlayer 
				Return
			EndIf
		EndIf
	EndIf
  % FIXME: throwing shrooms will crash the game, no idea why.
	% chance to throw shrooms at player if not dizzy, poisoned, or paralyzed
	%Call	GetStatusFlags		( .Actor:Player *Var[0] )
	%If	*Var[0] !&  00070000 
	%	Call     RandInt	( 100` *Var[0] )
	%	Switch *Var[0]
	%		Case  <  20`
	%			ExecWait	$Script_ThrowVoltShroom
	%			Return
	%		Case  <  40`
	%			ExecWait	$Script_ThrowPoisonShroom
	%			Return
	%	EndSwitch
	%EndIf
	ExecWait $Script_SpinAttack 
	Return
	End
}
	
#new:Script $Script_ThrowPoisonShroom
{
	SetConst *Var[A] 0000001B
	ExecWait $Script_UseItemEffect
	Call	CreateVirtualEntity	( *Var[A] $Drawable_PoisonShroom )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub  *Var[0]  35`
	Add  *Var[1]  20`
	Add  *Var[2]  5`
	Call	SetVirtualEntityPosition		( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call	SetAnimation	( .Actor:Self 00000001 00630005 )
	Wait	10`
	Call	PlaySound	( 000003FA )
	Wait	00000003 
	Thread
		Set  *Var[0] 00000000 
		Loop	00000012
			Add  *Var[0] FFFFFFC4 
			Call	SetVirtualEntityRotation ( *Var[A] 00000000 00000000 *Var[0] )
			Wait	00000001 
		EndLoop
	EndThread
	Call	EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000004 00000010 )
	Switch  *Var[0] 
		CaseOR  ==  00000006 
		CaseOR  ==  00000005 
			If  *Var[0]  ==  00000005 
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
			EndIf
			Call	SetVirtualEntityJumpGravity		( *Var[A] *Fixed[0.8] )
			Call	GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Sub  *Var[0]  20`
			Set  *Var[1]  16`
			Add  *Var[2]  5` 
			Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000012 )
			Wait	2
			Sub  *Var[0]  60` 
			Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
			Wait	2
			Sub  *Var[0]  30`
			Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
			Call	DeleteVirtualEntity		( *Var[A] )
			Call	EnableIdleScript 	( .Actor:Self .True )
			Call	UseIdleAnimation 	( .Actor:Self .True )
			Return
		EndCaseGroup
	EndSwitch
	Call	SetVirtualEntityJumpGravity		( *Var[A] *Fixed[0.8] )
	Call	GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add  *Var[2]  5` 
	Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000012 )
	Wait	1
	Call	EnemyDamageTarget 	( .Actor:Self *Var[A] 10000000 00000000 80020664 0000000B 00000020 )
	Sub  *Var[0]  60` 
	Set  *Var[1]  16`
	Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
	Wait	2
	Sub  *Var[0]  30` 
	Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
	Call	DeleteVirtualEntity		( *Var[A] )
	Call	EnableIdleScript 	( .Actor:Self .True )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_ThrowVoltShroom
{
	SetConst *Var[A] 0000008B
	ExecWait $Script_UseItemEffect
	Call	CreateVirtualEntity	( *Var[A] $Drawable_VoltShroom )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub  *Var[0]  35`
	Add  *Var[1]  20`
	Add  *Var[2]  5`
	Call	SetVirtualEntityPosition		( *Var[A] *Var[0] *Var[1] *Var[2] )
	Call	SetAnimation	( .Actor:Self 00000001 00630005 )
	Wait	10`
	Call	PlaySound	( 000003FA )
	Wait	00000003 
	Thread
		Set  *Var[0] 00000000 
		Loop	00000012
			Add  *Var[0] FFFFFFC4 
			Call	SetVirtualEntityRotation ( *Var[A] 00000000 00000000 *Var[0] )
			Wait	00000001 
		EndLoop
	EndThread
	Call	EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000004 00000010 )
	Switch  *Var[0] 
		CaseOR  ==  00000006 
		CaseOR  ==  00000005 
			If  *Var[0]  ==  00000005 
				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
			EndIf
			Call	SetVirtualEntityJumpGravity		( *Var[A] *Fixed[0.8] )
			Call	GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
			Sub  *Var[0]  20`
			Set  *Var[1]  16`
			Add  *Var[2]  5` 
			Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000012 )
			Wait	2
			Sub  *Var[0]  60` 
			Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
			Wait	2
			Sub  *Var[0]  30`
			Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
			Call	DeleteVirtualEntity		( *Var[A] )
			Call	EnableIdleScript 	( .Actor:Self .True )
			Call	UseIdleAnimation 	( .Actor:Self .True )
			Return
		EndCaseGroup
	EndSwitch
	Call	SetVirtualEntityJumpGravity		( *Var[A] *Fixed[0.8] )
	Call	GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add  *Var[2]  5` 
	Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000012 )
	Wait	1
	Call	EnemyDamageTarget 	( .Actor:Self *Var[A] 10000000 00000000 80010264 0000000B 00000020 )
	Sub  *Var[0]  60` 
	Set  *Var[1]  16`
	Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
	Wait	2
	Sub  *Var[0]  30` 
	Call	VirtualEntityJumpTo		( *Var[A] *Var[0] *Var[1] *Var[2] 00000010 )
	Call	DeleteVirtualEntity		( *Var[A] )
	Call	EnableIdleScript 	( .Actor:Self .True )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_UseItemEffect
{
	Wait     0000000A 
	Call     PlaySoundAtActor	( .Actor:Self 0000208D )
	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub  *Var[0]  40`
	Add  *Var[1]  60`
	Add  *Var[2]  5`
	Set  *Var[3]  *Var[1] 
	Add  *Var[3]  12`
	Call     PlayEffect  	( 00000033 00000001 *Var[0] *Var[3] *Var[2] *Fixed[1.0] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Call     MakeItemEntity ( *Var[A] *Var[0] *Var[1] *Var[2] 00000001 00000000 )
	Set  *Var[A]  *Var[0] 
	Wait     0000000F 
	Call     RemoveItemEntity 	( *Var[A] )
	Return
	End
}

#new:Unknown $Drawable_PoisonShroom
{
00000004 0000000D 00000001 0000003C $DisplayList_PoisonShroom 00000002 00000000 
}

#new:Unknown $Drawable_VoltShroom
{
00000004 0000000D 00000001 0000003C $DisplayList_VoltShroom 00000002 00000000 
}

#new:IntTable $DisplayList_PoisonShroom
{
E7000000 00000000 D7000002 FFFFFFFF FCFFFFFF FFFCF279 E3000C00 00080000 
E3000D01 00000000 E3000F00 00000000 E3001001 00000000 E3001201 00003000 
E3001402 00000C00 E3001001 00008000 FD100000 $Palette_PoisonShroom E8000000 00000000 
F5000100 07000000 E6000000 00000000 F0000000 0703C000 E7000000 00000000 
FD48000F $Raster_PoisonShroom F5480400 07000000 E6000000 00000000 F4000000 0703E07C 
E7000000 00000000 F5400400 00000000 F2000000 0007C07C D9FDFFFF 00000000 
D9DFFFFF 00000000 01004008 $VertexList_Quad 05000204 00000000 05000406 00000000 
E7000000 00000000 DF000000 00000000 
}

#new:IntTable $DisplayList_VoltShroom
{
E7000000 00000000 D7000002 FFFFFFFF FCFFFFFF FFFCF279 E3000C00 00080000 
E3000D01 00000000 E3000F00 00000000 E3001001 00000000 E3001201 00003000 
E3001402 00000C00 E3001001 00008000 FD100000 $Palette_VoltShroom E8000000 00000000 
F5000100 07000000 E6000000 00000000 F0000000 0703C000 E7000000 00000000 
FD48000F $Raster_VoltShroom F5480400 07000000 E6000000 00000000 F4000000 0703E07C 
E7000000 00000000 F5400400 00000000 F2000000 0007C07C D9FDFFFF 00000000 
D9DFFFFF 00000000 01004008 $VertexList_Quad 05000204 00000000 05000406 00000000 
E7000000 00000000 DF000000 00000000 
}

#new:IntTable $VertexList_Quad
{
FFF0FFF0 00000000 00000000 000000FF 
000FFFF0 00000000 04000000 000000FF 
000F000F 00000000 04000400 000000FF 
FFF0000F 00000000 00000400 000000FF 
}
	
#new:Unknown $Palette_PoisonShroom
{
294A0001 00010001 2009384F 598B81CB 88F1A2B5 71299931 C4F5E519 E5D9DEF5
}
	
#new:Unknown $Raster_PoisonShroom
{
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000
00000000 00066666 66666000 00000000 
00000000 00666666 66664450 04450000 
00000000 06667EEE EEE4FF45 4FF40000 
00000000 0667DDEE EED4FFF4 FFF40000 
00000000 066DDDEE EEDD4FFF FF400000 
00000000 066E66EE EE66E4FF F4500000 
00000005 566E66EE EE664FFF FF450000 
00000055 55AA66EE EE64FFF4 FFF40000 
00000555 8BBA66EE EE64FF48 4FF40000 
00000558 BBBBAAAA AAAA44BB 84400000 
000055BF C9BBBBBB BBBBBB9C FB550000 
000055FF FCBBBBBB BBBBBBCF FF550000 
000055FF FFBBBBBB BBBBBBFF FF550000 
000055FF FFBBB9CC CC9BBBFF FF550000 
000055FF FCBB9CFF FFC9BBCF FF550000 
000055BF C9BBCFFF FFFCBB9C FB550000 
00000558 BBBBCFFF FFFCBBBB 85500000 
00000555 8BBBCFFF FFFCBBB8 55500000 
00000055 58BBCFFF FFFCBB85 55000000 
00000005 55889CFF FFC98855 50000000 
00000000 555589CC CC985555 00000000 
00000000 05555555 55555550 00000000 
00000000 00055555 55555000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
}

#new:Unknown $Raster_VoltShroom
{
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00044444 41111110 00000000 
00000000 00444444 411A6111 00000000 
00000000 04443BBB BB1AA611 10000000 
00000000 044399BB BB91DD61 11000000 
00000000 044999BB BB916EE6 11100000 
00000000 044B44BB B11116EE 61110000 
00000002 244B44BB 1ADDDAEE E6110000 
00000022 246844BB 16DEEEEE ED610000 
00000222 688844BB B1ADEDA6 11110000 
00000226 88888888 881DEEDA 11220000 
00002268 88888888 8881DEED 61120000 
00002288 88888CFF FC881DEE A1110000 
000022FF FC888FFF FF8881DE D6110000 
000022FF FF888FFF FF888F1A EA110000 
000022FF FF888FFF FF888FF1 6A610000 
000022FF FF888CFF FC888FFF 11110000 
0000222F FC888888 88888CFF F1120000 
00000226 88888888 88888888 62200000 
00000222 68888CFF FC888886 22200000 
00000022 22668FFF FF886622 22000000 
00000002 22226FFF FF862222 20000000 
00000000 02222222 22222220 00000000 
00000000 00022222 22222000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
00000000 00000000 00000000 00000000 
}

#new:Unknown $Palette_VoltShroom
{
294A39C1 49C1A3D3 598B81CB AC858421 E581E4D9 E601E5D9 EE9FFFC3 FFDBEF79 
}

#new:Script $Script_SpinAttack
{
    0:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
   14:  If       *Var[0] !&  00080000 
   24:     Call     UseBattleCamPreset 	( 0000003F )
   34:     Call     AddBattleCamZoom  	( FFFFFF9C )
   44:     Call     SetBattleCamOffsetZ 	( 00000014 )
   54:     Call     BattleCamTargetActor ( .Actor:Self )
   64:     Call     MoveBattleCamOver 	( 0000001E )
   74:     Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   8C:  Else
   94:     Call     UseBattleCamPreset 	( 0000003F )
   A4:     Call     AddBattleCamZoom  	( FFFFFF9C )
   B4:     Call     BattleCamTargetActor ( .Actor:Self )
   C4:     Call     MoveBattleCamOver 	( 00000014 )
   D4:     Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   EC:  EndIf
   F4:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  108:  Call     GetStatusFlags ( .Actor:Self *Var[0] )
  11C:  If       *Var[0] !&  00080000 
  12C:     Call     SetGoalToTarget 	( .Actor:Self )
  13C:     Call     AddGoalPos 	( .Actor:Self 00000020 00000000 00000000 )
  158:  Else
  160:     Call     SetGoalToTarget 	( .Actor:Self )
  170:     Call     AddGoalPos 	( .Actor:Self 0000000C 00000000 00000000 )
  18C:  EndIf
  194:  Call     SetActorSpeed 	( .Actor:Self *Fixed[2.0] )
  1A8:  Call     SetAnimation 	( .Actor:Self 00000001 00630004 )
  1C0:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  1D8:  Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  1F0:  Wait     00000008 
  1FC:  Thread
  204:     Call     PlaySoundAtActor 	( .Actor:Self 000020ED )
  218:     Wait     0000000A 
  224:     Call     PlaySoundAtActor 	( .Actor:Self 000020ED )
  238:  EndThread
    Loop 3
  240:  Call     SetAnimation 	( .Actor:Self 00000001 00630005 )
  258:  Set      *Var[0] 00000000 
  268:  Loop     00000014 
  274:     Add      *Var[0] 00000012 
  284:     Call     SetActorYaw 	( .Actor:Self *Var[0] )
  298:     Wait     00000001 
  2A4:  EndLoop
  2AC:  Call     SetActorYaw 	( .Actor:Self 00000000 )
  2C0:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 )
  2E4:  Switch   *Var[A] 
  2F0:     CaseOR   ==  00000006 
  2FC:     CaseOR   ==  00000005 
  308:        If       *Var[A] ==  00000005 
  318:           Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  33C:        EndIf
  344:        Call     SetAnimation 	( .Actor:Self 00000001 00630007 )
  35C:        Set      *Var[0] 00000000 
  36C:        Loop     00000014 
  378:           Add      *Var[0] 00000012 
  388:           Call     SetActorYaw 	( .Actor:Self *Var[0] )
  39C:           Wait     00000001 
  3A8:        EndLoop
  3B0:        Call     SetActorYaw 	( .Actor:Self 00000000 )
  3C4:        Call     UseBattleCamPreset 	( 00000002 )
  3D4:        Call     MoveBattleCamOver 	( 00000014 )
  3E4:        Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  3FC:        Call     SetGoalToHome 	( .Actor:Self )
  40C:        Call     SetActorSpeed 	( .Actor:Self *Fixed[4.0] )
  420:        Call     SetAnimation 	( .Actor:Self 00000001 00630004 )
  438:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  450:        Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  468:        Call     EnableIdleScript 	( .Actor:Self 00000001 )
  47C:        Call     UseIdleAnimation 	( .Actor:Self .True )
  490:        Return
  498:     EndCaseGroup
  4A0:  EndSwitch
  4A8:  Call     UseBattleCamPreset 	( 00000002 )
  4B8:  Call     MoveBattleCamOver 	( 00000014 )
  4C8:  Wait     00000002 
  4D4:  Call     SetGoalToTarget 	( .Actor:Self )
  4E4:  Call     EnemyDamageTarget 	( .Actor:Self *Var[A] 00000000 00000000 00000000 00000007 00000020 )
  50C:  Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  528:  Call     SetActorYaw 	( .Actor:Self 00000000 )
  53C:  Call     SetActorDispOffset ( FFFFFF81 00000000 00000000 00000000 )
  558:  Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  EndLoop
  570:  Switch   *Var[A] 
  57C:     Default
  584:        Wait     00000014 
  590:        Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  5A8:        Call     SetGoalToHome 	( .Actor:Self )
  5B8:        Call     SetActorSpeed 	( .Actor:Self *Fixed[3.0] )
  5CC:        Call     SetAnimation 	( .Actor:Self 00000001 00630004 )
  5E4:        Call     RunToGoal   	( .Actor:Self 00000000 .False )
  5FC:        Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  614:  EndSwitch
  61C:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  630:  Call     UseIdleAnimation 	( .Actor:Self .True )
  644:  Return
  64C:  End
}

#new:Script $Script_DropNutsOnPlayer
{
    0:  Call     UseBattleCamPreset 	( 0000000F )
   10:  Call     BattleCamTargetActor ( .Actor:Self )
   20:  Call     MoveBattleCamOver 	( 00000028 )
   30:  Wait     0000000F 
   3C:  Call     8024ECF8 ( 00000000 00000001 00000000 )
   54:  Call     SetAnimation 	( .Actor:Self 00000001 00630009 )
   6C:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
   80:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   9C:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   B8:  Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
   D8:  Call     PlaySoundAtActor 	( .Actor:Self 000020B4 )
   EC:  Call     UseBattleCamPreset 	( 00000002 )
   FC:  Call     MoveBattleCamOver 	( 0000001E )
  10C:  Call     SetAnimation 	( .Actor:Self 00000001 00630000 )
  124:  Thread
  12C:     Call     StartRumble ( 0000000B )
  13C:     Call     GetStatusFlags ( .Actor:Self *Var[0] )
  150:     If       *Var[0] !&  00080000 
  160:        Call     ShakeCam    	( 00000001 00000000 0000000A *Fixed[4.0] )
  17C:     EndIf
  184:     Call     SetAnimation 	( .Actor:Self 00000001 00630001 )
  19C:     Call     PlayEffect  	( 00000014 00000000 FFFFFFB0 0000007D 00000000 00000064 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  1E0:     Call     PlayEffect  	( 00000014 00000000 FFFFFFF1 00000087 00000000 00000055 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  224:     Call     PlayEffect  	( 00000014 00000000 00000064 00000067 00000000 00000046 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  268:  EndThread
  270:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000002 00000010 )
  294:  Switch   *Var[A] 
  2A0:     CaseOR   ==  00000006 
  2AC:     CaseOR   ==  00000005 
  2B8:        Thread
  2C0:           Wait     0000000C 
  2CC:           Call     PlaySoundAtPart 	( .Actor:Enemy3 00000003 00000301 )
  2E4:        EndThread
  2EC:        Thread
  2F4:           Wait     0000000A 
  300:           Call     SetPartJumpGravity 	( .Actor:Enemy3 00000003 *Fixed[1.5] )
  318:           Call     GetPartOffset 	( .Actor:Enemy3 00000003 *Var[0] *Var[1] *Var[2] )
  338:           Call     FallPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 0000000E )
  35C:           Sub      *Var[0] 0000000C 
  36C:           Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 0000000A .True )
  394:           Sub      *Var[0] 00000007 
  3A4:           Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 00000007 .True )
  3CC:           Loop     00000014 
  3D8:              Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .False )
  3F4:              Wait     00000001 
  400:              Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .True )
  41C:              Wait     00000001 
  428:           EndLoop
  430:        EndThread
  438:        Thread
  440:           Wait     00000005 
  44C:           Call     PlaySoundAtPart 	( .Actor:Enemy3 00000004 00000301 )
  464:        EndThread
  46C:        Thread
  474:           Wait     00000003 
  480:           Call     SetPartJumpGravity 	( .Actor:Enemy3 00000004 *Fixed[1.5] )
  498:           Call     GetPartOffset 	( .Actor:Enemy3 00000004 *Var[0] *Var[1] *Var[2] )
  4B8:           Call     FallPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000F )
  4DC:           Sub      *Var[0] 0000000C 
  4EC:           Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000A .True )
  514:           Sub      *Var[0] 00000007 
  524:           Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 00000007 .True )
  54C:           Loop     00000014 
  558:              Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .False )
  574:              Wait     00000001 
  580:              Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .True )
  59C:              Wait     00000001 
  5A8:           EndLoop
  5B0:        EndThread
  5B8:        Thread
  5C0:           Wait     00000011 
  5CC:           Call     PlaySoundAtPart 	( .Actor:Enemy3 00000005 00000301 )
  5E4:        EndThread
  5EC:        Thread
  5F4:           Wait     0000000F 
  600:           Call     SetPartJumpGravity 	( .Actor:Enemy3 00000005 *Fixed[1.5] )
  618:           Call     GetPartOffset 	( .Actor:Enemy3 00000005 *Var[0] *Var[1] *Var[2] )
  638:           Call     FallPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000011 )
  65C:           Add      *Var[0] 0000000C 
  66C:           Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 0000000A .True )
  694:           Add      *Var[0] 00000007 
  6A4:           Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000007 .True )
  6CC:           Loop     00000014 
  6D8:              Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .False )
  6F4:              Wait     00000001 
  700:              Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .True )
  71C:              Wait     00000001 
  728:           EndLoop
  730:        EndThread
  738:        Wait     00000030 
  744:        If       *Var[A] ==  00000005 
  754:           Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  778:        EndIf
  780:        Call     EnableIdleScript 	( .Actor:Self 00000001 )
  794:        Call     UseIdleAnimation 	( .Actor:Self .True )
  7A8:        Return
  7B0:     EndCaseGroup
  7B8:  EndSwitch
  7C0:  Thread
  7C8:     Wait     0000000C 
  7D4:     Call     PlaySoundAtPart 	( .Actor:Enemy3 00000003 00000301 )
  7EC:  EndThread
  7F4:  Thread
  7FC:     Wait     0000000A 
  808:     Call     SetPartJumpGravity 	( .Actor:Enemy3 00000003 *Fixed[1.5] )
  820:     Call     GetPartOffset 	( .Actor:Enemy3 00000003 *Var[0] *Var[1] *Var[2] )
  840:     Call     FallPartTo 	( .Actor:Enemy3 00000003 *Var[0] 00000023 *Var[2] 0000000E )
  864:     Sub      *Var[0] 0000000C 
  874:     Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 0000000A .True )
  89C:     Sub      *Var[0] 00000007 
  8AC:     Call     JumpPartTo 	( .Actor:Enemy3 00000003 *Var[0] 0000000A *Var[2] 00000007 .True )
  8D4:     Loop     00000014 
  8E0:        Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .False )
  8FC:        Wait     00000001 
  908:        Call     SetPartFlagBits 	( .Actor:Enemy3 00000003 00000001 .True )
  924:        Wait     00000001 
  930:     EndLoop
  938:  EndThread
  940:  Thread
  948:     Wait     00000005 
  954:     Call     PlaySoundAtPart 	( .Actor:Enemy3 00000004 00000301 )
  96C:  EndThread
  974:  Thread
  97C:     Wait     00000003 
  988:     Call     SetPartJumpGravity 	( .Actor:Enemy3 00000004 *Fixed[1.5] )
  9A0:     Call     GetPartOffset 	( .Actor:Enemy3 00000004 *Var[0] *Var[1] *Var[2] )
  9C0:     Call     FallPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000F )
  9E4:     Sub      *Var[0] 0000000C 
  9F4:     Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 0000000A .True )
  A1C:     Sub      *Var[0] 00000007 
  A2C:     Call     JumpPartTo 	( .Actor:Enemy3 00000004 *Var[0] 0000000A *Var[2] 00000007 .True )
  A54:     Loop     00000014 
  A60:        Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .False )
  A7C:        Wait     00000001 
  A88:        Call     SetPartFlagBits 	( .Actor:Enemy3 00000004 00000001 .True )
  AA4:        Wait     00000001 
  AB0:     EndLoop
  AB8:  EndThread
  AC0:  Thread
  AC8:     Wait     00000011 
  AD4:     Call     PlaySoundAtPart 	( .Actor:Enemy3 00000005 00000301 )
  AEC:  EndThread
  AF4:  Thread
  AFC:     Wait     0000000F 
  B08:     Call     SetPartJumpGravity 	( .Actor:Enemy3 00000005 *Fixed[1.5] )
  B20:     Call     GetPartOffset 	( .Actor:Enemy3 00000005 *Var[0] *Var[1] *Var[2] )
  B40:     Call     FallPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000011 )
  B64:     Add      *Var[0] 0000000C 
  B74:     Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 0000000A .True )
  B9C:     Add      *Var[0] 00000007 
  BAC:     Call     JumpPartTo 	( .Actor:Enemy3 00000005 *Var[0] 0000000A *Var[2] 00000007 .True )
  BD4:     Loop     00000014 
  BE0:        Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .False )
  BFC:        Wait     00000001 
  C08:        Call     SetPartFlagBits 	( .Actor:Enemy3 00000005 00000001 .True )
  C24:        Wait     00000001 
  C30:     EndLoop
  C38:  EndThread
  C40:  Wait     00000018 
  C4C:  Wait     00000002 
  C58:  Call     SetGoalToTarget 	( .Actor:Self )
  C68:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 80040240 0000000B 00000020 )
  C90:  Switch   *Var[0] 
  C9C:     Case     ==  0000000A 
  CA8:        Return
  CB0:  EndSwitch
  CB8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  CCC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  CE0:  Return
  CE8:  End
}

#new:Script $Script_Footstep_Shake
{
    0:  Label    00000000 
    C:  Wait     00000001 
   18:  Call     GetAnimation 	( .Actor:Self 00000001 *Var[0] )
   30:  If       *Var[0] !=  00630004 
   40:     Goto     00000000 
   4C:  EndIf
   54:  Call     GetAnimation 	( .Actor:Self 00000001 *Var[0] )
   6C:  If       *Var[0] !=  00630004 
   7C:     Goto     00000000 
   88:  EndIf
   90:  Call     StartRumble ( 00000001 )
   A0:  Call     8026DF88 ( FFFFFF81 00000001 *Var[0] )
   B8:  If       *Var[0] ==  00000001 
   C8:     Call     GetActorVar 	( .Actor:Self 00000002 *Var[0] )
   E0:     If       *Var[0] ==  00000000 
   F0:        Call     GetStatusFlags ( .Actor:Self *Var[0] )
  104:        If       *Var[0] !&  00080000 
  114:           Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.20019531] )
  130:        EndIf
  138:     Else
  140:        Call     GetStatusFlags ( .Actor:Self *Var[0] )
  154:        If       *Var[0] !&  00080000 
  164:           Call     ShakeCam    	( 00000001 00000000 00000002 *Fixed[0.7001953] )
  180:        EndIf
  188:     EndIf
  190:  EndIf
  198:  Goto     00000000 
  1A4:  Return
  1AC:  End
}

#new:Script $Script_Death_King
{
    0:  Call     8027D32C ( FFFFFF81 )
   10:  Call     UseIdleAnimation 	( .Actor:Self .False )
   24:  Set      *Var[2] 00000000 
   34:  Call     SetAnimation 	( .Actor:Self *Var[0] *Var[1] )
   4C:  Wait     0000000A 
   58:  Loop     00000018 
   64:     Call     SetActorYaw 	( .Actor:Self *Var[2] )
   78:     Add      *Var[2] 0000001E 
   88:     Wait     00000001 
   94:  EndLoop
   9C:  Call     SetActorYaw 	( .Actor:Self 00000000 )
   B0:  Call     GetActorPos 	( .Actor:Self *Var[2] *Var[3] *Var[4] )
   CC:  Call     PlayEffect  	( 00000001 *Var[2] *Var[3] *Var[4] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  110:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:Death )
  124:  Call     DropStarPoints ( FFFFFF81 )
  134:  Set      *Var[3] 00000000 
  144:  Loop     0000000C 
  150:     Call     SetActorRotation 	( .Actor:Self *Var[3] 00000000 00000000 )
  16C:     Add      *Var[3] 00000008 
  17C:     Wait     00000001 
  188:  EndLoop
  190:  Call     SetPartFlagBits 	( .Actor:Self 00000001 00000001 .True )
  1AC:  Call     SetActorFlagBits 	( .Actor:Self 00000004 .True )
  1C4:  Wait     0000001E 
  1D0:  Call     ActorExists 	( .Actor:Enemy1 *Var[0] )
  1E4:  If       *Var[0] ==  00000001 
  1F4:     Call     GetActorHP  	( .Actor:Enemy1 *Var[0] )
  208:  EndIf
  210:  If       *Var[0] !=  00000000 
  220:     Call     UseIdleAnimation 	( .Actor:Enemy1 .False )
  234:     Call     EnableIdleScript 	( .Actor:Enemy1 00000000 )
  248:     Call     ActorSpeak  	( 000B00CF .Actor:Enemy1 00000001 0062000B 0062000B ) % Oh no! It can't be! King Goomba!!
  268:     Call     EnableIdleScript 	( .Actor:Enemy1 00000001 )
  27C:     Call     UseIdleAnimation 	( .Actor:Enemy1 .True )
  290:  EndIf
  298:  Call     ActorExists 	( .Actor:Enemy2 *Var[0] )
  2AC:  If       *Var[0] ==  00000001 
  2BC:     Call     GetActorHP  	( .Actor:Enemy2 *Var[0] )
  2D0:  EndIf
  2D8:  If       *Var[0] !=  00000000 
  2E8:     Call     UseIdleAnimation 	( .Actor:Enemy2 .False )
  2FC:     Call     EnableIdleScript 	( .Actor:Enemy2 00000000 )
  310:     Call     ActorSpeak  	( 000B00D0 .Actor:Enemy2 00000001 0062010B 0062010B ) % I don't believe it! He beat our King Goomba!
  330:     Call     EnableIdleScript 	( .Actor:Enemy2 00000001 )
  344:     Call     UseIdleAnimation 	( .Actor:Enemy2 .True )
  358:  EndIf
  360:  Call     RemoveActor 	( .Actor:Self )
  370:  Return
  378:  End
}

% ====================================================
% Actor: Goomnut Tree
% ====================================================

#new:Actor $GoomnutTree
{
% stats
[Index]        93b 
[Level]         1`b 
[MaxHP]        -1`b 
[Coins]         0`b 
[Flags]       02004004 
[StatusTable] $StatusTable_Tree 
% ai
[PartsCount]   5`s 
[PartsTable] $PartsTable_Tree 
[Script]      $Script_Init_Tree 
% move effectiveness
[Escape]        0`b 
[Item]          0`b 
[AirLift]       0`b 
[Hurricane]     0`b % Bow's "Spook" as well
[UpAndAway]     0`b 
[PowerBounce]   0`b 
[SpinSmash]     4`b % weight (0-4)
% ui positions
[Size]          0`b   0`b % width height
[HealthBar]     0`b   0`b % dx dy
[StatusTurn]    0`b   0`b % dx dy
[StatusIcon]    0`b   0`b % dx dy
}

#new:PartsTable $PartsTable_Tree
{
00800000 01000000 000A00FF 00000000 $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 02000000 000A00FF $IdleAnimations_Tree $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 03000000 000A00FF $IdleAnimations_Tree $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 04000000 000A00FF $IdleAnimations_Tree $DefenseTable_Tree 00000000 00000000 00000000 00000000 
00120000 05000000 000A00FF $IdleAnimations_Tree $DefenseTable_Tree 00000000 00000000 00000000 00000000 
}

#new:IdleAnimations $IdleAnimations_Tree
{
.Status:Normal    00640000
.Status:End
}

#new:DefenseTable $DefenseTable_Tree
{
.Element:Normal 00000063
.Element:End
}

#new:StatusTable $StatusTable_Tree
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep       0`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy       0`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink      0`
.Status:Stop        0`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod      0`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   0`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

#define .NutGrowthCounter 00000006
#define .NutGrowthTurns 00000003

#new:Script $Script_Init_Tree
{
        Set      *Var[A]   00000000
        Set      *Var[B]   00000000
    0:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_Tree )
    0:  Call     BindNextTurn 	( .Actor:Self $Script_NextTurn_Tree )
   14:  Call     BindIdle    	( .Actor:Self $Script_Idle_Tree )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_Tree )
   3C:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 ) % no longer used
   54:  Call     SetActorVar 	( .Actor:Self 00000001 00000000 ) % no longer used
   6C:  Call     SetActorVar 	( .Actor:Self 00000002 00000000 ) % no longer used
   84:  Call     SetActorVar 	( .Actor:Self 00000003 00000000 ) % no longer used
   9C:  Call     SetActorVar 	( .Actor:Self 00000004 00000000 ) % no longer used
   B4:  Call     SetActorVar 	( .Actor:Self 00000005 00000000 ) % dropped nut on Goombas
   CC:  Call     SetActorVar 	( .Actor:Self .NutGrowthCounter -1` ) % turns before nuts regrow
   E4:  Call     SetPartPos 	( .Actor:Self 00000002 0000000A 0000008C 0000000A )
  104:  Call     SetPartPos 	( .Actor:Self 00000003 FFFFFFA1 0000008C 0000000A )
  124:  Call     SetPartPos 	( .Actor:Self 00000004 FFFFFF8D 00000082 00000000 )
  144:  Call     SetPartPos 	( .Actor:Self 00000005 FFFFFFBF 00000076 00000005 )
  164:  Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.5] *Fixed[0.5] *Fixed[1.0] )
  184:  Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.5] *Fixed[0.5] *Fixed[1.0] )
  1A4:  Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.5] *Fixed[0.5] *Fixed[1.0] )
  1C4:  Call     SetPartTargetFlagBits ( FFFFFF81 00000001 00000004 00000001 )
  1E0:  Return
  1E8:  End
}

#new:Script $Script_NextTurn_Tree
{
	Call	GetBattlePhase ( *Var[0] )
	If  *Var[0]  ==  .Phase:EnemyEnd
		Call	GetActorVar	( .Actor:Self .NutGrowthCounter *Var[0] )
		Sub		*Var[0]  1
		Call	SetActorVar	( .Actor:Self .NutGrowthCounter *Var[0] )
		If  *Var[0]  ==  0
			Call     SetPartPos 	( .Actor:Self 00000003 FFFFFFA1 0000008C 0000000A )
			Call     SetPartPos 	( .Actor:Self 00000004 FFFFFF8D 00000082 00000000 )
			Call     SetPartPos 	( .Actor:Self 00000005 FFFFFFBF 00000076 00000005 )
			Call     SetPartScale ( .Actor:Self 00000003 *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
			Call     SetPartScale ( .Actor:Self 00000004 *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
			Call     SetPartScale ( .Actor:Self 00000005 *Fixed[0.0] *Fixed[0.0] *Fixed[1.0] )
			Call     SetPartFlagBits 	( .Actor:Self 00000003 00000001 .False )
			Call     SetPartFlagBits 	( .Actor:Self 00000004 00000001 .False )
			Call     SetPartFlagBits 	( .Actor:Self 00000005 00000001 .False )
			%/% regrow nuts
			Call     MakeLerp	( 0` 50` 30` 00000000 )
			Label    1
				Call	UpdateLerp  	( )
				DivF	*Var[0]  100`
				Call	SetPartScale	( .Actor:Self 00000003 *Var[0] *Var[0] *Fixed[1.0] )
				Call	SetPartScale	( .Actor:Self 00000004 *Var[0] *Var[0] *Fixed[1.0] )
				Call	SetPartScale	( .Actor:Self 00000005 *Var[0] *Var[0] *Fixed[1.0] )
				Wait     1 
			If  *Var[1]  ==  .True 
				Goto     1
			EndIf
			%/
		EndIf
	EndIf
	Return
	End
}
  
#new:Script $Script_Idle_Tree
{
    0:  Return
    8:  End
}

#new:Script $Script_HandleEvent_Tree
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetLastElement ( *Var[E] )
   38:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   4C:  Switch   *Var[0] 
   58:     CaseOR   ==  .Event:HitCombo
   64:     CaseOR   ==  00000017
   70:        ExecWait $Script_HitTree 
   7C:     EndCaseGroup
   84:     CaseOR   ==  .Event:Hit
   90:     CaseOR   ==  .Event:Immune
   9C:        ExecWait $Script_HitTree 
              If *Var[A] == 00000000
   A8:          ExecWait $Script_DropNutOnGoombas 
                Set *Var[A] 00000001
              EndIf
   B4:     EndCaseGroup
   BC:     Case     ==  .Event:SpinSmashHit
              ExecWait $Script_HitTree 
              If *Var[A] == 00000000
   D4:          ExecWait $Script_DropNutOnGoombas 
                Set *Var[A] 00000001
              EndIf
   E0:     Case     ==  .Event:Death
   EC:        ExecWait $Script_HitTree 
   F8:     Case     ==  .Event:SpinSmashDeath
  104:        ExecWait $Script_HitTree 
  110:     Case     ==  .Event:SpikeContact
  11C:     Case     ==  .Event:ShockHit
  128:     Case     ==  .Event:EndFirstStrike
  134:     Default
  13C:  EndSwitch
  144:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  158:  Call     UseIdleAnimation 	( .Actor:Self .True )
  16C:  Return
  174:  End
}

#new:Script $Script_TakeTurn_Tree
{
    0:  Switch   *Var[0] 
    C:     Case     ==  00000006 
   18:        Return
   20:  EndSwitch
   28:  Switch   *Var[0] 
   34:     Case     ==  00000000 
   40:     Case     ==  0000000A 
   4C:  EndSwitch
   54:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
   68:  Call     UseIdleAnimation 	( .Actor:Self .True )
   7C:  Return
   84:  End
}

#new:Script $Script_HitTree
{
    0:  Set      *Var[0] $ShakeTreeEvent 
   10:  ExecWait $Script_ShakeTree 
   1C:  Return
   24:  End
}
  
#new:Unknown $ShakeTreeEvent
{
$ModelList_Leaves
$ModelList_Trunk
00000000
$Effect_Vectors
00000000 
}

#new:Unknown $ModelList_Leaves
{
00000002
00000021 00000024 
}

#new:Unknown $ModelList_Trunk
{
00000003
00000026 00000027 00000028 
}

#new:Unknown $Effect_Vectors
{
00000002
FFFFFFF6 0000008C 00000000
00000064 0000008C 00000000 
}

#new:Script $Script_ShakeTree
{
    0:  SetTimescale *Fixed[2.0] 
    C:  UseIntBuffer *Var[0] 
   18:  Get4Int  *Var[1] *Var[2] *Var[3] *Var[4] 
   30:  Get1Int  *Var[5] 
   3C:  Call     GetActorPos 	( .Actor:Player *Var[6] *Var[F] *Var[8] )
   58:  Call     PlaySound   	( 00000165 )
   68:  Call     PlaySound   	( 00000166 )
   78:  Thread
   80:     Set      *Flag[00] 00000000 
   90:     If       *Var[1] !=  00000000 
   A0:        Wait     00000001 
   AC:        Loop     00000005 
   B8:           UseIntBuffer *Var[1] 
   C4:           Get1Int  *Var[2] 
   D0:           Loop     *Var[2] 
   DC:              Get1Int  *Var[3] 
   E8:              Call     $Function_80218B80 ( *Var[3] *Fixed[0.10058594] *Fixed[0.20019531] *Var[F] 00000000 )
  108:              If       *Flag[00] ==  00000000 
  118:                 Set      *Flag[00] 00000001 
  128:                 Call     PlaySoundAtModel 	( *Var[3] 00000166 00000000 )
  140:              EndIf
  148:           EndLoop
  150:           Wait     00000001 
  15C:           UseIntBuffer *Var[1] 
  168:           Get1Int  *Var[2] 
  174:           Loop     *Var[2] 
  180:              Get1Int  *Var[3] 
  18C:              Call     $Function_80218B80 ( *Var[3] *Fixed[0.10058594] *Fixed[-0.19921875] *Var[F] 00000000 )
  1AC:           EndLoop
  1B4:           Wait     00000001 
  1C0:        EndLoop
  1C8:        UseIntBuffer *Var[1] 
  1D4:        Get1Int  *Var[2] 
  1E0:        Loop     *Var[2] 
  1EC:           Get1Int  *Var[3] 
  1F8:           Call     TranslateModel ( *Var[3] 00000000 00000000 00000000 )
  214:        EndLoop
  21C:        Wait     00000001 
  228:     EndIf
  230:  EndThread
  238:  Thread
  240:     Set      *Flag[00] 00000000 
  250:     If       *Var[2] !=  00000000 
  260:        Loop     00000005 
  26C:           UseIntBuffer *Var[2] 
  278:           Get1Int  *Var[3] 
  284:           Loop     *Var[3] 
  290:              Get1Int  *Var[4] 
  29C:              Call     $Function_80218B80 ( *Var[4] *Fixed[0.10058594] *Fixed[0.20019531] *Var[F] 00000000 )
  2BC:              If       *Flag[00] ==  00000000 
  2CC:                 Set      *Flag[00] 00000001 
  2DC:                 Call     PlaySoundAtModel 	( *Var[4] 00000165 00000000 )
  2F4:              EndIf
  2FC:           EndLoop
  304:           Wait     00000001 
  310:           UseIntBuffer *Var[2] 
  31C:           Get1Int  *Var[3] 
  328:           Loop     *Var[3] 
  334:              Get1Int  *Var[4] 
  340:              Call     $Function_80218B80 ( *Var[4] *Fixed[0.10058594] *Fixed[-0.19921875] *Var[F] 00000000 )
  360:           EndLoop
  368:           Wait     00000001 
  374:        EndLoop
  37C:        UseIntBuffer *Var[2] 
  388:        Get1Int  *Var[3] 
  394:        Loop     *Var[3] 
  3A0:           Get1Int  *Var[4] 
  3AC:           Call     TranslateModel ( *Var[4] 00000000 00000000 00000000 )
  3C8:        EndLoop
  3D0:        Wait     00000001 
  3DC:     EndIf
  3E4:  EndThread
  3EC:  Thread
  3F4:     If       *Var[4] !=  00000000 
  404:        UseIntBuffer *Var[4] 
  410:        Get1Int  *Var[5] 
  41C:        Loop     *Var[5] 
  428:           Get3Int  *Var[6] *Var[7] *Var[8] 
  43C:           Call     PlayEffect  	( 00000014 00000000 *Var[6] *Var[7] *Var[8] 00000064 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  480:        EndLoop
  488:     EndIf
  490:  EndThread
  498:  Wait     0000000F 
  4A4:  Return
  4AC:  End
}

#new:Script $Script_DropNutOnGoombas
{
    0:  Call     PlayEffect  	( 00000014 00000000 FFFFFFE7 00000078 00000000 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
   44:  Call     GetActorVar 	( .Actor:Self 00000005 *Var[0] )
   5C:  If       *Var[0] !=  00000000 
   6C:     Return
   74:  EndIf
   7C:  Call     UseBattleCamPreset 	( 0000000F )
   8C:  Call     BattleCamTargetActor ( .Actor:Enemy0 )
   9C:  Wait     00000014 
   A8:  Call     SetActorVar 	( .Actor:Self 00000005 00000001 )
   C0:  Call     ActorExists 	( .Actor:Enemy0 *Var[0] )
   D4:  If       *Var[0] ==  00000000 
   E4:     Call     SetGoalPos 	( .Actor:Self 0000000A 00000000 0000000A )
  100:     Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  11C:     Call     PlaySoundAtPart 	( .Actor:Self 00000002 00000301 )
  134:     Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.80078125] )
  14C:     Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[4.0] )
  164:     Call     FallPartTo 	( .Actor:Self 00000002 0000000A 00000014 0000000A 00000014 )
  188:     Call     JumpPartTo 	( .Actor:Self 00000002 0000001E 00000014 0000000A 0000000A .True )
  1B0:     Call     JumpPartTo 	( .Actor:Self 00000002 00000028 00000014 0000000A 00000005 .True )
  1D8:     Loop     00000014 
  1E4:        Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  200:        Wait     00000001 
  20C:        Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  228:        Wait     00000001 
  234:     EndLoop
  23C:     Return
  244:  EndIf
  24C:  Call     PlaySoundAtPart 	( .Actor:Self 00000002 00000301 )
  264:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.80078125] )
  27C:  Call     SetPartMoveSpeed ( .Actor:Self 00000002 *Fixed[4.0] )
  294:  Call     GetStatusFlags ( .Actor:Enemy0 *Var[0] )
  2A8:  If       *Var[0] !&  00080000 
  2B8:     Call     FallPartTo 	( .Actor:Self 00000002 0000000A 00000050 0000000A 0000000A )
  2DC:  Else
  2E4:     Call     FallPartTo 	( .Actor:Self 00000002 0000000A 00000020 0000000A 0000000A )
  308:  EndIf
  310:  Call     UseBattleCamPreset 	( 00000002 )
  320:  Call     MoveBattleCamOver 	( 0000001E )
  330:  Call     SetOwnerTarget ( 00000200 00000002 )
  344:  Call     SetGoalToTarget 	( .Actor:Self )
  354:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000003 00000020 )
  37C:  Call     ActorExists 	( .Actor:Enemy1 *Var[0] )
  390:  If       *Var[0] ==  00000000 
  3A0:     Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  3C0:     Add      *Var[0] 00000041 
  3D0:     Set      *Var[1] 00000014 
  3E0:     Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  3F8:     Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  420:     Add      *Var[0] 0000000C 
  430:     Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000008 .True )
  458:     Loop     00000014 
  464:        Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  480:        Wait     00000001 
  48C:        Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  4A8:        Wait     00000001 
  4B4:     EndLoop
  4BC:     Return
  4C4:  EndIf
  4CC:  Call     GetActorPos 	( .Actor:Enemy1 *Var[0] *Var[1] *Var[2] )
  4E8:  Call     GetStatusFlags ( .Actor:Enemy1 *Var[3] )
  4FC:  If       *Var[3] !&  00080000 
  50C:     Add      *Var[1] 00000032 
  51C:  Else
  524:     Add      *Var[1] 00000014 
  534:  EndIf
  53C:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  554:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  57C:  Call     SetOwnerTarget ( 00000201 00000001 )
  590:  Call     SetGoalToTarget 	( .Actor:Self )
  5A0:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000003 00000020 )
  5C8:  Call     ActorExists 	( .Actor:Enemy2 *Var[0] )
  5DC:  If       *Var[0] ==  00000000 
  5EC:     Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  60C:     Add      *Var[0] 00000023 
  61C:     Set      *Var[1] 00000014 
  62C:     Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  644:     Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  66C:     Add      *Var[0] 0000000C 
  67C:     Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000008 .True )
  6A4:     Loop     00000014 
  6B0:        Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  6CC:        Wait     00000001 
  6D8:        Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  6F4:        Wait     00000001 
  700:     EndLoop
  708:     Return
  710:  EndIf
  718:  Call     GetActorPos 	( .Actor:Enemy2 *Var[0] *Var[1] *Var[2] )
  734:  Call     GetStatusFlags ( .Actor:Enemy2 *Var[3] )
  748:  If       *Var[3] !&  00080000 
  758:     Add      *Var[1] 00000032 
  768:  Else
  770:     Add      *Var[1] 00000014 
  780:  EndIf
  788:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  7A0:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  7C8:  Call     SetOwnerTarget ( 00000202 00000001 )
  7DC:  Call     SetGoalToTarget 	( .Actor:Self )
  7EC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 08000000 00000000 00000000 00000003 00000020 )
  814:  Call     GetPartOffset 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  834:  Add      *Var[0] 00000014 
  844:  Set      *Var[1] 00000014 
  854:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[0.7001953] )
  86C:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  894:  Add      *Var[0] 0000000C 
  8A4:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000008 .True )
  8CC:  Loop     00000014 
  8D8:     Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  8F4:     Wait     00000001 
  900:     Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  91C:     Wait     00000001 
  928:  EndLoop
		%Call     SetPartFlags 	( .Actor:Self 00000001 00120000 )
  930:  Return
  938:  End
}
  
% ====================================================
% Boss Formation
% ====================================================

#new:Formation $Boss_Formation
{
$GoombaKing  $Pos_King 0000000A 00000000 00000000 00000000 00000000 
$RedGoomba   $Pos_Red  0000000A 00000000 00000000 00000000 00000000 
$BlueGoomba  $Pos_Blue 0000000A 00000000 00000000 00000000 00000000 
$GoomnutTree $Pos_Tree 0000000A 00000000 00000000 00000000 00000000 
}

#new:Vector3D $Pos_King
{
10` 0` 10`
}

#new:Vector3D $Pos_Red
{
70` 0` 30`
}

#new:Vector3D $Pos_Blue
{
125` 0` 20`
}

#new:Vector3D $Pos_Tree
{
-40` 0` -45`
}

#new:FormationTable $FormationTable
{
00000000 00000004 $Boss_Formation $Boss_Stage 00000000 
00000000 00000000 00000000 00000000 00000000
}

% ====================================================
% Boss Stage
% ====================================================

#new:StageTable $StageTable
{
00000000 00000000 
}
  
#new:Stage $Boss_Stage
{
"kmr_tex"
"kmr_bt06_shape"
"kmr_bt06_hit"
$Script_BeforeBattle
$Script_AfterBattle 
"kmr_bg"
$ForegroundModelList
00000000 
00000000 
00000000 
}

#new:ForegroundModelList $ForegroundModelList
{
0000001D 00000022 00000021 00000000 
}

#new:Script $Script_BeforeBattle
{
    0:  Call     SetSpriteShading 	( FFFFFFFF )
   10:  Call     $Function_80219708 ( )
   1C:  Set      *Var[0] 00000001 
   2C:  Set      *Var[2] 00000000 
   3C:  Exec     $Script_80225400 
   48:  Set      *Var[0] 00000004 
   58:  Set      *Var[2] 00000046 
   68:  Exec     $Script_80225400 
   74:  Return
   7C:  End
}

#new:Script $Script_AfterBattle
{
    0:  Return
    8:  End
}
	
#new:Script $Script_80225400
{
    0:  Set      *Var[A] *Var[0] 
   10:  Set      *Var[7] *Var[2] 
   20:  Mul      *Var[7] 0000000A 
   30:  Label    00000000 
   3C:  Add      *Var[7] 00000004 
   4C:  If       *Var[7]  >  00000E0F 
   5C:     Sub      *Var[7] 00000E10 
   6C:  EndIf
   74:  Call     $Function_802194A0 ( *Var[7] *Var[0] *Var[1] *Var[2] *Var[3] )
   94:  Call     TranslateModel ( *Var[A] *Var[0] *Var[1] *Var[2] )
   B0:  Call     RotateModel 	( *Var[A] *Var[3] 00000000 00000001 00000000 )
   D0:  Wait     00000001 
   DC:  Goto     00000000 
   E8:  Return
   F0:  End
}
   
#new:Function $Function_80219708
{
    0:  ADDIU     SP, SP, FFE8
    4:  ADDIU     A0, R0, 3D4
    8:  SW        RA, 10 (SP)
    C:  JAL       8011BB74
   10:  ADDIU     A1, R0, 3E8
   14:  ADDIU     A0, R0, F
   18:  ADDIU     A1, R0, 5
   1C:  ADDIU     A2, R0, 37
   20:  JAL       8011BB88
   24:  ADDIU     A3, R0, FF
   28:  JAL       8011BB50
   2C:  NOP
   30:  LW        RA, 10 (SP)
   34:  ADDIU     V0, R0, 2
   38:  JR        RA
   3C:  ADDIU     SP, SP, 18
}
   
#new:Function $Function_802194A0
{
    0:  ADDIU     SP, SP, FFA8
    4:  SW        S4, 20 (SP)
    8:  DADDU     S4, A0, R0
    C:  SW        RA, 24 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S1, 14 (SP)
   1C:  SW        S0, 10 (SP)
   20:  SDC1      F30, 50 (SP)
   24:  SDC1      F28, 48 (SP)
   28:  SDC1      F26, 40 (SP)
   2C:  SDC1      F24, 38 (SP)
   30:  SDC1      F22, 30 (SP)
   34:  SDC1      F20, 28 (SP)
   38:  LW        S0, C (S4)
   3C:  LW        A1, 0 (S0)
   40:  JAL       ~Func:get_variable
   44:  ADDIU     S0, S0, 4
   48:  MTC1      V0, F0
   4C:  NOP
   50:  CVT.D.W   F0, F0
   54:  LW        S1, 0 (S0)
   58:  ADDIU     S0, S0, 4
   5C:  LIF       F3, 2.5625
   64:  MTC1      R0, F2
   68:  LIO       AT, 40C90FD0
   70:  MTC1      AT, F20
   74:  LW        S3, 0 (S0)
   78:  DIV.D     F0, F0, F2
   7C:  CVT.S.D   F30, F0
   80:  MUL.S     F20, F30, F20
   84:  NOP
   88:  ADDIU     S0, S0, 4
   8C:  LW        S2, 0 (S0)
   90:  LIF       F0, 360.0
   98:  LW        S0, 4 (S0)
   9C:  DIV.S     F20, F20, F0
   A0:  JAL       8002A16C
   A4:  MOV.S     F12, F20
   A8:  LIF       F12, 8.0
   B0:  NOP
   B4:  MUL.S     F12, F20, F12
   B8:  NOP
   BC:  LIF       F28, 150.0
   C4:  NOP
   C8:  MUL.S     F22, F0, F28
   CC:  NOP
   D0:  MTC1      R0, F26
   D4:  JAL       8002A16C
   D8:  ADD.S     F22, F22, F26
   DC:  LIF       F2, 10.0
   E4:  NOP
   E8:  MUL.S     F24, F0, F2
   EC:  NOP
   F0:  MOV.S     F12, F20
   F4:  JAL       8002A1D0
   F8:  ADD.S     F24, F24, F26
   FC:  DADDU     A0, S4, R0
  100:  MUL.S     F20, F0, F28
  104:  NOP
  108:  DADDU     A1, S1, R0
  10C:  MFC1      A2, F22
  110:  LIF       F0, 20.0
  118:  LIF       F2, -50.0
  120:  DIV.S     F20, F20, F0
  124:  JAL       ~Func:set_float_variable
  128:  ADD.S     F20, F20, F2
  12C:  DADDU     A0, S4, R0
  130:  MFC1      A2, F24
  134:  JAL       ~Func:set_float_variable
  138:  DADDU     A1, S3, R0
  13C:  DADDU     A0, S4, R0
  140:  MFC1      A2, F20
  144:  JAL       ~Func:set_float_variable
  148:  DADDU     A1, S2, R0
  14C:  LIF       F0, 90.0
  154:  NOP
  158:  C.LT.S    F0, F30
  15C:  NOP
  160:  BC1F      .o190
  164:  DADDU     A2, R0, R0
  168:  LIF       F0, 270.0
  170:  NOP
  174:  C.LT.S    F30, F0
  178:  NOP
  17C:  BC1TL     .o184
  180:  ADDIU     A2, R0, B4
        .o184
  184:  LIF       F0, 90.0
  18C:  NOP
        .o190
  190:  SUB.S     F0, F0, F30
  194:  ABS.S     F0, F0
  198:  TRUNC.W.S F4, F0
  19C:  MFC1      V0, F4
  1A0:  NOP
  1A4:  SLTI      V0, V0, 2D
  1A8:  BEQ       V0, R0, .o1CC
  1AC:  NOP
  1B0:  LIF       F0, 45.0
  1B8:  NOP
  1BC:  SUB.S     F0, F30, F0
  1C0:  ADD.S     F0, F0, F0
  1C4:  TRUNC.W.S F4, F0
  1C8:  MFC1      A2, F4
        .o1CC
  1CC:  LIF       F0, 270.0
  1D4:  NOP
  1D8:  SUB.S     F0, F0, F30
  1DC:  ABS.S     F0, F0
  1E0:  TRUNC.W.S F4, F0
  1E4:  MFC1      V0, F4
  1E8:  NOP
  1EC:  SLTI      V0, V0, 2D
  1F0:  BEQ       V0, R0, .o224
  1F4:  DADDU     A0, S4, R0
  1F8:  LIF       F0, 225.0
  200:  NOP
  204:  SUB.S     F0, F30, F0
  208:  ADD.S     F0, F0, F0
  20C:  LIF       F2, 180.0
  214:  NOP
  218:  ADD.S     F0, F0, F2
  21C:  TRUNC.W.S F4, F0
  220:  MFC1      A2, F4
        .o224
  224:  JAL       ~Func:set_variable
  228:  DADDU     A1, S0, R0
  22C:  LW        RA, 24 (SP)
  230:  LW        S4, 20 (SP)
  234:  LW        S3, 1C (SP)
  238:  LW        S2, 18 (SP)
  23C:  LW        S1, 14 (SP)
  240:  LW        S0, 10 (SP)
  244:  LDC1      F30, 50 (SP)
  248:  LDC1      F28, 48 (SP)
  24C:  LDC1      F26, 40 (SP)
  250:  LDC1      F24, 38 (SP)
  254:  LDC1      F22, 30 (SP)
  258:  LDC1      F20, 28 (SP)
  25C:  ADDIU     V0, R0, 2
  260:  JR        RA
  264:  ADDIU     SP, SP, 58
}

% ====================================================
% Required Code
% ====================================================

#new:Function $Function_80218500
{
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MOV.S     F22, F12
    C:  SDC1      F20, 18 (SP)
   10:  SW        RA, 10 (SP)
   14:  JAL       80028FF0
   18:  MOV.S     F20, F14
   1C:  TRUNC.W.S F6, F20
   20:  MFC1      V0, F6
   24:  NOP
   28:  BLTZL     V0, .o30
   2C:  SUBU      V0, R0, V0
        .o30
   30:  MTC1      V0, F2
   34:  NOP
   38:  CVT.S.W   F2, F2
   3C:  DIV.S     F4, F2, F0
   40:  DADDU     A0, R0, R0
   44:  ADDIU     A2, R0, 5A
   48:  DADDU     A1, A0, R0
   4C:  LIA       A3, $FloatTable_8021DF84
   54:  ANDI      V0, A2, FFFF
        .o58
   58:  ANDI      V1, A0, FFFF
   5C:  SUBU      V0, V0, V1
   60:  SRL       V1, V0, 1F
   64:  ADDU      V0, V0, V1
   68:  SRA       V0, V0, 1
   6C:  ADDU      V1, A0, V0
   70:  ANDI      V0, V1, FFFF
   74:  SLL       V0, V0, 2
   78:  ADDU      V0, V0, A3
   7C:  LWC1      F0, 0 (V0)
   80:  C.LT.S    F0, F4
   84:  NOP
   88:  BC1FL     .o94
   8C:  DADDU     A2, V1, R0
   90:  DADDU     A0, V1, R0
        .o94
   94:  ADDIU     A1, A1, 1
   98:  ANDI      V0, A1, FFFF
   9C:  SLTIU     V0, V0, 7
   A0:  BNE       V0, R0, .o58
   A4:  ANDI      V0, A2, FFFF
   A8:  ANDI      V0, A0, FFFF
   AC:  SLL       V0, V0, 2
   B0:  ANDI      V1, A2, FFFF
   B4:  LTF       F2, V0 ($FloatTable_8021DF84)
   C0:  SLL       V1, V1, 2
   C4:  SUB.S     F2, F2, F4
   C8:  LTF       F0, V1 ($FloatTable_8021DF84)
   D4:  SUB.S     F0, F0, F4
   D8:  ABS.S     F2, F2
   DC:  ABS.S     F0, F0
   E0:  C.LT.S    F2, F0
   E4:  NOP
   E8:  BC1F      .oF4
   EC:  DADDU     V1, A2, R0
   F0:  DADDU     V1, A0, R0
        .oF4
   F4:  MTC1      R0, F0
   F8:  NOP
   FC:  C.LT.S    F22, F0
  100:  NOP
  104:  BC1F      .o130
  108:  NOP
  10C:  C.LE.S    F0, F20
  110:  NOP
  114:  BC1F      .o128
  118:  ADDIU     V0, R0, B4
  11C:  SUBU      V1, V0, V1
  120:  MTC1      R0, F0
  124:  NOP
        .o128
  128:  C.LT.S    F22, F0
  12C:  NOP
        .o130
  130:  BC1F      .o148
  134:  NOP
  138:  C.LT.S    F20, F0
  13C:  NOP
  140:  BC1TL     .o148
  144:  ADDIU     V1, V1, B4
        .o148
  148:  MTC1      R0, F0
  14C:  NOP
  150:  C.LE.S    F0, F22
  154:  NOP
  158:  BC1F      .o174
  15C:  NOP
  160:  C.LT.S    F20, F0
  164:  NOP
  168:  BC1F      .o174
  16C:  ADDIU     V0, R0, 168
  170:  SUBU      V1, V0, V1
        .o174
  174:  LW        RA, 10 (SP)
  178:  LDC1      F22, 20 (SP)
  17C:  LDC1      F20, 18 (SP)
  180:  ANDI      V0, V1, FFFF
  184:  JR        RA
  188:  ADDIU     SP, SP, 28
}

#new:Function $Function_GetRotationAngle_Blue
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S4, 20 (SP)
    8:  DADDU     S4, A0, R0
    C:  SW        RA, 24 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S1, 14 (SP)
   1C:  SW        S0, 10 (SP)
   20:  LW        S2, C (S4)
   24:  LW        A1, 0 (S2)
   28:  JAL       ~Func:get_variable
   2C:  ADDIU     S2, S2, 4
   30:  LW        A1, 0 (S2)
   34:  ADDIU     S2, S2, 4
   38:  DADDU     A0, S4, R0
   3C:  JAL       ~Func:get_variable
   40:  DADDU     S0, V0, R0
   44:  LW        A1, 0 (S2)
   48:  ADDIU     S2, S2, 4
   4C:  DADDU     A0, S4, R0
   50:  JAL       ~Func:get_variable
   54:  DADDU     S1, V0, R0
   58:  DADDU     S3, V0, R0
   5C:  LW        A1, 0 (S2)
   60:  ADDIU     S2, S2, 4
   64:  DADDU     A0, S4, R0
   68:  JAL       ~Func:get_variable
   6C:  SUBU      S3, S3, S0
   70:  DADDU     S0, V0, R0
   74:  DADDU     A0, S4, R0
   78:  LW        A1, 0 (S2)
   7C:  JAL       ~Func:get_variable
   80:  SUBU      S0, S0, S1
   84:  BNE       S3, R0, .oA0
   88:  NOP
   8C:  BNE       S0, R0, .oA0
   90:  DADDU     A0, S4, R0
   94:  LW        A1, 0 (S2)
   98:  BEQ       R0, R0, .oC8
   9C:  DADDU     A2, V0, R0
        .oA0
   A0:  MTC1      S3, F12
   A4:  NOP
   A8:  CVT.S.W   F12, F12
   AC:  MTC1      S0, F14
   B0:  NOP
   B4:  JAL       $Function_80218500
   B8:  CVT.S.W   F14, F14
   BC:  DADDU     A0, S4, R0
   C0:  LW        A1, 0 (S2)
   C4:  ADDIU     A2, V0, FFA6
        .oC8
   C8:  JAL       ~Func:set_variable
   CC:  NOP
   D0:  ADDIU     V0, R0, 2
   D4:  LW        RA, 24 (SP)
   D8:  LW        S4, 20 (SP)
   DC:  LW        S3, 1C (SP)
   E0:  LW        S2, 18 (SP)
   E4:  LW        S1, 14 (SP)
   E8:  LW        S0, 10 (SP)
   EC:  JR        RA
   F0:  ADDIU     SP, SP, 28
}

#new:Function $Function_802187B0
{
    0:  ADDIU     SP, SP, FFD8
    4:  SDC1      F22, 20 (SP)
    8:  MOV.S     F22, F12
    C:  SDC1      F20, 18 (SP)
   10:  SW        RA, 10 (SP)
   14:  JAL       80028FF0
   18:  MOV.S     F20, F14
   1C:  TRUNC.W.S F6, F20
   20:  MFC1      V0, F6
   24:  NOP
   28:  BLTZL     V0, .o30
   2C:  SUBU      V0, R0, V0
        .o30
   30:  MTC1      V0, F2
   34:  NOP
   38:  CVT.S.W   F2, F2
   3C:  DIV.S     F4, F2, F0
   40:  DADDU     A0, R0, R0
   44:  ADDIU     A2, R0, 5A
   48:  DADDU     A1, A0, R0
   4C:  LIA       A3, $FloatTable_8021F984
   54:  ANDI      V0, A2, FFFF
        .o58
   58:  ANDI      V1, A0, FFFF
   5C:  SUBU      V0, V0, V1
   60:  SRL       V1, V0, 1F
   64:  ADDU      V0, V0, V1
   68:  SRA       V0, V0, 1
   6C:  ADDU      V1, A0, V0
   70:  ANDI      V0, V1, FFFF
   74:  SLL       V0, V0, 2
   78:  ADDU      V0, V0, A3
   7C:  LWC1      F0, 0 (V0)
   80:  C.LT.S    F0, F4
   84:  NOP
   88:  BC1FL     .o94
   8C:  DADDU     A2, V1, R0
   90:  DADDU     A0, V1, R0
        .o94
   94:  ADDIU     A1, A1, 1
   98:  ANDI      V0, A1, FFFF
   9C:  SLTIU     V0, V0, 7
   A0:  BNE       V0, R0, .o58
   A4:  ANDI      V0, A2, FFFF
   A8:  ANDI      V0, A0, FFFF
   AC:  SLL       V0, V0, 2
   B0:  ANDI      V1, A2, FFFF
   B4:  LTF       F2, V0 ($FloatTable_8021F984)
   C0:  SLL       V1, V1, 2
   C4:  SUB.S     F2, F2, F4
   C8:  LTF       F0, V1 ($FloatTable_8021F984)
   D4:  SUB.S     F0, F0, F4
   D8:  ABS.S     F2, F2
   DC:  ABS.S     F0, F0
   E0:  C.LT.S    F2, F0
   E4:  NOP
   E8:  BC1F      .oF4
   EC:  DADDU     V1, A2, R0
   F0:  DADDU     V1, A0, R0
        .oF4
   F4:  MTC1      R0, F0
   F8:  NOP
   FC:  C.LT.S    F22, F0
  100:  NOP
  104:  BC1F      .o130
  108:  NOP
  10C:  C.LE.S    F0, F20
  110:  NOP
  114:  BC1F      .o128
  118:  ADDIU     V0, R0, B4
  11C:  SUBU      V1, V0, V1
  120:  MTC1      R0, F0
  124:  NOP
        .o128
  128:  C.LT.S    F22, F0
  12C:  NOP
        .o130
  130:  BC1F      .o148
  134:  NOP
  138:  C.LT.S    F20, F0
  13C:  NOP
  140:  BC1TL     .o148
  144:  ADDIU     V1, V1, B4
        .o148
  148:  MTC1      R0, F0
  14C:  NOP
  150:  C.LE.S    F0, F22
  154:  NOP
  158:  BC1F      .o174
  15C:  NOP
  160:  C.LT.S    F20, F0
  164:  NOP
  168:  BC1F      .o174
  16C:  ADDIU     V0, R0, 168
  170:  SUBU      V1, V0, V1
        .o174
  174:  LW        RA, 10 (SP)
  178:  LDC1      F22, 20 (SP)
  17C:  LDC1      F20, 18 (SP)
  180:  ANDI      V0, V1, FFFF
  184:  JR        RA
  188:  ADDIU     SP, SP, 28
}

#new:Function $Function_GetRotationAngle_Red
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S4, 20 (SP)
    8:  DADDU     S4, A0, R0
    C:  SW        RA, 24 (SP)
   10:  SW        S3, 1C (SP)
   14:  SW        S2, 18 (SP)
   18:  SW        S1, 14 (SP)
   1C:  SW        S0, 10 (SP)
   20:  LW        S2, C (S4)
   24:  LW        A1, 0 (S2)
   28:  JAL       ~Func:get_variable
   2C:  ADDIU     S2, S2, 4
   30:  LW        A1, 0 (S2)
   34:  ADDIU     S2, S2, 4
   38:  DADDU     A0, S4, R0
   3C:  JAL       ~Func:get_variable
   40:  DADDU     S0, V0, R0
   44:  LW        A1, 0 (S2)
   48:  ADDIU     S2, S2, 4
   4C:  DADDU     A0, S4, R0
   50:  JAL       ~Func:get_variable
   54:  DADDU     S1, V0, R0
   58:  DADDU     S3, V0, R0
   5C:  LW        A1, 0 (S2)
   60:  ADDIU     S2, S2, 4
   64:  DADDU     A0, S4, R0
   68:  JAL       ~Func:get_variable
   6C:  SUBU      S3, S3, S0
   70:  DADDU     S0, V0, R0
   74:  DADDU     A0, S4, R0
   78:  LW        A1, 0 (S2)
   7C:  JAL       ~Func:get_variable
   80:  SUBU      S0, S0, S1
   84:  BNE       S3, R0, .oA0
   88:  NOP
   8C:  BNE       S0, R0, .oA0
   90:  DADDU     A0, S4, R0
   94:  LW        A1, 0 (S2)
   98:  BEQ       R0, R0, .oC8
   9C:  DADDU     A2, V0, R0
        .oA0
   A0:  MTC1      S3, F12
   A4:  NOP
   A8:  CVT.S.W   F12, F12
   AC:  MTC1      S0, F14
   B0:  NOP
   B4:  JAL       $Function_802187B0
   B8:  CVT.S.W   F14, F14
   BC:  DADDU     A0, S4, R0
   C0:  LW        A1, 0 (S2)
   C4:  ADDIU     A2, V0, FFA6
        .oC8
   C8:  JAL       ~Func:set_variable
   CC:  NOP
   D0:  ADDIU     V0, R0, 2
   D4:  LW        RA, 24 (SP)
   D8:  LW        S4, 20 (SP)
   DC:  LW        S3, 1C (SP)
   E0:  LW        S2, 18 (SP)
   E4:  LW        S1, 14 (SP)
   E8:  LW        S0, 10 (SP)
   EC:  JR        RA
   F0:  ADDIU     SP, SP, 28
}

#new:Function $Function_80218B10
{
    0:  ADDIU     SP, SP, FFD0
    4:  SDC1      F20, 18 (SP)
    8:  MTC1      A1, F20
    C:  SDC1      F22, 20 (SP)
   10:  MTC1      A2, F22
   14:  SW        S0, 10 (SP)
   18:  SDC1      F24, 28 (SP)
   1C:  MTC1      A3, F24
   20:  SW        RA, 14 (SP)
   24:  JAL       800674A0
   28:  DADDU     S0, A0, R0
   2C:  MUL.S     F22, F20, F22
   30:  NOP
   34:  MUL.S     F20, F20, F24
   38:  NOP
   3C:  LIF       F0, 1.0
   44:  NOP
   48:  SWC1      F0, 14 (S0)
   4C:  SWC1      F22, 10 (S0)
   50:  SWC1      F20, 18 (S0)
   54:  LW        RA, 14 (SP)
   58:  LW        S0, 10 (SP)
   5C:  LDC1      F24, 28 (SP)
   60:  LDC1      F22, 20 (SP)
   64:  LDC1      F20, 18 (SP)
   68:  JR        RA
   6C:  ADDIU     SP, SP, 30
}

#new:Function $Function_80218B80
{
    0:  ADDIU     SP, SP, FF78
    4:  SW        S1, 54 (SP)
    8:  DADDU     S1, A0, R0
    C:  SW        RA, 5C (SP)
   10:  SW        S2, 58 (SP)
   14:  SW        S0, 50 (SP)
   18:  SDC1      F28, 80 (SP)
   1C:  SDC1      F26, 78 (SP)
   20:  SDC1      F24, 70 (SP)
   24:  SDC1      F22, 68 (SP)
   28:  SDC1      F20, 60 (SP)
   2C:  LW        S0, C (S1)
   30:  LW        A1, 0 (S0)
   34:  JAL       ~Func:get_variable
   38:  ADDIU     S0, S0, 4
   3C:  JAL       8011B010
   40:  DADDU     A0, V0, R0
   44:  LW        A1, 0 (S0)
   48:  ADDIU     S0, S0, 4
   4C:  DADDU     A0, S1, R0
   50:  JAL       ~Func:get_float_variable
   54:  DADDU     S2, V0, R0
   58:  LW        A1, 0 (S0)
   5C:  ADDIU     S0, S0, 4
   60:  DADDU     A0, S1, R0
   64:  JAL       ~Func:get_float_variable
   68:  MOV.S     F28, F0
   6C:  LW        A1, 0 (S0)
   70:  ADDIU     S0, S0, 4
   74:  DADDU     A0, S1, R0
   78:  JAL       ~Func:get_float_variable
   7C:  MOV.S     F26, F0
   80:  DADDU     A0, S1, R0
   84:  LW        A1, 0 (S0)
   88:  JAL       ~Func:get_float_variable
   8C:  MOV.S     F22, F0
   90:  DADDU     A0, S2, R0
   94:  JAL       8011AD30
   98:  MOV.S     F24, F0
   9C:  DADDU     S1, V0, R0
   A0:  LHU       V0, 0 (S1)
   A4:  ANDI      V0, V0, 400
   A8:  BNE       V0, R0, .o124
   AC:  ADDIU     S0, S1, 58
   B0:  MTC1      R0, F20
   B4:  MFC1      A2, F22
   B8:  MFC1      A1, F20
   BC:  MFC1      A3, F20
   C0:  JAL       80067900
   C4:  DADDU     A0, S0, R0
   C8:  MFC1      A1, F28
   CC:  MFC1      A2, F26
   D0:  MFC1      A3, F24
   D4:  JAL       $Function_80218B10
   D8:  ADDIU     A0, SP, 10
   DC:  ADDIU     A0, SP, 10
   E0:  DADDU     A1, S0, R0
   E4:  JAL       80067600
   E8:  DADDU     A2, S0, R0
   EC:  ADDIU     A0, SP, 10
   F0:  NEG.S     F22, F22
   F4:  MFC1      A1, F20
   F8:  MFC1      A2, F22
   FC:  JAL       80067900
  100:  DADDU     A3, A1, R0
  104:  ADDIU     A0, SP, 10
  108:  DADDU     A1, S0, R0
  10C:  JAL       80067600
  110:  DADDU     A2, A1, R0
  114:  LHU       V0, 0 (S1)
  118:  ORI       V0, V0, 1400
  11C:  BEQ       R0, R0, .o19C
  120:  SH        V0, 0 (S1)
        .o124
  124:  MTC1      R0, F20
  128:  MFC1      A2, F22
  12C:  MFC1      A1, F20
  130:  MFC1      A3, F20
  134:  JAL       80067900
  138:  ADDIU     A0, SP, 10
  13C:  ADDIU     A0, SP, 10
  140:  ADDIU     S0, S1, 58
  144:  DADDU     A1, S0, R0
  148:  JAL       80067600
  14C:  DADDU     A2, S0, R0
  150:  MFC1      A1, F28
  154:  MFC1      A2, F26
  158:  MFC1      A3, F24
  15C:  JAL       $Function_80218B10
  160:  ADDIU     A0, SP, 10
  164:  ADDIU     A0, SP, 10
  168:  DADDU     A1, S0, R0
  16C:  JAL       80067600
  170:  DADDU     A2, S0, R0
  174:  ADDIU     A0, SP, 10
  178:  NEG.S     F22, F22
  17C:  MFC1      A1, F20
  180:  MFC1      A2, F22
  184:  JAL       80067900
  188:  DADDU     A3, A1, R0
  18C:  ADDIU     A0, SP, 10
  190:  DADDU     A1, S0, R0
  194:  JAL       80067600
  198:  DADDU     A2, A1, R0
        .o19C
  19C:  LW        RA, 5C (SP)
  1A0:  LW        S2, 58 (SP)
  1A4:  LW        S1, 54 (SP)
  1A8:  LW        S0, 50 (SP)
  1AC:  LDC1      F28, 80 (SP)
  1B0:  LDC1      F26, 78 (SP)
  1B4:  LDC1      F24, 70 (SP)
  1B8:  LDC1      F22, 68 (SP)
  1BC:  LDC1      F20, 60 (SP)
  1C0:  ADDIU     V0, R0, 2
  1C4:  JR        RA
  1C8:  ADDIU     SP, SP, 88
}
