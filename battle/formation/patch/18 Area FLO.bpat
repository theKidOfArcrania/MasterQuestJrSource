
/%
This area has a large assortment of enemies available:
	Lakitu
	Spiny
	Bzzap
	CrazeeDayzee
	AmazyDayzee
	RuffPuff
	MediGuy
	RMagikoopa
	FlyingRMagikoopa
	GRNMagikoopa
	FlyingGRNMagikoopa
	WMagikoopa
	FlyingWMagikoopa
	YMagikoopa
	FlyingYMagikoopa

	There is relatively little free space available, only 2E20 bytes.
	You can free up space by deleting data for enemes you don't plan to use.
	I don't use MediGuy enemies, so I can delete all their data.
%/
	#delete $FlyingRMagikoopa
	#delete $IdleAnimations_80224DF0
	#delete $IdleAnimations_80224E3C
		#delete $IdleAnimations_80224E88
		#delete $Script_Idle_80224E94
		#delete $Script_HandleEvent_80224EA4
	#delete $Script_802253BC
	#delete $Script_802254C8
	#delete $Script_HandleEvent_80225AC4
	#delete $Script_RMagikoopa_ShapeSpell
 	#delete $Script_RMagikoopa_WandStrike
	#delete $Script_RMagikoopa_RunAway
	#delete $Script_Init_80226FD8
	#delete $Script_Init_8022707C
	#delete $Script_TakeTurn_80227120
	#delete $DefenseTable_80227860
	#delete $DefenseTable_8022786C
	#delete $StatusTable_80227878
	#delete $StatusTable_80227924
	#delete $PartsTable_802279D0
	#delete $PartsTable_802279F4
	#delete $MediGuy
	#delete $Function_80218380
	#delete $Function_8021844C
	#delete $IdleAnimations_802235D0
	#delete $DefenseTable_8022361C
	#delete $StatusTable_80223630
	#delete $PartsTable_802236DC
	#delete $Script_Init_80223728
	#delete $Script_Idle_802237CC
	#delete $Script_802238DC
	#delete $Script_HandleEvent_802239A0
	#delete $Script_FlyingAttack
	#delete $Script_HealOneAlly
	#delete $Script_80224A2C
	#delete $Script_TakeTurn_80224B0C
	/%
	#delete $MediGuy
	#delete $Function_80218380
	#delete $Function_8021844C
	#delete $IdleAnimations_802235D0
	#delete $DefenseTable_8022361C
	#delete $StatusTable_80223630
	#delete $PartsTable_802236DC
	#delete $Script_Init_80223728
	#delete $Script_Idle_802237CC
	#delete $Script_802238DC
	#delete $Script_HandleEvent_802239A0
	#delete $Script_FlyingAttack
	#delete $Script_HealOneAlly
	#delete $Script_80224A2C
	#delete $Script_TakeTurn_80224B0C
%/

#define .SpellStartX  -300`
#define .SpellStartY   300`

% ====================================================
% This is one of two battle sections that makes numerous
% references to the MapConfigTable (default = 800934F0).
% Since custom maps will cause this to be moved, these battles
% may not load unless all the pointers are updated!
% ====================================================

@ $Function_80219420
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_802194E0
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_802195A0
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_80219660
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_80219720
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_802197E0
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_802198A0
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_80219C80
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_80219D40
{
[18]  LIA	S3, $Global_MapConfigTable
}

@ $Function_80219E00
{
[18]  LIA	S3, $Global_MapConfigTable
}

% ====================================================
% Utility functions
% ====================================================

% Immediately vanishes owner of calling script.
#new:Function $Function_Vanish % ( duration )
{
	ADDIU	SP, SP, FFE0
	SW		RA, 10 (SP)
	SW		S1, 14 (SP)
	SW		S2, 18 (SP)
	% get turn count
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S1, A0, R0
	ANDI	V0, V0, 00FF
	% add electify status
	LW		A0, 148 (S1)
	JAL		~Func:get_actor
	DADDU	S2, V0, R0
	ORI		S2, S2, 0E00
	SH		S2, 218 (V0)
	% return
	LW		RA, 10 (SP)
	LW		S1, 14 (SP)
	LW		S2, 18 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 20
}

% Immediately electrifies owner of calling script.
#new:Function $Function_Electrify % ( duration )
{
	ADDIU	SP, SP, FFE0
	SW		RA, 10 (SP)
	SW		S1, 14 (SP)
	SW		S2, 18 (SP)
	% get turn count
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S1, A0, R0
	ANDI	V0, V0, 00FF
	% add electify status
	LW		A0, 148 (S1)
	JAL		~Func:get_actor
	DADDU	S2, V0, R0
	ORI		S2, S2, 0B00
	SH		S2, 212 (V0)
	% return
	LW		RA, 10 (SP)
	LW		S1, 14 (SP)
	LW		S2, 18 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 20
}

% Removes electrified status from owner of calling script.
#new:Function $Function_RemoveElectrify
{
	ADDIU	SP, SP, FFE0
	SW		S1, 14 (SP)
	DADDU	S1, A0, R0
	SW		RA, 10 (SP)
	JAL		~Func:get_actor
	LW		A0, 148 (S1)
	SH		R0, 212 (V0) % remove electify status
	LW		RA, 10 (SP)
	LW		S1, 14 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 20
}

% ====================================================
% Custom Battle Popups
% These work, but could be implemented better.
% ====================================================

#new:Function $ShowCustomMessage % ( stringID from Custom section, message display time )
{
	PUSH	RA, S0, S1
	DADDU	S0, A0, R0
	LW		S1, C (A0)
	JAL		~Func:get_variable
	LW		A1, 0 (S1)
	ADDIU	S1, S1, 4
	DADDU	A0, S0, R0
	DADDU	S0, V0, R0
	JAL		~Func:get_variable
	LW		A1, 0 (S1)
	DADDU	S1, V0, R0
	DADDU	A0, R0, R0
	JAL		8024EF68	% CreateMessageBox? (usually at 8029F2C0)
	DADDU	A1, S1, R0
	DADDU	V1, V0, R0
	BEQ		V1, R0, .Done
	NOP
	SW		R0, 0 (V1)
	LIA		V0, $Custom_8024FB3C
	SW		V0, 4 (V1)
	SW		R0, 8 (V1)
	LIA		V0, $Custom_80250EA4
	SW		V0, C (V1)
	SH		S0, 12 (V1)	% message ID
	SH		S1, 14 (V1) % message time
	SB		R0, 16 (V1)
	ADDIU	V0, R0, 1
	SB		V0, 17 (V1)
	SW		R0, 18 (V1)
	SAW		V1, 802838F8
	SAH		R0, 8029F640
	SAH		R0, 8029F64A
	SAH		R0, 8029F64C
	SAH		R0, 8029F64E
	SAH		R0, 8029F650
	.Done
	POP		RA, S0, S1
	JR		RA
	ADDIU	V0, R0, 2
}
	
#new:Function $Custom_80250EA4 % [17F784]
{
	ADDIU	SP, SP, FFC0
	SW		S3, 34 (SP)
	DADDU	S3, A0, R0
	SW		RA, 3C (SP)
	SW		S4, 38 (SP)
	SW		S2, 30 (SP)
	SW		S1, 2C (SP)
	SW		S0, 28 (SP)
	%
	LH		V0, 12 (S3)
	LUI		S0, 002F
	OR		S0, S0, V0
	%
	LB		V0, 17 (S3)
	BEQ		V0, R0, .Done
	NOP
	SB		R0, 17 (S3)
	%
	DADDU	A1, R0, R0
	JAL		80126474		% GetTextWidth  (9D)
	DADDU	A0, S0, R0
	%
	ADDIU	A3, V0, 1E
	SRL		V0, A3, 1F
	ADDU	V0, A3, V0
	SRA		V0, V0, 1
	ADDIU	V1, R0, A0 % 160`
	SUBU	S1, V1, V0 % S1 = 160 - (V0 + 30) / 2	(start pos)
	DADDU	S2, A3, R0 % S1 = V0 + 30 				(box width)
	JAL		801264B0		% GetTextLines? (2)
	DADDU	A0, S0, R0
	%
	ADDIU	V0, V0, FFFF
	ADDIU	A0, R0, 9
	DADDU	A1, S1, R0	% text hpos
	ADDIU	A2, R0, 50	% text vpos
	DADDU	A3, S2, R0	% box width
	SLL		V0, V0, 1
	LTH		T0, V0 (802835D0) % (1C/28)
	SW		T0, 10 (SP) % box height
	SW		R0, 14 (SP)
	LIA		V0, $Custom_80250818
	SW		V0, 18 (SP)
	SW		S3, 1C (SP)
	ADDIU	V0, R0, FFFF
	SW		V0, 20 (SP)
	JAL		80147CC8
	NOP
	%
	ADDIU	A0, R0, 9
	ADDIU	A1, R0, 1
	JAL		80147E7C
	NOP
	.Done
	LW		RA, 3C (SP)
	LW		S4, 38 (SP)
	LW		S3, 34 (SP)
	LW		S2, 30 (SP)
	LW		S1, 2C (SP)
	LW		S0, 28 (SP)
	JR		RA
	ADDIU	SP, SP, 40
}
	
#new:Function $Custom_8024FB3C		% 17E41C
{
	ADDIU	SP, SP, FFE0
	SW		S1, 14 (SP)
	DADDU	S1, A0, R0
	SW		S2, 18 (SP)
	SW		RA, 1C (SP)
	SW		S0, 10 (SP)
	LIA		A0, 800DC070
	DADDU	S2, R0, R0
	LIO		V0, 8024FB84
	JR		V0
	NOP
}
	
#new:Function $Custom_80250818	% [17F0F8]
{
	ADDIU     SP, SP, FFC8
	SW        S2, 20 (SP)
	ADDIU     S2, A1, F
	SW        S3, 24 (SP)
	DADDU     S3, A0, R0
	SW        RA, 2C (SP)
	SW        S4, 28 (SP)
	SW        S1, 1C (SP)
	SW        S0, 18 (SP)
	SDC1      F20, 30 (SP)
	ADDIU     S1, A2, 6
	LH		V0, 12 (S3)
	LUI		S0, 002F
	OR		S0, S0, V0
	JAL       801264B0
	DADDU     A0, S0, R0
	ADDIU     V1, V0, FFFF
	DADDU     A0, S0, R0
	DADDU     A1, S2, R0
	ADDIU     A3, R0, FF
	SLL       V0, V1, 1
	LTH       A2, V0 (802835D4)
	ADDIU     V0, R0, F
	SW        V0, 10 (SP)
	SW        R0, 14 (SP)
	JAL       801264EC		% DrawString
	ADDU      A2, S1, A2
	LW        RA, 2C (SP)
	LW        S4, 28 (SP)
	LW        S3, 24 (SP)
	LW        S2, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	LDC1      F20, 30 (SP)
	JR        RA
	ADDIU     SP, SP, 38
}

% ====================================================
% Lakitu
% + Increased HP (12 -> 20)
% + Attacks both Mario and Partner
% + ATK increased to 7
% ====================================================

@ $Lakitu
{
[MaxHP]	13`b
[Escape]       40`b 
}

@ $DefenseTable_80219F24
{
.Element:Normal   00000000
.Element:End
}

@ $StatusTable_80219F38
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      20`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy     60`
.Status:Fear   		 0`
.Status:Static     50`
.Status:Paralyze   40`
.Status:Shrink     25`
.Status:Stop       50`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -2`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

@ $Script_8021A0EC
{
    0:  Call     SetAnimation 	( .Actor:Self 00000001 00490003 )
   18:  Call     SetGoalToHome 	( .Actor:Self )
   28:  Call     SetActorSpeed 	( .Actor:Self *Fixed[12.0] )
   3C:  Call     FlyToGoal  	( .Actor:Self 00000000 00000000 .Easing:SinOut )
   58:  Call     SetAnimation 	( .Actor:Self 00000001 00490001 )
   70:  Return
   78:  End
}

@ $Script_ThrowSpint
{
     0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   88:  Call     SetAnimation 	( .Actor:Self 00000001 00490003 )
   A0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  Call     SetGoalPos 	( .Actor:Self FFFFFFEC *Var[1] *Var[2] )
   D8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
   F0:  Call     SetAnimation 	( .Actor:Self 00000001 00490001 )
  108:  Call     SetAnimation 	( .Actor:Self 00000002 0049000B )
  120:  Call     SetAnimation 	( .Actor:Self 00000001 00490012 )
  138:  Wait     00000014 
  144:  Call     SetAnimation 	( .Actor:Self 00000001 00490013 )
  15C:  Call     GetStatusFlags ( .Actor:Self *Var[A] )
  170:  If  *Var[A]  &  00080000 
  180:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  19C:  	Add  *Var[0]  FFFFFFFD 
  1AC:  	Add  *Var[1]  00000010 
  1BC:  	Add  *Var[2]  00000002 
  1CC:  	Call     PlayEffect  	( ~FX:EnergyIn:ShortStreaks *Var[0] *Var[1] *Var[2] *Fixed[0.40039062] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  210:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  22C:  	Add  *Var[1]  0000000C 
  23C:  	Add  *Var[2]  00000000 
  24C:  	Call     SetPartPos 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  26C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  28C:  Else
  294:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2B0:  	Add  *Var[0]  FFFFFFF8 
  2C0:  	Add  *Var[1]  00000028 
  2D0:  	Add  *Var[2]  00000005 
  2E0:  	Call     PlayEffect  	( ~FX:EnergyIn:ShortStreaks *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  324:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  340:  	Add  *Var[1]  0000001E 
  350:  	Add  *Var[2]  00000002 
  360:  	Call     SetPartPos 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  380:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  3A0:  EndIf
  3A8:  Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  3C4:  Wait     0000000A 
  3D0:  Thread
  3D8:  	Call     SetAnimation 	( .Actor:Self 00000001 00490015 )
  3F0:  	Wait     00000014 
  3FC:  	Call     SetAnimation 	( .Actor:Self 00000001 00490001 )
  414:  EndThread
  41C:  Call     SetAnimation 	( .Actor:Self 00000002 0049000C )
  434:  Call     PlaySoundAtPart 	( .Actor:Self 00000002 000020D2 )
  44C:  Call     SetPartSounds ( FFFFFF81 00000002 00000002 00000000 00000000 )
  46C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  490:  Switch  *Var[0] 
  49C:  	CaseOR  ==  00000006 
  4A8:  	CaseOR  ==  00000005 
  4B4:  		Set  *Var[A]  *Var[0] 
  4C4:  		Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[1.0] )
  4DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  4EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  508:  		Sub  *Var[0]  00000028 
  518:  		Set  *Var[1]  00000000 
  528:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 00000014 .True )
  550:  		Sub  *Var[0]  0000001E 
  560:  		If  *Var[A]  ==  00000005 
  570:  			Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  594:  		EndIf
  59C:  		Call     ResetAllActorSounds ( FFFFFF81 )
  5AC:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 0000000A .True )
  5D4:  		Sub  *Var[0]  00000014 
  5E4:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 00000005 .True )
  60C:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  628:  		Wait     00000014 
  634:  		Call     YieldTurn ( )
  640:  		Call     UseBattleCamPreset 	( 00000002 )
  650:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  66C:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  680:  		ExecWait $Script_8021A0EC 
  68C:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  6A0:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  6B8:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  6CC:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  6E0:  		Return
  6E8:  	EndCaseGroup
  6F0:  EndSwitch
  6F8:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[1.0] )
  710:  Call     SetGoalToTarget 	( .Actor:Self )
  720:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  73C:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  764:  Call     ResetAllActorSounds ( FFFFFF81 )
  774:  Wait     00000002 
  780:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000006 00000020 )
  % =====================================
  % IF THIS WORKS ATTACK PARTNER AS WELL
  % =====================================
    Call     GetStatusFlags ( .Actor:Partner *Var[B] ) % so it doesnt stunlock your partner
	If  *Var[B]  &  01000000 
     Goto 00000006
	Else
	 Goto 00000005
	EndIf
	 Label 00000005
  28:  Call     SetTargetActor ( .Actor:Self .Actor:Partner )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor ( .Actor:Self )
   5C:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   74:  Call     SetActorSpeed 	( .Actor:Self *Fixed[8.0] )
   88:  Call     SetAnimation 	( .Actor:Self 00000001 00490003 )
   A0:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   BC:  Call     SetGoalPos 	( .Actor:Self FFFFFFEC *Var[1] *Var[2] )
   D8:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
   F0:  Call     SetAnimation 	( .Actor:Self 00000001 00490001 )
  108:  Call     SetAnimation 	( .Actor:Self 00000002 0049000B )
  120:  Call     SetAnimation 	( .Actor:Self 00000001 00490012 )
  138:  Wait     00000014 
  144:  Call     SetAnimation 	( .Actor:Self 00000001 00490013 )
  15C:  Call     GetStatusFlags ( .Actor:Self *Var[A] )
  170:  If  *Var[A]  &  00080000 
  180:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  19C:  	Add  *Var[0]  FFFFFFFD 
  1AC:  	Add  *Var[1]  00000010 
  1BC:  	Add  *Var[2]  00000002 
  1CC:  	Call     PlayEffect  	( ~FX:EnergyIn:ShortStreaks *Var[0] *Var[1] *Var[2] *Fixed[0.40039062] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  210:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  22C:  	Add  *Var[1]  0000000C 
  23C:  	Add  *Var[2]  00000000 
  24C:  	Call     SetPartPos 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  26C:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[0.40039062] *Fixed[0.40039062] *Fixed[0.40039062] )
  28C:  Else
  294:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  2B0:  	Add  *Var[0]  FFFFFFF8 
  2C0:  	Add  *Var[1]  00000028 
  2D0:  	Add  *Var[2]  00000005 
  2E0:  	Call     PlayEffect  	( ~FX:EnergyIn:ShortStreaks *Var[0] *Var[1] *Var[2] *Fixed[1.0] 0000000A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  324:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  340:  	Add  *Var[1]  0000001E 
  350:  	Add  *Var[2]  00000002 
  360:  	Call     SetPartPos 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] )
  380:  	Call     SetPartScale ( .Actor:Self 00000002 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  3A0:  EndIf
  3A8:  Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  3C4:  Wait     0000000A 
  3D0:  Thread
  3D8:  	Call     SetAnimation 	( .Actor:Self 00000001 00490015 )
  3F0:  	Wait     00000014 
  3FC:  	Call     SetAnimation 	( .Actor:Self 00000001 00490001 )
  414:  EndThread
  41C:  Call     SetAnimation 	( .Actor:Self 00000002 0049000C )
  434:  Call     PlaySoundAtPart 	( .Actor:Self 00000002 000020D2 )
  44C:  Call     SetPartSounds ( FFFFFF81 00000002 00000002 00000000 00000000 )
  46C:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  490:  Switch  *Var[0] 
  49C:  	CaseOR  ==  00000006 
  4A8:  	CaseOR  ==  00000005 
  4B4:  		Set  *Var[A]  *Var[0] 
  4C4:  		Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[1.0] )
  4DC:  		Call     SetGoalToTarget 	( .Actor:Self )
  4EC:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  508:  		Sub  *Var[0]  00000028 
  518:  		Set  *Var[1]  00000000 
  528:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 00000014 .True )
  550:  		Sub  *Var[0]  0000001E 
  560:  		If  *Var[A]  ==  00000005 
  570:  			Call     EnemyTestTarget ( .Actor:Self *Var[A] 80000000 00000000 00000000 00000000 )
  594:  		EndIf
  59C:  		Call     ResetAllActorSounds ( FFFFFF81 )
  5AC:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 0000000A .True )
  5D4:  		Sub  *Var[0]  00000014 
  5E4:  		Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 00000005 .True )
  60C:  		Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  628:  		Wait     00000010 
  634:  		Call     YieldTurn ( )
  640:  		Call     UseBattleCamPreset 	( 00000002 )
  650:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  66C:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  680:  		ExecWait $Script_8021A0EC 
  68C:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  6A0:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  6B8:  		Call     EnableIdleScript 	( .Actor:Self 00000001 )
  6CC:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  6E0:  		Return
  6E8:  	EndCaseGroup
  6F0:  EndSwitch
  6F8:  Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[1.0] )
  710:  Call     SetGoalToTarget 	( .Actor:Self )
  720:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  73C:  Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] *Var[1] *Var[2] 00000014 .True )
  764:  Call     ResetAllActorSounds ( FFFFFF81 )
  774:  Wait     00000001 
  780:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000001 00000020 )
  % ===================
  % IT DID SO GET REKT
  % ===================
    Label 00000006
  7A8:  Switch  *Var[0] 
  7B4:  	CaseOR  ==  00000000 
  7C0:  	CaseOR  ==  00000002 
  7CC:  		Call     UseBattleCamPreset 	( 00000002 )
  7DC:  		Thread
  7E4:  			Call     SetPartJumpGravity 	( .Actor:Self 00000002 *Fixed[1.0] )
  7FC:  			Call     SetGoalToTarget 	( .Actor:Self )
  80C:  			Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  828:  			Sub  *Var[0]  00000028 
  838:  			Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 00000014 .True )
  860:  			Sub  *Var[0]  0000001E 
  870:  			Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 0000000A .True )
  898:  			Sub  *Var[0]  00000014 
  8A8:  			Call     JumpPartTo 	( .Actor:Self 00000002 *Var[0] 00000000 *Var[2] 00000005 .True )
  8D0:  			Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .True )
  8EC:  		EndThread
  8F4:  		Wait     00000014 
  900:  		Call     YieldTurn ( )
  90C:  		ExecWait $Script_8021A0EC 
  918:  	EndCaseGroup
  920:  EndSwitch
  928:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  93C:  Call     UseIdleAnimation 	( .Actor:Self .True )
  950:  Return
  958:  End
}
  
% ====================================================
% Spiny
% + Increased HP (5 -> 8)
% + Tackle attack moves 50% faster
% + Increased defense (3 -> 5)
% ====================================================

@ $Spiny
{
[MaxHP]	7`b
[Escape]       40`b  
}

@ $DefenseTable_8021BF74
{
.Element:Normal 00000005
.Element:End
}

@ $DefenseTable_8021BF80
{
.Element:Normal 00000001
.Element:End
}

@ $StatusTable_8021BF8C
{
.Status:Normal      0`
.Status:Default     0`
.Status:Sleep      50`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      50`
.Status:Fear        0`
.Status:Static     50`
.Status:Paralyze   45`
.Status:Shrink     70`
.Status:Stop       50`
.Status:DefaultTurnMod    0`
.Status:SleepTurnMod     -1`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod       0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -2`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod      -1`
.Status:End
}

@ $Script_TakeTurn_8021CDC0
{
0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
   40:  If  *Var[0]  ==  00000001 
   50:  	Call     GetActorVar 	( .Actor:Self 00000001 *Var[0] )
   68:  	Sub  *Var[0]  00000001 
   78:  	Call     SetActorVar 	( .Actor:Self 00000001 *Var[0] )
   90:  	If  *Var[0]  >  00000000 
   A0:  		Call     SetAnimation 	( .Actor:Self 00000001 004A0014 )
   B8:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
   D4:  		Wait     0000001E 
   E0:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
   F8:  	Else
  100:  		Call     SetAnimation 	( .Actor:Self 00000001 004A0014 )
  118:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  134:  		Wait     00000014 
  140:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  158:  		SetConst  *Var[0]  00000001 
  168:  		SetConst  *Var[1]  004A0002 
  178:  		SetConst  *Var[2]  004A0001 
  188:  		ExecWait 8029BBB4 
  194:  		Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
  1AC:  		Call     SetDefenseTable 	( .Actor:Self 00000001 $DefenseTable_8021BF74 )
  1C4:  		Call     SetIdleAnimations 	( .Actor:Self 00000001 $IdleAnimations_8021BED0 )
  1DC:  		Call     SetPartEventBits 	( .Actor:Self 00000001 00200000 .True )
  1F8:  		Call     SetActorFlagBits 	( .Actor:Self 00000400 .False )
  210:  	EndIf
  %218:  	Call     EnableIdleScript 	( .Actor:Self 00000001 )
  %22C:  	Call     UseIdleAnimation 	( .Actor:Self .True )
  %240:  	Return
  248:  EndIf
  250:  Call     UseBattleCamPreset 	( 0000003F )
  260:  Call     BattleCamTargetActor ( .Actor:Self )
  270:  Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
  288:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  29C:  Call     GetActorVar 	( .Actor:Self 00000000 *Var[0] )
  2B4:  If  *Var[0]  ==  00000000 
  2C4:  	Wait     0000000A 
  2D0:  	Call     SetAnimation 	( .Actor:Self 00000001 004A0019 )
  2E8:  	Wait     00000008 
  2F4:  	Call     SetAnimation 	( .Actor:Self 00000001 004A0018 )
  30C:  	Wait     0000000A 
  318:  Else
  320:  	Wait     00000014 
  32C:  EndIf
  334:  Thread
  33C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  358:  	Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  39C:  	Wait     0000000A 
  3A8:  	Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  3EC:  	Wait     00000005 
  3F8:  	Call     PlayEffect  	( ~FX:SmokeImpact:Small *Var[0] *Var[1] *Var[2] 00000020 00000004 00000000 0000000A 00000000 00000000 00000000 00000000 00000000 )
  43C:  EndThread
  444:  Call     EnableActorBlur 	( .Actor:Self 00000001 )
  458:  Call     SetPartFlagBits 	( .Actor:Self 00000001 00000001 .True )
  474:  Call     SetPartFlagBits 	( .Actor:Self 00000002 00000001 .False )
  490:  Call     SetAnimation 	( .Actor:Self 00000002 0049000C )
  4A8:  Wait     0000000A 
  4B4:  Call     PlaySoundAtPart 	( .Actor:Self 00000002 000002C7 )
  4CC:  Call     SetActorSounds ( FFFFFF81 00000000 00000000 00000000 )
  4E8:  Call     SetPartSounds ( FFFFFF81 00000002 00000000 00000000 00000000 )
  508:  Call     EnemyTestTarget ( .Actor:Self *Var[A] 00000000 00000000 00000004 00000010 )
  52C:  Switch  *Var[A] 
  538:  	CaseOR  ==  00000006 
  544:  	CaseOR  ==  00000005 
  550:  		Thread
  558:  			Loop     
  564:  				Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  580:  				Add  *Var[0]  0000001E 
  590:  				Call     GetActorPos 	( .Actor:Self *Var[3] *Var[4] *Var[5] )
  5AC:  				If  *Var[0]  >  *Var[3] 
  5BC:  					BreakLoop
  5C4:  				EndIf
  5CC:  				Wait     00000001 
  5D8:  			EndLoop
  5E0:  			Call     UseBattleCamPreset 	( 00000001 )
  5F0:  			If  *Var[A]  ==  00000005 
  600:  				Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  624:  			EndIf
  62C:  			Wait     0000000F 
  638:  			Call     UseBattleCamPreset 	( 00000002 )
  648:  		EndThread
  650:  		Call     SetGoalToTarget 	( .Actor:Self )
  660:  		Call     AddGoalPos 	( .Actor:Self FFFFFF38 00000000 00000000 )
  67C:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] )
  690:  		Call     RunToGoal   	( .Actor:Self 00000000 .False )
  6A8:  		Call     ResetAllActorSounds ( FFFFFF81 )
  6B8:  		Call     EnableActorBlur 	( .Actor:Self 00000000 )
  6CC:  		Call     UseBattleCamPreset 	( 00000002 )
  6DC:  		Call     YieldTurn ( )
  6E8:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  704:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  718:  		ExecWait $Script_8021C134
  724:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  73C:  		Return
  744:  	EndCaseGroup
  74C:  EndSwitch
  754:  Call     SetGoalToTarget 	( .Actor:Self )
  764:  Call     SetActorSpeed 	( .Actor:Self *Fixed[24.0] )
  778:  Call     RunToGoal   	( .Actor:Self 00000000 .False )
  790:  Call     ResetAllActorSounds ( FFFFFF81 )
  7A0:  Wait     00000002 
  7AC:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 00000000 00000005 00000020 )
  7D4:  Switch  *Var[0] 
  7E0:  	CaseOR  ==  00000000 
  7EC:  	CaseOR  ==  00000002 
  7F8:  		Call     UseBattleCamPreset 	( 00000002 )
  808:  		Call     SetAnimation 	( .Actor:Self 00000002 0049000B )
  820:  		Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  83C:  		Add  *Var[0]  00000014 
  84C:  		Set  *Var[1]  00000000 
  85C:  		Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.0] )
  870:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  88C:  		Call     JumpToGoal  	( .Actor:Self 00000014 00000000 00000001 00000000 )
  8AC:  		Add  *Var[0]  0000000A 
  8BC:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  8D8:  		Call     JumpToGoal  	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  8F8:  		Add  *Var[0]  0000000A 
  908:  		Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  924:  		Call     JumpToGoal  	( .Actor:Self 00000005 00000000 00000001 00000000 )
  944:  		Call     EnableActorBlur 	( .Actor:Self 00000000 )
  958:  		Call     YieldTurn ( )
  964:  		Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
  978:  		ExecWait $Script_8021C134 
  984:  	EndCaseGroup
  98C:  EndSwitch
  994:  Call     EnableActorBlur 	( .Actor:Self 00000000 )
  9A8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  9BC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  9D0:  Return
  9D8:  End
}

% ====================================================
% Bzzap
% + Increased HP (3 -> 4)
% + Increased chance for sting to inflict poison (40% -> 60%)
% + Increased poison duration (3 -> 4 turns)
% + THEY ARENT HERE ANYMORE
% + REPLACED BY BZZRK
% ====================================================

@ $Bzzap
{
[MaxHP]	4`b
[Escape]       40`b 
}

@ $Script_Sting
{
[428]	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 00000000 80020464 00000008 00000020 ) %nerf dmg because no feeling fine now
}

@ $Script_Swarm
{
 [D60]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 00000000 00000001 00000010 )
 [F30]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80020232 00000002 00000040 )
 [1100]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080232 00000003 00000040 )
 [12D0]  	Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80020332 00000004 00000040 ) %not very strong but it can inflict
 [14A4]     Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 10000000 00000000 80080332 00000005 00000020 ) %poison and shrink in the same turn
}

% ====================================================
% Crazee Dayzee
% + Increased HP (8 -> 15)
% + Increased chance for song to inflict sleep (20% -> 50%)
% ====================================================

@ $CrazeeDayzee
{
[MaxHP]	12`b
[Escape]       40`b 
}

@ $DefenseTable_8021D7A0
{
.Element:Normal   00000000
.Element:Fire     FFFFFFFE
.Element:End
}

@ $StatusTable_8021D7AC
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      25`
.Status:Poison     50`
.Status:Frozen      0`
.Status:Dizzy      30`
.Status:Fear    0`
.Status:Static     50`
.Status:Paralyze   70`
.Status:Shrink     30`
.Status:Stop       30`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod      -3`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod      0`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod   -1`
.Status:ShrinkTurnMod     0`
.Status:StopTurnMod       0`
.Status:End
}

@ $Script_Crazee_Sing
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   28:  Call     GetBattlePhase ( *Var[0] )
   38:  If  *Var[0]  ==  .Phase:FirstStrike
   48:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   64:  	Call     SetActorPos 	( .Actor:Self FFFFFFEC *Var[1] *Var[2] )
   80:  Else
   88:  	Call     UseBattleCamPreset 	( 0000003F )
   98:  	Call     BattleCamTargetActor ( .Actor:Self )
   A8:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   C0:  	Call     MoveBattleCamOver 	( 00000046 )
   D0:  	Set  *Flag[00]  00000000 
   E0:  	Label    00000000 
   EC:  	If  *Flag[00]  ==  00000000 
   FC:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000E )
  114:  		Set  *Flag[00]  00000001 
  124:  	Else
  12C:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000F )
  144:  		Set  *Flag[00]  00000000 
  154:  	EndIf
  15C:  	Wait     00000001 
  168:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  17C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  198:  	Sub  *Var[0]  00000014 
  1A8:  	Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1C4:  	Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  1E4:  	If  *Var[0]  >  00000000 
  1F4:  		Goto     00000000 
  200:  	EndIf
  208:  	If  *Flag[00]  ==  00000000 
  218:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000E )
  230:  		Set  *Flag[00]  00000001 
  240:  	Else
  248:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000F )
  260:  		Set  *Flag[00]  00000000 
  270:  	EndIf
  278:  	Wait     00000001 
  284:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  298:  	Call     SetGoalPos 	( .Actor:Self FFFFFFDD 00000000 0000000A )
  2B4:  	Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  2D4:  EndIf
  2DC:  Call     SetAnimation 	( .Actor:Self 00000001 00480001 )
  2F4:  Wait     0000000A 
  300:  Thread
  308:  	Call     SetAnimation 	( .Actor:Self 00000001 00480006 )
  320:  	Wait     00000028 
  32C:  	Call     SetAnimation 	( .Actor:Self 00000001 00480007 )
  344:  EndThread
  34C:  Wait     00000014 
  358:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:DayzeeSong )
  36C:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  Add  *Var[1]  00000019 
  398:  Add  *Var[2]  00000002
  3A8:  Loop     00000003
  3B4:  	Call     RandInt     	( 0000001E *Var[3] )
  3C8:  	Sub  *Var[3]  0000000F 
  3D8:  	Add  *Var[3]  *Var[0] 
  3E8:  	Call     PlayEffect  	( ~FX:MusicNote:Left *Var[3] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  42C:  	Wait     0000000A 
  438:  EndLoop
  440:  Call     SetAnimation 	( .Actor:Self 00000001 00480001 )
  458:  Wait     0000000A 
  464:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  488:  Switch  *Var[0] 
  494:  	CaseOR  ==  00000006 
  4A0:  	CaseOR  ==  00000005 
  4AC:  		Set  *Var[A]  *Var[0] 
  4BC:  		If  *Var[A]  ==  00000005 
  4CC:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4F0:  		EndIf
  4F8:  		Call     UseBattleCamPreset 	( 00000002 )
  508:  		Wait     00000005 
  514:  		Call     YieldTurn ( )
  520:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		ExecWait $Script_8021D94C 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  5C8:  Call     SetGoalToTarget 	( .Actor:Self )
  5D8:  Wait     00000001 
  5E4:  	Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 80001164 00000004 00000020 )
  60C:%  Switch  *Var[F] 
  618:  %	CaseOR  ==  00000000 
  624:  %	CaseOR  ==  00000002 
  630:  		Call     UseBattleCamPreset 	( 00000002 )
  640:  		Call     MoveBattleCamOver 	( 0000000A )
  650:  		Wait     00000014 
  65C:  		Call     YieldTurn ( )
  668:  		ExecWait $Script_8021D94C
  674:  	%EndCaseGroup
  67C:  %EndSwitch
  684:  Call     UseIdleAnimation 	( .Actor:Self .True )
  698:  Return
  6A0:  End
}

#new:Script $Script_Crazee_Debuff
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
   28:  Call     GetBattlePhase ( *Var[0] )
   38:  If  *Var[0]  ==  .Phase:FirstStrike
   48:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   64:  	Call     SetActorPos 	( .Actor:Self FFFFFFEC *Var[1] *Var[2] )
   80:  Else
   88:  	Call     UseBattleCamPreset 	( 0000003F )
   98:  	Call     BattleCamTargetActor ( .Actor:Self )
   A8:  	Call     8024ECF8 ( FFFFFFFF 00000001 00000000 )
   C0:  	Call     MoveBattleCamOver 	( 00000046 )
   D0:  	Set  *Flag[00]  00000000 
   E0:  	Label    00000000 
   EC:  	If  *Flag[00]  ==  00000000 
   FC:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000E )
  114:  		Set  *Flag[00]  00000001 
  124:  	Else
  12C:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000F )
  144:  		Set  *Flag[00]  00000000 
  154:  	EndIf
  15C:  	Wait     00000001 
  168:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  17C:  	Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  198:  	Sub  *Var[0]  00000014 
  1A8:  	Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1C4:  	Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  1E4:  	If  *Var[0]  >  00000000 
  1F4:  		Goto     00000000 
  200:  	EndIf
  208:  	If  *Flag[00]  ==  00000000 
  218:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000E )
  230:  		Set  *Flag[00]  00000001 
  240:  	Else
  248:  		Call     SetAnimation 	( .Actor:Self 00000001 0048000F )
  260:  		Set  *Flag[00]  00000000 
  270:  	EndIf
  278:  	Wait     00000001 
  284:  	Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.5] )
  298:  	Call     SetGoalPos 	( .Actor:Self FFFFFFDD 00000000 0000000A )
  2B4:  	Call     JumpToGoal  	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  2D4:  EndIf
  2DC:  Call     SetAnimation 	( .Actor:Self 00000001 00480001 )
  2F4:  Wait     0000000A 
  300:  Thread
  308:  	Call     SetAnimation 	( .Actor:Self 00000001 00480006 )
  320:  	Wait     00000028 
  32C:  	Call     SetAnimation 	( .Actor:Self 00000001 00480007 )
  344:  EndThread
  34C:  Wait     00000014 
  358:  Call     PlaySoundAtActor 	( .Actor:Self .Sound:DayzeeSong )
  36C:  Call     GetActorPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  388:  Add  *Var[1]  00000019 
  398:  Add  *Var[2]  00000002 
  3A8:  Loop     00000006 
  3B4:  	Call     RandInt     	( 0000001E *Var[3] )
  3C8:  	Sub  *Var[3]  0000000F 
  3D8:  	Add  *Var[3]  *Var[0] 
  3E8:  	Call     PlayEffect  	( ~FX:MusicNote:Left *Var[3] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  42C:  	Wait     0000000A 
  438:  EndLoop
  440:  Call     SetAnimation 	( .Actor:Self 00000001 00480001 )
  458:  Wait     0000000A 
  464:  Call     EnemyTestTarget ( .Actor:Self *Var[0] 00000000 00000000 00000001 00000010 )
  488:  Switch  *Var[0] 
  494:  	CaseOR  ==  00000006 
  4A0:  	CaseOR  ==  00000005 
  4AC:  		Set  *Var[A]  *Var[0] 
  4BC:  		If  *Var[A]  ==  00000005 
  4CC:  			Call     EnemyTestTarget ( .Actor:Self *Var[0] 80000000 00000000 00000000 00000000 )
  4F0:  		EndIf
  4F8:  		Call     UseBattleCamPreset 	( 00000002 )
  508:  		Wait     00000005 
  514:  		Call     YieldTurn ( )
  520:  		Call     SetActorYaw 	( .Actor:Self 000000B4 )
  534:  		Call     AddActorDecoration 	( .Actor:Self 00000001 00000000 .Decoration:Sweat )
  550:  		ExecWait $Script_8021D94C_18 
  55C:  		Call     RemoveActorDecoration 	( .Actor:Self 00000001 00000000 )
  574:  		Call     SetActorYaw 	( .Actor:Self 00000000 )
  588:  		Call     UseIdleAnimation 	( .Actor:Self .True )
  59C:  		Return
  5A4:  	EndCaseGroup
  5AC:  EndSwitch
  5B4:  Call     SetTargetActor ( .Actor:Self .Actor:Player )
  5C8:  Call     SetGoalToTarget 	( .Actor:Self )
  5D8:  Wait     00000001 
  5E4:  Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 00000000 00000003 00000020 )
  			Call	PlaySoundAtActor	( .Actor:Player 000002D8 )
			Thread % added
				Call	8026BF48	( 00000001 )
				Call	BoostDefense	( .Actor:Player FFFFFFFF )
				Call	8026BF48	( 00000000 )
			EndThread % added
  60C:%  Switch  *Var[F] 
  618:  %	CaseOR  ==  00000000 
  624:  %	CaseOR  ==  00000002 
  630:  		Call     UseBattleCamPreset 	( 00000002 )
  640:  		Call     MoveBattleCamOver 	( 0000000A )
  650:  		Wait     00000014 
  65C:  		Call     YieldTurn ( )
  668:  		ExecWait $Script_8021D94C_18 
  674:  	%EndCaseGroup
  67C:  %EndSwitch
  684:  Call     UseIdleAnimation 	( .Actor:Self .True )
  698:  Return
  6A0:  End
}

@ $Script_TakeTurn_8021E7BC
{
    0:  Call     GetBattlePhase ( *Var[0] )
   10:  If  *Var[0]  ==  .Phase:FirstStrike
   20:  	ExecWait $Script_Crazee_Sing 
   2C:  	Return
   34:  EndIf
   3C:  Call     GetActorHP  	( .Actor:Self *Var[0] )
   50:  Call     RandInt     	( 00000064 *Var[1] )
   64:  Switch  *Var[0] 
   70:  	Case  ==  00000001 
   7C:  		If  *Var[1]  <  00000050 
   8C:  			ExecWait $Script_Crazee_RunAway
   98:  			Return
   A0:  		EndIf
   A8:  	Case  ==  00000002 
   B4:  		If  *Var[1]  <  00000028 
   C4:  			ExecWait $Script_Crazee_RunAway 
   D0:  			Return
   D8:  		EndIf
   E0:  	Case  ==  00000003 
   EC:  		If  *Var[1]  <  00000014 
   FC:  			ExecWait $Script_Crazee_RunAway 
  108:  			Return
  110:  		EndIf
  118:  	Case  ==  00000004 
  124:  		If  *Var[1]  <  0000000A 
  134:  			ExecWait $Script_Crazee_RunAway 
  140:  			Return
  148:  		EndIf
  150:  EndSwitch
  Call     GetActorVar ( .Actor:Self 00000003 *Var[9] )  
  	If  *Var[9]  == 1` 
		ExecWait $Script_Crazee_Debuff
		  Call     SetActorVar ( .Actor:Self 00000003 00000000 ) 
	Else
		ExecWait $Script_Crazee_Sing
		 Call     SetActorVar ( .Actor:Self 00000003 00000001 ) 
	EndIf
  164:  Return
  16C:  End
}

% ====================================================
% Amazy Dayzee
% + Battle opens with a 'doom' song -- Mario will die after 3 turns.
% + Increased HP (20 -> 50)
% + Increased Damage
% - Removed chance for song to inflict sleep (15% -> 0%)
% - Removed tendency to flee
% ====================================================

% Only get Star Points once!
#define .AmazyDied *GameByte[0A9]

@ $AmazyDayzee
{
[Level]        100`b 
[MaxHP]        50`b
[Escape]        0`b 
[AirLift]       0`b 
[Hurricane]     0`b
[UpAndAway]     0`b 
}

#new:Function $Function_SetLevel
{
	PUSH	RA, S0, S1, S2
	DADDU	S1, A0, R0
	LW		S0, C (S1)
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	ADDIU	S0, S0, 4
	DADDU	A0, S1, R0
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S2, V0, R0
	SB		V0, 6 (S2)
	POP		RA, S0, S1, S2
	JR		RA
	ADDIU	V0, R0, 2
}

@ $Script_Init_80221590
{
    0:  Call	BindTakeTurn	( .Actor:Self $Script_TakeTurn_80222500 )
   14:  Call	BindIdle		( .Actor:Self $Script_Idle_802215DC )
   28:  Call	BindHandleEvent	( .Actor:Self $Script_HandleEvent_802216CC )
		Call	BindNextTurn	( .Actor:Self $Script_AmazyTurn )
		Call	SetActorVar		( .Actor:Self 00000003 .False )
		Call	SetActorVar		( .Actor:Self 00000004 00000000 )
		If	.AmazyDied  ==  .True
			Call	$Function_SetLevel	( $AmazyDayzee 0 )
		EndIf
   3C:  Return
   44:  End
}

@ $Script_HandleEvent_802216CC {
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     GetLastEvent 	( .Actor:Self *Var[0] )
   28:  Switch  *Var[0] 
   34:  	CaseOR  ==  .Event:HitCombo
   40:  	CaseOR  ==  .Event:Hit
   4C:  		SetConst  *Var[0]  00000001 
   5C:  		SetConst  *Var[1]  00480108 
   6C:  		ExecWait DoNormalHit 
   78:  	EndCaseGroup
   80:  	Case  ==  .Event:BurnHit
   8C:  		SetConst  *Var[0]  00000001 
   9C:  		SetConst  *Var[1]  00480109 
   AC:  		SetConst  *Var[2]  0048010A 
   BC:  		ExecWait DoBurnHit 
   C8:  	Case  ==  .Event:BurnDeath
   D4:  		SetConst  *Var[0]  00000001 
   E4:  		SetConst  *Var[1]  00480109 
   F4:  		SetConst  *Var[2]  0048010A 
  104:  		ExecWait DoBurnHit 
  110:  		SetConst  *Var[0]  00000001 
  120:  		SetConst  *Var[1]  0048010A 
  Set .AmazyDied .True
  130:  		ExecWait DoDeath 
  13C:  		Return
  144:  	Case  ==  .Event:SpinSmashHit
  150:  		SetConst  *Var[0]  00000001 
  160:  		SetConst  *Var[1]  00480108 
  170:  		ExecWait 8029B998 
  17C:  	Case  ==  .Event:SpinSmashDeath
  188:  		SetConst  *Var[0]  00000001 
  198:  		SetConst  *Var[1]  00480108 
  1A8:  		ExecWait 8029B998 
  1B4:  		SetConst  *Var[0]  00000001 
  1C4:  		SetConst  *Var[1]  00480108 
  Set .AmazyDied .True
  1D4:  		ExecWait DoDeath 
  1E0:  		Return
  1E8:  	Case  ==  .Event:ShockHit
  1F4:  		SetConst  *Var[0]  00000001 
  204:  		SetConst  *Var[1]  00480108 
  214:  		ExecWait DoShockHit 
  220:  		SetConst  *Var[0]  00000001 
  230:  		SetConst  *Var[1]  00480108 
  240:  		ExecWait 8029BD70 
  24C:  		ExecWait $Script_80221690 
  258:  	Case  ==  .Event:ShockDeath
  264:  		SetConst  *Var[0]  00000001 
  274:  		SetConst  *Var[1]  00480108 
  284:  		ExecWait DoShockHit 
  290:  		SetConst  *Var[0]  00000001 
  2A0:  		SetConst  *Var[1]  00480108 
  Set .AmazyDied .True
  2B0:  		ExecWait DoDeath 
  2BC:  		Return
  2C4:  	CaseOR  ==  00000017
  2D0:  	CaseOR  ==  .Event:Immune
  2DC:  	CaseOR  ==  .Event:AirLiftFailed
  2E8:  		SetConst  *Var[0]  00000001 
  2F8:  		SetConst  *Var[1]  00480101 
  308:  		ExecWait DoImmune 
  314:  	EndCaseGroup
  31C:  	Case  ==  .Event:Death
  328:  		SetConst  *Var[0]  00000001 
  338:  		SetConst  *Var[1]  00480108 
  348:  		ExecWait DoNormalHit 
  354:  		Wait     0000000A 
  360:  		SetConst  *Var[0]  00000001 
  370:  		SetConst  *Var[1]  00480108
Set .AmazyDied .True  
  380:  		ExecWait DoDeath 
  38C:  		Return
  394:  	Case  ==  .Event:RecoverStatus
  3A0:  		SetConst  *Var[0]  00000001 
  3B0:  		SetConst  *Var[1]  00480101 
  3C0:  		ExecWait DoRecover 
  3CC:  	Case  ==  .Event:ScareAway
  3D8:  		SetConst  *Var[0]  00000001 
  3E8:  		SetConst  *Var[1]  00480104 
  3F8:  		SetConst  *Var[2]  00480108 
  408:  		ExecWait DoScareAway 
  414:  		Return
  41C:  	Case  ==  .Event:BeginAirLift
  428:  		SetConst  *Var[0]  00000001 
  438:  		SetConst  *Var[1]  00480104 
  448:  		ExecWait DoAirLift 
  454:  	Case  ==  .Event:BlowAway
  460:  		Call     GetStatusFlags ( .Actor:Self *Var[0] )
  474:  		If  *Var[0]  !&  0035D000 
  484:  			If  *Var[0]  &  00080000 
  494:  				Call     SetActorDispOffset ( FFFFFF81 00000000 00000001 00000000 )
  4B0:  			Else
  4B8:  				Call     SetActorDispOffset ( FFFFFF81 00000000 00000003 00000000 )
  4D4:  			EndIf
  4DC:  		EndIf
  4E4:  		SetConst  *Var[0]  00000001 
  4F4:  		SetConst  *Var[1]  00480108 
  504:  		ExecWait DoBlowAway 
  510:  		Return
  518:  	Default
  520:  EndSwitch
  528:  Call     UseIdleAnimation 	( .Actor:Self .True )
  53C:  Return
  544:  End
}
   
#new:Script $Script_AmazyTurn
{
	Call	GetBattlePhase ( *Var[0] )
	Switch  *Var[0]
	Case == .Phase:PlayerBegin
		% Check doom flag
		Call	GetActorVar		( .Actor:Self 00000003 *Var[0] )
		If	*Var[0]  ==  .False
			ExecWait $Script_BeginDoom
			Call	SetActorVar	( .Actor:Self 00000003 .True )
			Call	SetActorVar	( .Actor:Self 00000004 2 )
		EndIf
	Case == .Phase:EnemyEnd
		% Check turn counter
		Call	GetActorVar	( .Actor:Self 00000004 *Var[0] )
		If	*Var[0]  ==  1
			Call	ShakeCam	( 00000001 00000000 30` *Fixed[0.1] )
			Wait	20`
			Call	$ShowCustomMessage	( 002F0021 90` )
			Wait	90`
		EndIf
		% decrement turn counter
		Call	GetActorVar	( .Actor:Self 00000004 *Var[0] )
		Sub		*Var[0] 1
		Call	SetActorVar	( .Actor:Self 00000004 *Var[0] )
	EndSwitch
	Return
	End
}
   
@ $Script_TakeTurn_80222500
{
	Call     GetBattlePhase ( *Var[0] )
	If       *Var[0] ==  00000001 
		ExecWait $Script_Amazy_Sing 
		Return
	EndIf
	Call	GetActorVar	( .Actor:Self 00000004 *Var[0] )
	If  *Var[0]  ==  0
		ExecWait $Script_EndDoom
	Else
		ExecWait $Script_Amazy_Sing 
	EndIf
	Return
	End
}

#new:Script $Script_BeginDoom
{
	Call	UseIdleAnimation 	( .Actor:Self .False )
	Call	SetTargetActor 			( .Actor:Self .False )
	Call	$Function_DarkenBackground ( )
	Wait	0000000A 
	Thread
		Call	SetAnimation 	( .Actor:Self 00000001 00480106 )
		Wait	00000028 
		Call	SetAnimation 	( .Actor:Self 00000001 00480107 )
	EndThread
	Wait	00000014 
	Call	SetMusicTrack 		( 00000001 .Song:UnusedFanfare 00000000 00000008 )
	Call	GetActorPos 	    ( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Add		*Var[1] 15` 
	Add		*Var[2] 00000002 
	Loop	13` 
		Call	RandInt     	( 50` *Var[3] )
		Sub		*Var[3] 25` 
		Add		*Var[3] *Var[0] 
		Call	PlayEffect  	( 00000026 00000000 *Var[3] *Var[1] *Var[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
		Wait	0000000A 
	EndLoop
	Wait	00000014 
	Call	SetAnimation 	( .Actor:Self 00000001 00480101 )
	Call	$Function_BrightenBackground ( )
	Wait	0000000A 
	Call	$ShowCustomMessage	( 002F0020 90` )
	Wait	90`
	Call	SetTargetActor 			( .Actor:Self .True )
	Call	UseIdleAnimation 	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_EndDoom
{
	Call	$ShowCustomMessage	( 002F0022 90` )
	Wait	90`
	Call	$Function_DarkenBackground ( )
	Wait	10` 
	Thread
		Wait	50`
		Call	ShakeCam    	( 00000001 00000000 100` *Fixed[0.5] )
	EndThread
	Call	FadeOutMusic	( 00000000 900` )
	Call	FadeInMusic 	( 00000001 .Song:UnusedFanfare 00000000 00000BB8 00000000 0000007F )
	Wait	150`
	Call	$Function_Kill
	Wait	10` 
	Call	$Function_BrightenBackground ( )
	% In case of a life shroom, start the music back up at the right time.
	Wait	320`
	Call	FadeInMusic 	( 00000000 .Song:NormalBattle 00000000 00000BB8 00000000 0000007F )
	ExecWait $Script_Amazy_RunAway % Too bad though, they run away afterwards
	Return
	End
}
	
% Setting Mario's HP to zero during an enemy's turn will instantly kill him
% If the player is carrying a life shroom, they WILL survive this!
#new:Function $Function_Kill
{
	ADDIU	SP, SP, FFE0
	SW		RA, 10 (SP)
	LIO		AT, 8010F290
	SB		R0, 2 (AT)
	LW		RA, 10 (SP)
	ADDIU	V0, R0, 2
	JR		RA
	ADDIU	SP, SP, 20
}

% increase (20 -> 31)
@ $Script_Amazy_Sing
{
[5E4]  Call     EnemyDamageTarget 	( .Actor:Self *Var[F] 10000000 00000000 00000000 0000001F 00000020 ) %stupid damage and they dont run
}

% ====================================================
% Ruff Puff
% + Flip tackle attack is faster, 8 dmg
% + When electified, fire a massive thunderbolt (20 dmg, 50% chance to paralyze)
% + 67% chance to electify self
% + 30% chance to spawn electrified
% This areas glass cannon
% ====================================================

@ $RuffPuff
{
% stats
[Index]        34b 
[Level]        19`b 
[MaxHP]        10`b
[Escape]       40`b 
}

@ $StatusTable_802225F8
{
.Status:Normal      0`
.Status:Default    0`
.Status:Sleep      50`
.Status:Poison      0`
.Status:Frozen      0`
.Status:Dizzy     70`
.Status:Fear    0`
.Status:Static      0`
.Status:Paralyze    0`
.Status:Shrink     25`
.Status:Stop       70`
.Status:DefaultTurnMod   0`
.Status:SleepTurnMod     -2`
.Status:PoisonTurnMod     0`
.Status:FrozenTurnMod     0`
.Status:DizzyTurnMod     -1`
.Status:FearTurnMod   0`
.Status:StaticTurnMod     0`
.Status:ParalyzeTurnMod  -3`
.Status:ShrinkTurnMod    -2`
.Status:StopTurnMod      -1`
.Status:End
}

@ $Script_Init_802226F0
{
	Call	BindTakeTurn	( .Actor:Self $Script_TakeTurn_80222DE8 )
	Call	BindIdle		( .Actor:Self $Script_Idle_8022273C )
	Call	BindHandleEvent	( .Actor:Self $Script_HandleEvent_80222898 )
	Call	RandInt	 ( 100` *Var[0] )
	If	*Var[0] > 70`
		Call	$Function_Electrify ( 3 )
	EndIf
	Return
	End
}
   
@ $Script_TakeTurn_80222DE8
{
	% first strike => tackle
	Call     GetBattlePhase ( *Var[0] )
	If       *Var[0] ==  00000001 
		ExecWait $Script_FlipTackle 
		Return
	EndIf
	Call	GetStatusFlags ( .Actor:Self *Var[0] )
	% check if electrified
	If	*Var[0] !&  04002000 
		Call	RandInt	( 100` *Var[0] )
		If	*Var[0] > 67`
			ExecWait $Script_FlipTackle
		Else
			ExecWait $Script_ElectifySelf
		EndIf
	Else
		ExecWait $Script_Thunder
	EndIf
	Return
	End
}

#new:Script $Script_ElectifySelf
{
	Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self .False )
	Thread
		Wait	0000000A 
		Loop	00000004 
			Call	PlaySoundAtActor	( .Actor:Self 000003D2 )
			Call	RandInt	( 00000003 *Var[0] )
			Add		*Var[0] 00000003 
			Wait	*Var[0] 
		EndLoop
	EndThread
	Thread
		Call	8026BF48 ( 00000001 )
		Call	ElectrifyActor ( .Actor:Self 00000003 )
		Call	8026BF48 ( 00000000 )
	EndThread
	Call	EnableIdleScript	( .Actor:Self .True )
	Call	UseIdleAnimation	( .Actor:Self .True )
	Return
	End
}
	
#new:Script $Script_Thunder
{
	Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self .False )
	Call	SetAnimation	( .Actor:Self 00000001 007D0002 )
	Call	$Function_DarkenBackground ( )
	Call	PlaySound		( 00000365 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Sub		*Var[2]  10`
	Call	PlayEffect		( 0000005E 00000000 *Var[0] *Var[1] *Var[2] *Var[0] 200` 0` *Fixed[4.0] 00000006 00000000 00000000 00000000 00000000 )
	Wait	10` 
	Call	$Function_RemoveElectrify ( )
	Call	$Function_ThunderFX ( )
	Wait	5` 
	Call	StartRumble ( 0000000A )
	Call	ShakeCam ( 00000001 00000000 00000005 *Fixed[1.0] )
	Call	EnemyTestTarget ( .Actor:Self  *Var[0] 00000000 00000000 00000001 00000010 )
	Switch   *Var[0] 
		CaseOR   ==  00000006 % transparent
		CaseOR   ==  00000005 % lucky
			Goto	1
		EndCaseGroup
	EndSwitch
	Call	SetGoalToTarget	( .Actor:Self )
	Call	EnemyDamageTarget	( .Actor:Self *Var[0] 00000000 0000FFFF 80000000 0000000F 00000020 )
	Label	1
	Call	SetAnimation	( .Actor:Self 00000001 007D0001 )
	Wait	35` 
	Call	$Function_BrightenBackground ( )
	Call	EnableIdleScript	( .Actor:Self .True )
	Call	UseIdleAnimation	( .Actor:Self .True )
	Return
	End
}
	
#new:Function $Function_DarkenBackground
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	BEQ       A1, R0, .o48
	SW        RA, 14 (SP)
	JAL       8011D82C
	ADDIU     A0, R0, 1
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	DADDU     A3, A0, R0
	LAW       V0, 801512F0
	ADDIU     V1, R0, 1
	JAL       8011BE5C
	SB        V1, 0 (V0)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
       .o48
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	LW        V1, 70 (S0)
	ADDIU     V0, R0, 14
	SUBU      V0, V0, V1
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       8011BE5C
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	SW        V0, 70 (S0)
	SLTIU     V0, V0, 1
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	SLL       V0, V0, 1
	JR        RA
	ADDIU     SP, SP, 18
}
	
#new:Function $Function_BrightenBackground
{
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	DADDU     S0, A0, R0
	BEQ       A1, R0, .o1C
	SW        RA, 14 (SP)
	ADDIU     V0, R0, 14
	SW        V0, 70 (S0)
	.o1C
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	LW        V0, 70 (S0)
	DADDU     A2, A0, R0
	SLL       A3, V0, 2
	ADDU      A3, A3, V0
	SLL       A3, A3, 1
	JAL       8011BE5C
	ANDI      A3, A3, FE
	LW        V0, 70 (S0)
	ADDIU     V0, V0, FFFF
	BEQ       V0, R0, .o58
	SW        V0, 70 (S0)
	BEQ       R0, R0, .o70
	DADDU     V0, R0, R0
	.o58
	DADDU     A0, R0, R0
	DADDU     A1, A0, R0
	DADDU     A2, A0, R0
	JAL       8011BE5C
	DADDU     A3, A0, R0
	ADDIU     V0, R0, 2
	.o70
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 18
}
	
#new:Function $Function_ThunderFX
{
	ADDIU     SP, SP, FFC0
	SW        RA, 24 (SP)
	SW        S2, 20 (SP)
	SW        S1, 1C (SP)
	SW        S0, 18 (SP)
	SDC1      F24, 38 (SP)
	SDC1      F22, 30 (SP)
	SDC1      F20, 28 (SP)
	JAL       ~Func:get_actor
	LW        A0, 148 (A0)
	JAL       ~Func:get_actor
	LH        A0, 428 (V0)
	DADDU     S0, V0, R0
	BEQ       S0, R0, .o128
	ADDIU     V0, R0, 2
	JAL       80149CB4
	ADDIU     A0, R0, 366
	LIO       V1, CCCCCCCD
	LBU       A0, 191 (S0)
	LBU       V0, 190 (S0)
	MULTU     A0, V1
	LWC1      F0, 188 (S0)
	SRL       V1, V0, 2
	ADDU      V0, V0, V1
	MTC1      V0, F6
	NOP
	CVT.S.W   F6, F6
	MUL.S     F6, F6, F0
	NOP
	ADDIU     V0, A0, FFFE
	MTC1      V0, F4
	NOP
	CVT.S.W   F4, F4
	MUL.S     F4, F4, F0
	NOP
	LWC1      F2, 148 (S0)
	LWC1      F22, 144 (S0)
	LWC1      F24, 14C (S0)
	MFHI      T0
	SRL       V0, T0, 3
	ANDI      V0, V0, FF
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	TRUNC.W.S F8, F6
	MFC1      S1, F8
	TRUNC.W.S F8, F4
	MFC1      S2, F8
	LW        V0, 0 (S0)
	ANDI      V0, V0, 8000
	BEQ       V0, R0, .oE8
	ADD.S     F20, F2, F0
	SRL       V0, A0, 1
	MTC1      V0, F0
	NOP
	CVT.S.W   F0, F0
	SUB.S     F20, F20, F0
	.oE8
	JAL       800299FC
	ADDIU     A0, R0, 2
	ADDIU     A0, V0, 3
	MFC1      A1, F22
	MFC1      A2, F20
	MFC1      A3, F24
	MTC1      S1, F0
	NOP
	CVT.S.W   F0, F0
	SWC1      F0, 10 (SP)
	MTC1      S2, F0
	NOP
	CVT.S.W   F0, F0
	JAL       80070CD0
	SWC1      F0, 14 (SP)
	ADDIU     V0, R0, 2
	.o128
	LW        RA, 24 (SP)
	LW        S2, 20 (SP)
	LW        S1, 1C (SP)
	LW        S0, 18 (SP)
	LDC1      F24, 38 (SP)
	LDC1      F22, 30 (SP)
	LDC1      F20, 28 (SP)
	JR        RA
	ADDIU     SP, SP, 40
}
	
#new:Script $Script_FlipTackle % no idea what to call this attack
{
    0:  Call     UseIdleAnimation 	( .Actor:Self .False )
   14:  Call     EnableIdleScript 	( .Actor:Self 00000000 )
   28:  Call     SetTargetActor 		( FFFFFF81 00000000 )
   3C:  Call     UseBattleCamPreset 	( 0000003F )
   4C:  Call     BattleCamTargetActor 		( FFFFFF81 )
   5C:  Call     8024ECF8 		( FFFFFFFF 00000001 00000000 )
   74:  Call     SetAnimation 	( .Actor:Self 00000001 007D0004 )
   8C:  Call     SetGoalToTarget 	( .Actor:Self )
   9C:  Call     AddGoalPos 	( .Actor:Self 00000032 00000000 00000000 )
   B8:  Call     SetActorSpeed 	( .Actor:Self *Fixed[6.0] )
   CC:  Call     FlyToGoal 		( FFFFFF81 00000000 FFFFFFF6 0000000B )
   E8:  Call     SetAnimation 	( .Actor:Self 00000001 007D0001 )
  100:  Wait     00000005 
  10C:  Call     SetAnimation 	( .Actor:Self 00000001 007D0005 )
  124:  Wait     00000005 
  130:  Call     EnemyTestTarget ( FFFFFF81 *Var[0] 00000000 00000000 00000001 00000010 )
  154:  Switch   *Var[0] 
  160:     CaseOR   ==  00000006 
  16C:     CaseOR   ==  00000005 
  178:        Set      *Var[A] *Var[0] 
  188:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  19C:        Call     SetGoalToTarget 	( .Actor:Self )
  1AC:        Call     GetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
  1C8:        Call     SetGoalPos 	( .Actor:Self *Var[0] 00000000 *Var[2] )
  1E4:        Thread
  1EC:           Call     SetActorRotationOffset ( FFFFFF81 00000000 00000010 00000000 )
  208:           SetF     *Var[0] *Fixed[0.0] 
  218:           Loop     0000000F 
  224:              AddF     *Var[0] *Fixed[12.0] 
  234:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  250:              Wait     00000001 
  25C:           EndLoop
  264:        EndThread
  26C:        Call     AddGoalPos 	( .Actor:Self FFFFFFF6 00000000 00000000 )
  288:        Call     JumpToGoal 	( .Actor:Self 00000014 00000000 00000001 00000000 )
  2A8:        If       *Var[A] ==  00000005 
  2B8:           Call     EnemyTestTarget ( FFFFFF81 *Var[A] 80000000 00000000 00000000 00000000 )
  2DC:        EndIf
  2E4:        Thread
  2EC:           Call     SetActorRotationOffset ( FFFFFF81 00000000 00000010 00000000 )
  308:           SetF     *Var[0] *Fixed[180.0] 
  318:           Loop     0000000A 
  324:              AddF     *Var[0] *Fixed[18.0] 
  334:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  350:              Wait     00000001 
  35C:           EndLoop
  364:           Call     SetActorRotationOffset ( FFFFFF81 00000000 00000000 00000000 )
  380:           Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  39C:        EndThread
  3A4:        Call     AddGoalPos 	( .Actor:Self FFFFFFE2 00000000 00000000 )
  3C0:        Call     JumpToGoal 	( .Actor:Self 0000000F 00000000 00000001 00000000 )
  3E0:        Call     AddGoalPos 	( .Actor:Self FFFFFFEC 00000000 00000000 )
  3FC:        Call     JumpToGoal 	( .Actor:Self 0000000A 00000000 00000001 00000000 )
  41C:        Call     AddGoalPos 	( .Actor:Self FFFFFFF6 00000000 00000000 )
  438:        Call     JumpToGoal 	( .Actor:Self 00000005 00000000 00000001 00000000 )
  458:        Wait     0000000F 
  464:        Call     UseBattleCamPreset 	( 00000002 )
  474:        Call     YieldTurn ( )
  480:        Call     SetActorYaw 	( .Actor:Self 000000B4 )
  494:        Call     AddActorDecoration ( FFFFFF81 00000001 00000000 00000002 )
  4B0:        ExecWait $Script_80222820 
  4BC:        Call     RemoveActorDecoration ( FFFFFF81 00000001 00000000 )
  4D4:        Call     SetActorYaw 	( .Actor:Self 00000000 )
  4E8:        Call     EnableIdleScript 	( .Actor:Self 00000001 )
  4FC:        Call     UseIdleAnimation 	( .Actor:Self .True )
  510:        Return
  518:     EndCaseGroup
  520:  EndSwitch
  528:  Thread
  530:     Call     SetActorRotationOffset ( FFFFFF81 00000000 0000000D 00000000 )
  54C:     SetF     *Var[0] *Fixed[0.0] 
			% loop for 6x 30.0 deg, was 8x 22.5 deg
  55C:     Loop     00000006
  568:        AddF     *Var[0] *Fixed[30.0]
  578:        Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  594:        Wait     00000001 
  5A0:     EndLoop
  5A8:  EndThread
  5B0:  Call     SetGoalToTarget 	( .Actor:Self )
  5C0:  Call     SetActorJumpGravity 	( .Actor:Self *Fixed[1.2001953] )
  5D4:  Call     JumpToGoal 	( .Actor:Self 00000006 00000000 00000001 00000000 )	% change time 8 -> 6
  5F4:  Wait     00000002 
  600:  Call     EnemyDamageTarget 	( .Actor:Self *Var[0] 00000000 0000FFFF 80000000 00000006 00000020 )
  628:  Switch   *Var[0] 
  634:     CaseOR   ==  00000000 
  640:     CaseOR   ==  00000002 
  64C:        Call     UseBattleCamPreset 	( 00000002 )
  65C:        Thread
  664:           Call     SetActorRotationOffset ( FFFFFF81 00000000 00000010 00000000 )
  680:           SetF     *Var[0] *Fixed[180.0] 
  690:           Loop     0000000A 
  69C:              SubF     *Var[0] *Fixed[22.5] 
  6AC:              Call     SetActorRotation 	( .Actor:Self 00000000 00000000 *Var[0] )
  6C8:              Wait     00000001 
  6D4:           EndLoop
  6DC:           Call     SetActorRotationOffset ( FFFFFF81 00000000 00000000 00000000 )
  6F8:           Call     SetActorRotation 	( .Actor:Self 00000000 00000000 00000000 )
  714:        EndThread
  71C:        Call     SetGoalToTarget 	( .Actor:Self )
  72C:        Call     AddGoalPos 	( .Actor:Self 0000001E 00000000 00000000 )
  748:        Call     SetActorJumpGravity 	( .Actor:Self *Fixed[0.80078125] )
  75C:        Call     JumpWithBounce ( FFFFFF81 0000000A *Fixed[5.0] )
  774:        Wait     0000000A 
  780:        Call     YieldTurn ( )
  78C:        ExecWait $Script_80222820 
  798:     EndCaseGroup
  7A0:  EndSwitch
  7A8:  Call     EnableIdleScript 	( .Actor:Self 00000001 )
  7BC:  Call     UseIdleAnimation 	( .Actor:Self .True )
  7D0:  Return
  7D8:  End
}
	
% ====================================================
% WMagikoopa
% + Heals an ally by 8 HP or all allies by 5 HP
% + 50% chance to spawn transparent
% + Can vanish self
% + Shape spell flies in from off screen
% ====================================================

#delete $Script_Init_8022C958
#delete $Script_Init_8022C9BC	
#delete $Script_TakeTurn_8022DEE4
#delete $Script_WMagikoopa_ShapeSpell

% ====================================================
% RMagikoopa
% + Boosts attack by +2 per cast (+4 damage), up to +6
% + Shape spell flies in from off screen
% ====================================================

/%

@ $Script_TakeTurn_80227120
[C8]	If       *Var[4] <=  00000006				% maximum attack boost (was 3)
[6A8]	Call     BoostAttack ( *Var[8] 00000002 )	% Increase attack boost from +1 to +2 (damage boost = +4)]

@ $Script_RMagikoopa_ShapeSpell
[288]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
[2B0]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
[4A4]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
[4CC]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
		
%/
% ====================================================
% GRNMagikoopa
% + Boosts defense by +3 per cast, up to +6
% + Shape spell flies in from off screen
% ====================================================

#delete $Script_TakeTurn_80229DE0
#delete $Script_GRNMagikoopa_ShapeSpell

% ====================================================
% YMagikoopa
% + 60% chance to spawn electrified
% + Shape spell flies in from off screen
% ====================================================

@ $Script_Init_802305B8
{
    0:  Call     BindIdle    	( .Actor:Self $Script_Idle_8022E474 )
   14:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80230700 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8022E484 )
   3C:  Call     GetBattleVar 	( 00000002 *Var[0] )
   50:  If       *Var[0] ==  00000000 
   60:     Call     SetBattleVar 	( 00000002 FFFFFFFF )
   74:  EndIf
   7C:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
	% NEW: 60% chance to spawn electrified
		Call	RandInt	 ( 100` *Var[0] )
		If	*Var[0] > 60`
			Call	$Function_Electrify ( 3 )
		EndIf
   % /NEW
   94:  Return
   9C:  End
}

@ $Script_Init_8023065C
{
    0:  Call     BindIdle    	( .Actor:Self $Script_Idle_8022E474 )
   14:  Call     BindTakeTurn 	( .Actor:Self $Script_TakeTurn_80230700 )
   28:  Call     BindHandleEvent 	( .Actor:Self $Script_HandleEvent_8022F0A4 )
   3C:  Call     GetBattleVar 	( 00000002 *Var[0] )
   50:  If       *Var[0] ==  00000000 
   60:     Call     SetBattleVar 	( 00000002 FFFFFFFF )
   74:  EndIf
   7C:  Call     SetActorVar 	( .Actor:Self 00000000 00000000 )
   % NEW: 60% chance to spawn electrified
		Call	RandInt	 ( 100` *Var[0] )
		If	*Var[0] > 60`
			Call	$Function_Electrify ( 3 )
		EndIf
   % /NEW
   94:  Return
   9C:  End
}

@ $Script_YMagikoopa_ShapeSpell
{
[288]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
[2B0]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
[4A4]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
[4CC]	Set      *Var[0] .SpellStartX
		Set      *Var[1] .SpellStartY
}

	%	====================
		 
		% new enemies!
	#import PinkzeeDayzee.bpat
	#import Bzzrk.bpat
	#import 10_AntiGuy.bpat

% ====================================================
% Formation Changes
% ====================================================		

@ $Formation_00
{
$Bzzrk 00000004 0000000A 00000000 00000000 00000000 00000000
$Bzzrk 00000005 00000009 00000000 00000000 00000000 00000000 
$Bzzrk 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_01
{
$Bzzrk    00000004 0000000A 00000000 00000000 00000000 00000000
$RuffPuff 00000005 00000009 00000000 00000000 00000000 00000000  
}

@ $Formation_02
{
$Bzzrk         00000006 0000000A 00000000 00000000 00000000 00000000
$RuffPuff      00000007 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000003 00000008 00000000 00000000 00000000 00000000 % added
}

@ $Formation_03
{
$Lakitu 00000004 0000000A 00000000 00000000 00000000 00000000 
$Bzzrk 	00000005 00000009 00000000 00000000 00000000 00000000 
$Lakitu 00000006 00000008 00000000 00000000 00000000 00000000
}

@ $Formation_04
{
$Lakitu 00000004 0000000A 00000000 00000000 00000000 00000000 
$RuffPuff 00000005 00000009 00000000 00000000 00000000 00000000 
$Lakitu 00000006 00000008 00000000 00000000 00000000 00000000 
$Bzzrk 00000007 00000007 00000000 00000000 00000000 00000000  
}

@ $Formation_09
{
$Lakitu 00000005 0000000A 00000000 00000000 00000000 00000000 
$CrazeeDayzee 	00000002 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000003 00000008 00000000 00000000 00000000 00000000 % added
}

@ $Formation_0A
{
$Lakitu 00000004 0000000A 00000000 00000000 00000000 00000000 
$Lakitu 00000005 00000009 00000000 00000000 00000000 00000000 
$CrazeeDayzee 00000002 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_0B
{
$Lakitu 00000004 0000000A 00000000 00000000 00000000 00000000 
$Lakitu 00000005 00000009 00000000 00000000 00000000 00000000 
$Lakitu 00000006 00000008 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000003 00000007 00000000 00000000 00000000 00000000
}

@ $Formation_13
{
$CrazeeDayzee 00000001 0000000A 00000000 00000000 00000000 00000000 
$Bzzrk 00000006 00000009 00000000 00000000 00000000 00000000 
}

@ $Formation_14
{
$CrazeeDayzee 00000001 0000000A 00000000 00000000 00000000 00000000 
$Bzzrk 00000005 00000009 00000000 00000000 00000000 00000000 
$Bzzrk 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_15
{
$CrazeeDayzee 00000000 0000000A 00000000 00000000 00000000 00000000 
$CrazeeDayzee 00000001 00000009 00000000 00000000 00000000 00000000 
$Bzzrk 00000005 00000008 00000000 00000000 00000000 00000000
}

@ $Formation_10 % flo_09
{
$CrazeeDayzee  00000001 0000000A 00000000 00000000 00000000 00000000 
$CrazeeDayzee  00000002 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000003 00000008 00000000 00000000 00000000 00000000 % added
$RuffPuff      00000007 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_17 % flo_09
{
$Bzzrk 			00000005 0000000A 00000000 00000000 00000000 00000000 
$Bzzrk 			00000006 00000009 00000000 00000000 00000000 00000000 
$Spiny			00000002 00000008 00000000 00000000 00000000 00000000 % added
}

@ $Formation_18
{
$Bzzrk 00000005 0000000A 00000000 00000000 00000000 00000000 
$Bzzrk 00000006 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000002 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_19
{
$Bzzrk 00000004 0000000A 00000000 00000000 00000000 00000000 
$Bzzrk 00000005 00000009 00000000 00000000 00000000 00000000 
$RuffPuff 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_1A
{
$Bzzrk 			00000005 0000000A 00000000 00000000 00000000 00000000 
$RuffPuff 		00000006 00000009 00000000 00000000 00000000 00000000
$CrazeeDayzee 	00000003 00000008 00000000 00000000 00000000 00000000 % added
}

@ $Formation_1B
{
$Bzzrk        00000005 0000000A 00000000 00000000 00000000 00000000 
$RuffPuff     00000006 00000009 00000000 00000000 00000000 00000000 
$CrazeeDayzee 00000002 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_1F
{
$RuffPuff 00000005 0000000A 00000000 00000000 00000000 00000000 
$Bzzrk    00000006 00000009 00000000 00000000 00000000 00000000
$Bzzrk    00000007 00000008 00000000 00000000 00000000 00000000
}

@ $Formation_0F
{
$CrazeeDayzee	00000001 0000000A 00000000 00000000 00000000 00000000 
$CrazeeDayzee	00000002 00000009 00000000 00000000 00000000 00000000 % added
$Bzzrk 			00000007 00000008 00000000 00000000 00000000 00000000 % added
$PinkzeeDayzee	00000003 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_09
{
$Lakitu 00000004 0000000A 00000000 00000000 00000000 00000000 
$Lakitu 00000005 00000009 00000000 00000000 00000000 00000000 
$Spiny 00000002 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_0A
{
$Lakitu 00000004 0000000A 00000000 00000000 00000000 00000000 
$Lakitu 00000005 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000002 00000008 00000000 00000000 00000000 00000000
}

@ $Formation_05
{
$Lakitu 		00000005 0000000A 00000000 00000000 00000000 00000000 
$CrazeeDayzee 	00000002 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee	00000003 00000008 00000000 00000000 00000000 00000000 % added
}

@ $Formation_0C % dropped by Lakitu
{
$Spiny 		00000001 0000000A 00000000 00000000 00000000 00000000 
$Spiny 		00000002 00000009 00000000 00000000 00000000 00000000 
$Spiny		00000003 00000008 00000000 00000000 00000000 00000000 % added
}

% Note: I've removed most Magikoopas to try and diversify the enemies in this area, I added 3 new enemies to make it interesting.

@ $Formation_0E % flo_23
{
$Spiny 		00000001 0000000A 00000000 00000000 00000000 00000000 
$Spiny 		00000002 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000003 00000008 00000000 00000000 00000000 00000000 % added
}

@ $Formation_0D % flo_23
{
$Spiny 		00000000 0000000A 00000000 00000000 00000000 00000000 
$Spiny 		00000001 00000009 00000000 00000000 00000000 00000000  
$RuffPuff   00000007 00000007 00000000 00000000 00000000 00000000 % added
}

@ $Formation_19
{
$Bzzrk 		    00000004 0000000A 00000000 00000000 00000000 00000000 
$Lakitu 		00000005 00000009 00000000 00000000 00000000 00000000 
$RuffPuff 	    00000009 00000008 00000000 00000000 00000000 00000000 % added 
}

% Got fancy with this one, replaced the YMagikoopa
% for an AntiGuy, hopefully it shows up in the 
% map as well, since this is a miniboss fight.

@ $Formation_0B
{
$10_AntiGuy 00000000 0000000A 00000000 00000000 00000000 00000000 
$Lakitu     00000005 00000009 00000000 00000000 00000000 00000000 
$Lakitu     00000006 00000008 00000000 00000000 00000000 00000000 
$Lakitu     00000007 00000007 00000000 00000000 00000000 00000000
}

@ $Formation_20
{
$RuffPuff 00000004 0000000A 00000000 00000000 00000000 00000000 
$RuffPuff 00000005 00000009 00000000 00000000 00000000 00000000 
$Lakitu   00000006 00000008 00000000 00000000 00000000 00000000 
$Lakitu   00000007 00000007 00000000 00000000 00000000 00000000 
}

@ $Formation_22
{
$RuffPuff 00000004 0000000A 00000000 00000000 00000000 00000000 
$RuffPuff 00000005 00000009 00000000 00000000 00000000 00000000 
$Bzzrk 00000006 00000008 00000000 00000000 00000000 00000000 
}

@ $Formation_24
{
$RuffPuff 00000004 0000000A 00000000 00000000 00000000 00000000
$RuffPuff 00000005 00000009 00000000 00000000 00000000 00000000 
$RuffPuff 00000006 00000008 00000000 00000000 00000000 00000000 
$Bzzrk    00000007 00000007 00000000 00000000 00000000 00000000 
}

#new:Formation $50sFormation1_25
{
$Bzzrk 		   00000004 0000000A 00000000 00000000 00000000 00000000  
$Bzzrk 		   00000005 00000009 00000000 00000000 00000000 00000000  
$CrazeeDayzee  00000001 00000008 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000002 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $50sFormation2_26
{
$RuffPuff 00000004 0000000A 00000000 00000000 00000000 00000000 
$Lakitu   00000005 00000009 00000000 00000000 00000000 00000000
$Lakitu   00000006 00000008 00000000 00000000 00000000 00000000 
$Lakitu   00000007 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $50sFormation3_27
{
$RuffPuff 00000001 0000000A 00000000 00000000 00000000 00000000 
$RuffPuff 00000005 00000009 00000000 00000000 00000000 00000000
$RuffPuff 00000002 00000008 00000000 00000000 00000000 00000000 
$RuffPuff 00000006 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $50sFormation4_28
{
$RuffPuff 00000005 0000000A 00000000 00000000 00000000 00000000 
$RuffPuff 00000006 00000009 00000000 00000000 00000000 00000000 
$Spiny 	  00000001 00000006 00000000 00000000 00000000 00000000
$Spiny 	  00000002 00000005 00000000 00000000 00000000 00000000 
}

#new:Formation $50sFormation5_29
{
$CrazeeDayzee  00000000 0000000A 00000000 00000000 00000000 00000000
$CrazeeDayzee  00000001 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000002 00000008 00000000 00000000 00000000 00000000  
$Bzzrk 		   00000005 00000006 00000000 00000000 00000000 00000000  
}

#new:Formation $50sFormation6_2A
{
$Bzzrk 		    00000005 0000000A 00000000 00000000 00000000 00000000  
$CrazeeDayzee 	00000001 00000009 00000000 00000000 00000000 00000000    
$Bzzrk 		    0000000A 00000004 00000000 00000000 00000000 00000000 
$Bzzrk 		    0000000B 00000003 00000000 00000000 00000000 00000000
}

#new:Formation $50sFormation7_2B
{
$CrazeeDayzee  00000001 0000000A 00000000 00000000 00000000 00000000
$CrazeeDayzee  00000002 00000009 00000000 00000000 00000000 00000000 
$PinkzeeDayzee 00000003 00000008 00000000 00000000 00000000 00000000 
$Lakitu        00000006 00000007 00000000 00000000 00000000 00000000 % added
}

#new:Formation $50sFormation8_2C
{
$Bzzrk 	00000004 0000000A 00000000 00000000 00000000 00000000 
$Spiny  00000001 00000009 00000000 00000000 00000000 00000000 
$Spiny  00000002 00000008 00000000 00000000 00000000 00000000
$Lakitu 00000006 00000007 00000000 00000000 00000000 00000000
}

#new:Formation $50sFormation9_2D
{
$AmazyDayzee  00000001 0000000A 00000000 00000000 00000000 00000000
$Bzzrk        00000004 00000009 00000000 00000000 00000000 00000000
}

@ $FormationTable
{
$SJIS_80235180 00000003 $Formation_00 $Stage_802312FC 00000000 % bees in flo_14
$SJIS_80235174 00000003 $Formation_01 $Stage_802312FC 00000000 % bees in flo_14
$SJIS_8023515C 00000003 $Formation_02 $Stage_802312FC 00000000 % bees in flo_14
$SJIS_80235144 00000003 $Formation_03 $Stage_802312FC 00000000 % unused
$SJIS_80235120 00000004 $Formation_04 $Stage_802312FC 00000000 
$SJIS_8023510C 00000003 $Formation_05 $Stage_802312FC 00000000 % unused
$SJIS_802350F8 00000002 $Formation_06 $Stage_802312FC 00000000 
$SJIS_802350E0 00000004 $Formation_07 $Stage_802312FC 00000000 
$SJIS_802350C8 00000004 $Formation_08 $Stage_802312FC 00000000 % unused
$SJIS_802350A8 00000003 $Formation_09 $Stage_802312FC 00000000 
$SJIS_8023508C 00000003 $Formation_0A $Stage_802312FC 00000000 
$SJIS_8023506C 00000004 $Formation_0B $Stage_802312FC 00000000 
$SJIS_80235060 00000003 $Formation_0C $Stage_802312FC 00000000 % ***
$SJIS_80235054 00000003 $Formation_0D $Stage_802312FC 00000000 % ***
$SJIS_8023502C 00000003 $Formation_0E $Stage_802312FC 00000000 % *** unused
$SJIS_8023501C 00000003 $Formation_0F $Stage_802312FC 00000000 % ***
$SJIS_8023500C 00000004 $Formation_10 $Stage_802312FC 00000000 % ***		flo_09
$SJIS_80234FFC 00000003 $Formation_11 $Stage_802312FC 00000000 % unused
$SJIS_80234FEC 00000004 $Formation_12 $Stage_802312FC 00000000 
$SJIS_80234FD4 00000002 $Formation_13 $Stage_802312FC 00000000 % unused
$SJIS_80234FBC 00000003 $Formation_14 $Stage_802312FC 00000000 
$SJIS_80234FA4 00000003 $Formation_15 $Stage_802312FC 00000000 %			flo_09
$SJIS_80234F80 00000003 $Formation_16 $Stage_802312FC 00000000 % unused
$SJIS_80234F74 00000003 $Formation_17 $Stage_802312FC 00000000 % ***		flo_09
$SJIS_80234F68 00000003 $Formation_18 $Stage_802312FC 00000000 % unused
$SJIS_80234F44 00000003 $Formation_19 $Stage_802312FC 00000000 % ***		flo_14
$SJIS_80234F2C 00000003 $Formation_1A $Stage_802312FC 00000000 % ***		flo_25
$SJIS_80234F0C 00000003 $Formation_1B $Stage_802312FC 00000000 % unused
$SJIS_80234EF4 00000001 $Formation_1C $Stage_802312FC 00000000 
$SJIS_80234ED4 00000003 $Formation_1D $Stage_802312FC 00000000 % unused
$SJIS_80234EBC 00000004 $Formation_1E $Stage_802312FC 00000000 % unused
$SJIS_80234EAC 00000003 $Formation_1F $Stage_802312FC 00000000 
$SJIS_80234E9C 00000004 $Formation_20 $Stage_802312FC 00000000 
$SJIS_80234E84 00000002 $Formation_21 $Stage_802312FC 00000000 % unused
$SJIS_80234E68 00000003 $Formation_22 $Stage_802312FC 00000000 
$SJIS_80234E4C 00000003 $Formation_23 $Stage_802312FC 00000000 % unused
$SJIS_80234E20 00000004 $Formation_24 $Stage_802312FC 00000000
00000000 00000004 $50sFormation1_25 $AncientStage 00000000 %These formations are
00000000 00000004 $50sFormation2_26 $AncientStage 00000000 %for the pit of 100 trials
00000000 00000004 $50sFormation3_27 $AncientStage 00000000 %hopefully this works okay
00000000 00000004 $50sFormation4_28 $AncientStage 00000000 
00000000 00000004 $50sFormation5_29 $AncientStage 00000000
00000000 00000004 $50sFormation6_2A $AncientStage 00000000
00000000 00000004 $50sFormation7_2B $AncientStage 00000000 
00000000 00000004 $50sFormation8_2C $AncientStage 00000000 
00000000 00000002 $50sFormation9_2D $AncientStage 00000000 
00000000 00000000 00000000 00000000 00000000 % unused
}

#new:Stage $AncientStage
{
"kpa_tex"
"kmr_bt07_shape"
"kmr_bt07_hit"
$Script_BeforeBoss 
$Script_AfterBoss
00000000 
00000000
00000000 
00000000 
00000000 
}

#new:Script $Script_BeforeBoss
{
	Call	SetSpriteShading 	( FFFFFFFF )
	Call	SetCamBGColor 	( 00000001 00000000 00000000 00000000 )
	Return
	End
}

#new:Script $Script_AfterBoss
{
	Return
	End 
}
