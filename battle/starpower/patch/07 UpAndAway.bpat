@ $Script_UsePower
{
	0:  ExecWait $Script_802A16D0 
    C:  SetConst  *Var[0]  001F0001 
   1C:  ExecWait $Script_802A1E00 
   28:  Call     SetNpcAnimation 	( 00000064 001F0002 )
   3C:  Call     UseBattleCamPreset 	( 00000002 )
   4C:  Wait     00000014 
   58:  Call     802D7CF8 ( 00000000 00000000 00000000 00000140 000000F0 00000080 0000000A )
   80:  Call     $Function_802A1518 ( )
   8C:  Call     PlaySound   	( 00000247 )
   9C:  Call     PlayEffect  	( ~FX:EnergyShockwave 00000000 00000014 00000000 *Fixed[1.0] 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
   E0:  Wait     0000001E 
   EC:  Thread
   F4:  	Call     PlayEffect  	( ~FX:ShimmerWave 00000000 00000032 00000000 0000012C 00000064 0000000A 00000028 00000000 00000000 00000000 00000000 00000000 )
  138:  EndThread
  140:  Call     PlayEffect  	( ~FX:EnergyShockwave 00000000 00000014 00000000 *Fixed[1.0] 0000005A 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  184:  Wait     0000004B 
  190:  Call     802D7CF8 ( 00000000 00000000 00000000 00000140 000000F0 00000000 0000000A )
  1B8:  Call     InitTargetIterator 	( )
  1C4:  Label    00000000 
  1D0:  Call     SetGoalToTarget 	( .Actor:Self )
  1E0:  Call     $Function_802A1628 ( )
  1EC:  Set  *Flag[00]  00000000 
  1FC:  Call     ItemCheckHit 	( *Var[1] 00000000 00000000 00000000 00000000 )
  21C:  If  *Var[1]  ==  00000006 
  22C:  	Set  *Var[0]  00000000 
  23C:  	Set  *Flag[00]  00000001 
  24C:  EndIf
  254:  Switch  *Var[0] 
  260:  	Case  >  00000000 
  26C:  		Call     GetOwnerTarget ( *Var[0] *Var[1] )
  280:  		Call     DispatchEvent 	( *Var[0] .Event:UpAndAway )
  294:  		Call     SetActorRotationOffset 	( *Var[0] 00000000 0000000A 00000000 )
  2B0:  		Thread
  2B8:  			Call     GetOwnerTarget ( *Var[B] *Var[1] )
  2CC:  			Wait     0000000A 
  2D8:  			Call     CreateVirtualEntity ( *Var[A] 80283EE8 )
  2EC:  			Call     GetActorPos 	( *Var[B] *Var[0] *Var[1] *Var[2] )
  308:  			Set  *Var[D]  *Var[0] 
  318:  			Set  *Var[E]  *Var[1] 
  328:  			Set  *Var[F]  *Var[2] 
  338:  			Call     SetVirtualEntityPosition ( *Var[A] *Var[0] *Var[1] *Var[2] )
  354:  			SetF  *Var[0]  *Fixed[0.20019531] 
  364:  			Call     SetVirtualEntityScale ( *Var[A] *Var[0] *Var[0] *Var[0] )
  380:  			Loop     00000004 
  38C:  				AddF  *Var[0]  *Fixed[0.20019531] 
  39C:  				Call     SetVirtualEntityScale ( *Var[A] *Var[0] *Var[0] *Var[0] )
  3B8:  				Wait     00000001 
  3C4:  			EndLoop
  3CC:  			Set  *Var[0]  00000000 
  3DC:  			Loop     00000005 
  3E8:  				Add  *Var[0]  00000048 
  3F8:  				Call     SetVirtualEntityRotation ( *Var[A] 00000000 *Var[0] 00000000 )
  414:  				Wait     00000001 
  420:  			EndLoop
  428:  			Call     PlaySound   	( 00002052 )
  438:  			Set  *Var[0]  *Var[D] 
  448:  			Set  *Var[1]  *Var[E] 
  458:  			Set  *Var[2]  *Var[F] 
  468:  			Set  *Var[3]  00000000 
  478:  			Loop     00000032 
  484:  				Call     SetVirtualEntityPosition ( *Var[A] *Var[0] *Var[1] *Var[2] )
  4A0:  				Call     SetVirtualEntityRotation ( *Var[A] 00000000 *Var[3] 00000000 )
  4BC:  				Add  *Var[1]  00000006 
  4CC:  				Add  *Var[3]  0000002D 
  4DC:  				Wait     00000001 
  4E8:  			EndLoop
  4F0:  		EndThread
  4F8:  		Thread
  500:  			Call     PlaySound   	( 00002071 )
  510:  			Call     GetOwnerTarget ( *Var[A] *Var[1] )
  524:  			Call     SetActorFlagBits 	( *Var[A] 00000004 .True )
  53C:  			SetF  *Var[0]  *Fixed[1.0] 
  54C:  			Loop     00000012 
  558:  				SubF  *Var[0]  *Fixed[0.05078125] 
  568:  				Call     SetActorScale 	( *Var[A] *Var[0] *Var[0] *Var[0] )
  584:  				Wait     00000001 
  590:  			EndLoop
  598:  			Call     SetActorPos 	( *Var[A] 00000000 FFFFFC18 00000000 )
  5B4:  			Call     GetActorPos 	( *Var[A] *Var[0] *Var[1] *Var[2] )
  5D0:  			Loop     0000000A 
  5DC:  				Call     PlayEffect  	( ~FX:Sparkles:Random *Var[0] *Var[1] *Var[2] 00000014 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  620:  				Add  *Var[1]  0000001E 
  630:  				Wait     00000005 
  63C:  			EndLoop
  644:  			Call     SetBattleFlagBits 	( 01000000 .True )
  658:  			Call     RemoveActor 	( *Var[A] )
  668:  		EndThread
  670:  	Default
  678:  		If  *Flag[00]  ==  00000000 
  688:  			Call     PlayerDamageEnemy 	( *Var[0] 00000000 0000FFFF 00000000 00000000 00000820 )
  6AC:  		EndIf
  6B4:  EndSwitch
  6BC:  Wait     00000005 
  6C8:  Call     ChooseNextTarget 	( .Iter:Next *Var[0] )
  6DC:  If  *Var[0]  !=  FFFFFFFF 
  6EC:  	Goto     00000000 
  6F8:  EndIf
  700:  Wait     00000046 
  70C:  Call     $Function_802A15B4 ( )
  718:  ExecWait $Script_802A200C 
  724:  Call     80276EFC ( )
  730:  ExecWait $Script_802A245C 
  Call $LuckyStarRefund
  73C:  Return
  744:  End
}
  
#new:Function $LuckyStarRefund
{
  PUSH        V0, RA                        % Putting the registers onto the stack to work with them
  JAL         $IsBadgeEquiped               % Check for Lucky Day
  ADDIU       A0, R0, 114                   % id of badge (Lucky Day = 114) - HAS TO BE LOADED INTO A0 FOR $IsBadgeEquiped
  BEQ         A0, R0, .NotEquipped          % Branch on the badge NOT being equipped (GoTo .NotEquipped)
  NOP                                       % Nullpointer below the BEQ, because a BEQ ALWAYS reads the next line too
  LIO         S0, $SPSubtractArguments      % Load the Arguments for SPSubtractMainFunction
  JAL         $SPSubtractMainFunction       % Execute SPSubtractMainFunction
  NOP                                       % Nullpointer below the JAL, because a JAL ALWAYS reads the next line too
  .NotEquipped
  ADDIU       V0, R0, 2                     % Set V0 to == 2 so the Function can return
  POP         V0, RA                        % Clearing/Emptying the registers by removing them from the stack
  ADDIU       V0, R0, 2                     % Set V0 to == 2 so the Function can return
  JR          RA                            % Return to the Script
  NOP                                       % Nullpointer below the JR, because a JR ALWAYS reads the next line too
}

#new:Unknown $SPSubtractArguments
{
FFFFFFFE 00000055                           % The typical SPSubtractMainFunction Arguments ( Full bars / Fractions of a bar )
}
	
