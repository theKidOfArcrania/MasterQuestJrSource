@ $Script_UsePower
{
	0:  ExecWait $Script_802A1630 
    C:  SetConst  *Var[0]  001D0000 
   1C:  ExecWait $Script_802A1D60 
   28:  Wait     00000010 
   34:  Thread
   3C:  	Wait     0000000A 
   48:  	Call     SetNpcRotation ( 00000064 00000000 000000B4 00000000 )
   64:  	Wait     00000001 
   70:  	Call     SetNpcRotation ( 00000064 00000000 00000096 00000000 )
   8C:  	Wait     00000001 
   98:  	Call     SetNpcRotation ( 00000064 00000000 00000078 00000000 )
   B4:  	Wait     00000001 
   C0:  	Call     SetNpcRotation ( 00000064 00000000 0000005A 00000000 )
   DC:  	Wait     00000001 
   E8:  	Call     SetNpcRotation ( 00000064 00000000 0000003C 00000000 )
  104:  	Wait     00000001 
  110:  	Call     SetNpcRotation ( 00000064 00000000 0000001E 00000000 )
  12C:  	Wait     00000001 
  138:  	Call     SetNpcRotation ( 00000064 00000000 00000000 00000000 )
  154:  EndThread
  15C:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  178:  Add  *Var[1]  00000019 
  188:  Add  *Var[0]  0000001E 
  198:  Call     NpcFlyTo ( 00000064 *Var[0] *Var[1] *Var[2] 00000014 00000000 0000000A )
  1C0:  Wait     0000000F 
  1CC:  Call     SetNpcAnimation 	( 00000064 001D0001 )
  1E0:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  1FC:  Add  *Var[0]  0000000F 
  20C:  Add  *Var[1]  0000000F 
  21C:  Add  *Var[2]  FFFFFFFB 
  22C:  Call     NpcFlyTo ( 00000064 *Var[0] *Var[1] *Var[2] 0000000A 00000000 0000000A )
  254:  Call     PlaySound   	( 00000245 )
  264:  Thread
  26C:  	Call     PlayEffect  	( ~FX:Recover:LittleHeart *Var[0] *Var[1] *Var[2] 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  2B0:  	Wait     00000002 
  2BC:  	UseIntBuffer $IntTable_802A24E8 
  2C8:  	Loop     00000005 
  2D4:  		Get2Int  *Var[5] *Var[6] 
  2E4:  		Set  *Var[3]  *Var[0] 
  2F4:  		Set  *Var[4]  *Var[1] 
  304:  		Add  *Var[3]  *Var[5] 
  314:  		Add  *Var[4]  *Var[6] 
  324:  		Call     PlayEffect  	( ~FX:Recover:LittleHeart *Var[3] *Var[4] *Var[2] 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  368:  		Wait     00000002 
  374:  	EndLoop
  37C:  EndThread
  384:  Thread
  38C:  	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  3A8:  	Add  *Var[1]  0000000F 
  3B8:  	Add  *Var[0]  00000005 
  3C8:  	Call     $Function_802A1000 ( *Var[0] *Var[1] *Var[2] )
  3E0:  	Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  3FC:  	Add  *Var[1]  00000014 
  40C:  	Add  *Var[0]  00000019 
  41C:  	Call     NpcFlyTo ( 00000064 *Var[0] *Var[1] *Var[2] 0000000A 00000000 0000000A )
  444:  EndThread
  44C:  Call     SetAnimation 	( .Actor:Player 00000000 0001002E )
  464:  Wait     0000000C 
  470:  Thread
  478:  	ExecWait $Script_802A1F6C 
  484:  EndThread
  48C:  Thread
  494:  	Loop     00000002 
  4A0:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  4BC:  		Wait     00000001 
  4C8:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[1.0] *Fixed[1.0] )
  4E4:  		Wait     00000001 
  4F0:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.9501953] *Fixed[1.0] )
  50C:  		Wait     00000001 
  518:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.9003906] *Fixed[1.0] )
  534:  		Wait     00000001 
  540:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.3505859] *Fixed[0.85058594] *Fixed[1.0] )
  55C:  		Wait     00000001 
  568:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.3808594] *Fixed[0.80078125] *Fixed[1.0] )
  584:  		Wait     00000001 
  590:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.4003906] *Fixed[0.80078125] *Fixed[1.0] )
  5AC:  		Wait     00000001 
  5B8:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.85058594] *Fixed[1.0] )
  5D4:  		Wait     00000001 
  5E0:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.9003906] *Fixed[1.0] )
  5FC:  		Wait     00000001 
  608:  		Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[0.9501953] *Fixed[1.0] )
  624:  		Wait     00000001 
  630:  	EndLoop
  638:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  654:  	Wait     00000001 
  660:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.1005859] *Fixed[1.0] *Fixed[1.0] )
  67C:  	Wait     00000001 
  688:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.2001953] *Fixed[0.9501953] *Fixed[1.0] )
  6A4:  	Wait     00000001 
  6B0:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.3007812] *Fixed[0.9003906] *Fixed[1.0] )
  6CC:  	Wait     00000001 
  6D8:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.3505859] *Fixed[0.85058594] *Fixed[1.0] )
  6F4:  	Wait     00000001 
  700:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.3808594] *Fixed[0.80078125] *Fixed[1.0] )
  71C:  	Wait     00000001 
  728:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.4003906] *Fixed[0.80078125] *Fixed[1.0] )
  744:  	Wait     00000001 
  750:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.3007812] *Fixed[1.0] )
  76C:  	Wait     00000001 
  778:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.9003906] *Fixed[1.2001953] *Fixed[1.0] )
  794:  	Wait     00000001 
  7A0:  	Call     SetActorScale 	( .Actor:Self *Fixed[0.9501953] *Fixed[1.1005859] *Fixed[1.0] )
  7BC:  	Wait     00000001 
  7C8:  	Call     SetActorScale 	( .Actor:Self *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  7E4:  	Wait     00000001 
  7F0:  	Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
  808:  EndThread
  810:  Loop     0000000A 
  81C:  	Wait     00000003 
  828:  EndLoop
  830:  Call     UseBattleCamPreset 	( 00000002 )
  840:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  85C:  Add  *Var[0]  00000000 
  86C:  Add  *Var[1]  00000023 
  87C:  Call     $Function_802A156C ( *Var[0] *Var[1] *Var[2] 00000014 )
  898:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  8B4:  Add  *Var[1]  00000019 
  8C4:  Call     802D7520 ( *Var[0] *Var[1] *Var[2] 00000014 )
  8E0:  Call     $Function_802A1518 ( 00000014 )
  8F0:  Thread
  8F8:  	Call     $Function_802A1414 ( )
  904:  EndThread
  90C:  Call     80276EFC ( )
  918:  Call     PlaySoundAtActor 	( .Actor:Player 00000160 )
  92C:  Call     SetActorJumpGravity 	( .Actor:Player *Fixed[1.0] )
  940:  Call     SetActorSpeed 	( .Actor:Player *Fixed[1.0] )
  954:  Call     GetActorPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  970:  Call     SetJumpAnimations 	( .Actor:Player 00000000 00010007 00010008 00010009 )
  990:  Call     SetGoalPos 	( .Actor:Player *Var[0] *Var[1] *Var[2] )
  9AC:  Call     80273444 ( 00000014 00000000 00000000 )
  9C4:  Call     SetAnimation 	( .Actor:Player 00000000 00010009 )
  9DC:  Wait     00000004 
  9E8:  Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
  A00:  Call     SetGoalToHome 	( .Actor:Player )
  A10:  Call     SetActorSpeed 	( .Actor:Player *Fixed[8.0] )
  A24:  Call     SetAnimation 	( .Actor:Player 00000000 00010005 )
  A3C:  Call     PlayerRunToGoal ( 00000000 )
  A4C:  Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
  Call $LuckyStarRefund
  A64:  Return
  A6C:  End
}
  
  
#new:Function $LuckyStarRefund
{
  PUSH        V0, RA                        % Putting the registers onto the stack to work with them
  JAL         $IsBadgeEquiped               % Check for Lucky Day
  ADDIU       A0, R0, 114                   % id of badge (Lucky Day = 114) - HAS TO BE LOADED INTO A0 FOR $IsBadgeEquiped
  BEQ         A0, R0, .NotEquipped          % Branch on the badge NOT being equipped (GoTo .NotEquipped)
  NOP                                       % Nullpointer below the BEQ, because a BEQ ALWAYS reads the next line too
  LIO         S0, $SPSubtractArguments      % Load the Arguments for SPSubtractMainFunction
  JAL         $SPSubtractMainFunction       % Execute SPSubtractMainFunction
  NOP                                       % Nullpointer below the JAL, because a JAL ALWAYS reads the next line too
  .NotEquipped
  ADDIU       V0, R0, 2                     % Set V0 to == 2 so the Function can return
  POP         V0, RA                        % Clearing/Emptying the registers by removing them from the stack
  ADDIU       V0, R0, 2                     % Set V0 to == 2 so the Function can return
  JR          RA                            % Return to the Script
  NOP                                       % Nullpointer below the JR, because a JR ALWAYS reads the next line too
}

#new:Unknown $SPSubtractArguments
{
FFFFFFFF 00000080    
}
