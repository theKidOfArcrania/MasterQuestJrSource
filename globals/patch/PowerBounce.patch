% Running some calcs, assuming 1 floor and 5cap
% 
% NORMAL ENEMIES
%
% T1 IF I ADD +2 DAMAGE TO THE FIRST HIT: 
% 5 + 3 + 2 + 1 + 1 = 12
% 
% T1 IF I ADD +1 DAMAGE: 
% 4 + 3 + 2 + 1 + 1 = 11
% 
% T1 IF I DONT:
% 3 + 2 + 1 + 1 + 1 = 8
%
% MAX CHARGE BURST IF I ADD +2 DMG:
% 18 + 13 + 9 + 6 + 4 = 44
%
% MAX CHARGE IF I ADD +1
% 17 + 12 + 9 + 6 + 4 = 42
%
% MAX CHARGE IF I DONT
% 16 + 12 + 9 + 6 + 4 = 41
%
% BOSSES - 3 CAP
%
% T1 IF I ADD +2 DAMAGE TO THE FIRST HIT: 
% 5 + 3 + 2 = 10
% 
% T1 IF I ADD +1 DAMAGE: 
% 4 + 3 + 2 = 9
% 
% T1 IF I DONT:
% 3 + 2 + 1 = 6
%
% MAX CHARGE BURST IF I ADD +2 DMG:
% 18 + 13 + 9 = 34
%
% MAX CHARGE IF I ADD +1
% 17 + 12 + 9 = 32
%
% MAX CHARGE IF I DONT
% 16 + 12 + 9 = 31
%


% Running these calcs, I have decided that +1 damage over base is ideal balance.
% It can still be boosted with AoN, turbo charge, etc

%%
% Power Bounce
%%

% Amplitude is on S0, reduction counter is on V0.
@Hook 1A0BE0 % 80272300:
{
ADDIU	SP, SP, -4
SW		A1, 4 (SP)
% while(V0 < 0)
.Loop
BGEZ	V0, .EndLoop
% S0 = ((S0 << 1) + S0) >> 2
ADD		A1, S0, R0
SLL		S0, S0, 1
ADD		S0, A1, S0
SRL		S0, S0, 2
BEQ		S0, R0, .isZero
NOP
BEQ		R0, R0, .Loop
ADDI	V0, V0, 1
.isZero
ORI 	S0, r0, 0001
BEQ		R0, R0, .Loop
ADDI	V0, V0, 1
.EndLoop
LW		A1, 4 (SP)
J		8027230C
ADDIU	SP, SP, 4
}

% For clarity, remove the unused instruction.
@Function 1A0BE8
{
NOP
}

%%
% Multibonk
%%

% Amplitude is on A0, reduction counter is on V0.
@Hook 1AD368
{
ADDIU	SP, SP, -4
SW		A1, 4 (SP)
% while(V0 < 0)
.Loop
BGEZ	V0, .EndLoop
% A0 = ((A0 << 1) + A0) >> 2
ADD		A1, A0, R0
SLL		A0, A0, 1
ADD		A0, A1, A0
SRL		A0, A0, 2
BEQ		R0, R0, .Loop
ADDI	V0, V0, 1
.EndLoop
LW		A1, 4 (SP)
J		8027EA94
ADDIU	SP, SP, 4
}

% For clarity, remove the unused instruction.
@Function 1AD370
{
NOP
}

/% Replace above code with below to change the minimum damage to 1

%%
% Power Bounce
%%

% Amplitude is on S0, reduction counter is on V0.
@Hook 1A0BE0 % 80272300:
ADDIU	SP, SP, -4
SW		A1, 4 (SP)
% while(V0 < 0)
.Loop
BGEZ	V0, .EndLoop
% S0 = ((S0 << 1) + S0) >> 2
ADD		A1, S0, R0
SLL		S0, S0, 1
ADD		S0, A1, S0
SRL		S0, S0, 2
BEQ		S0, R0, .isZero
NOP
BEQ		R0, R0, .Loop
ADDI	V0, V0, 1
.isZero
ORI 	S0, r0, 0001
BEQ		R0, R0, .Loop
ADDI	V0, V0, 1
.EndLoop
LW		A1, 4 (SP)
J		8027230C
ADDIU	SP, SP, 4

% For clarity, remove the unused instruction.
@Function 1A0BE8
NOP

%%
% Multibonk
%%

% Amplitude is on A0, reduction counter is on V0.
@Hook 1AD368
ADDIU	SP, SP, -4
SW		A1, 4 (SP)
% while(V0 < 0)
.Loop
BGEZ	V0, .EndLoop
% A0 = ((A0 << 1) + A0) >> 2
ADD		A1, A0, R0
SLL		A0, A0, 1
ADD		A0, A1, A0
SRL		A0, A0, 2
BEQ		S0, R0, .isZero
NOP
BEQ		R0, R0, .Loop
ADDI	V0, V0, 1
.isZero
ORI 	S0, r0, 0001
BEQ		R0, R0, .Loop
ADDI	V0, V0, 1
.EndLoop
LW		A1, 4 (SP)
J		8027EA94
ADDIU	SP, SP, 4

% For clarity, remove the unused instruction.
@Function 1AD370
NOP

%/

#new:Data $IntTable_StartingJumpCount
{
00000001
}
